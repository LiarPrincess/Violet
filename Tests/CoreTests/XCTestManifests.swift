#if !canImport(ObjectiveC)
import XCTest

extension BidirectionalCollectionDropLast {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BidirectionalCollectionDropLast = [
        ("test_consumeNone", test_consumeNone),
        ("test_consumePart", test_consumePart),
        ("test_consumeWhole", test_consumeWhole),
        ("test_emptySelf", test_emptySelf),
        ("test_leaveFirstChar", test_leaveFirstChar),
    ]
}

extension BidirectionalCollectionEndsWith {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BidirectionalCollectionEndsWith = [
        ("test_emptySelf", test_emptySelf),
        ("test_emptySelf_emptySuffix", test_emptySelf_emptySuffix),
        ("test_emptySuffix", test_emptySuffix),
        ("test_endsWith_equalLength", test_endsWith_equalLength),
        ("test_endsWith_selfLonger", test_endsWith_selfLonger),
        ("test_notEndsWith_equalLength", test_notEndsWith_equalLength),
        ("test_notEndsWith_suffixLonger", test_notEndsWith_suffixLonger),
    ]
}

extension BidirectionalCollectionTakeLast {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BidirectionalCollectionTakeLast = [
        ("test_emptySelf", test_emptySelf),
        ("test_takeMoreThanWhole", test_takeMoreThanWhole),
        ("test_takePart", test_takePart),
        ("test_takeWhole", test_takeWhole),
        ("test_takeZero", test_takeZero),
    ]
}

extension CollectionTakeFirst {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CollectionTakeFirst = [
        ("test_emptySelf", test_emptySelf),
        ("test_takeMoreThanWhole", test_takeMoreThanWhole),
        ("test_takePart", test_takePart),
        ("test_takeWhole", test_takeWhole),
        ("test_takeZero", test_takeZero),
    ]
}

extension DictionaryTakeExisting {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DictionaryTakeExisting = [
        ("test_takeExisting_noIntersection_justMerge", test_takeExisting_noIntersection_justMerge),
        ("test_takeExisting_withIntersection_takeExisting", test_takeExisting_withIntersection_takeExisting),
    ]
}

extension MutableCollectionRemoveDuplicates {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MutableCollectionRemoveDuplicates = [
        ("test_allDifferent", test_allDifferent),
        ("test_allDuplicates", test_allDuplicates),
        ("test_duplicate_middle", test_duplicate_middle),
        ("test_duplicate_prefix", test_duplicate_prefix),
        ("test_duplicate_suffix", test_duplicate_suffix),
        ("test_emptySelf", test_emptySelf),
    ]
}

extension SipHashTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SipHashTests = [
        ("test_empty", test_empty),
        ("test_example_from_paper", test_example_from_paper),
        ("test_i_see_the_light", test_i_see_the_light),
    ]
}

extension UnicodeScalarCodePointNotation {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UnicodeScalarCodePointNotation = [
        ("test_ascii", test_ascii),
        ("test_highValues", test_highValues),
        ("test_polish", test_polish),
    ]
}

extension UseScalarsToHashStringTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UseScalarsToHashStringTests = [
        ("test_different_byLength_areNotEqual", test_different_byLength_areNotEqual),
        ("test_different_ecuteAccents_areNotEqual", test_different_ecuteAccents_areNotEqual),
        ("test_empty_areEqual", test_empty_areEqual),
        ("test_equal_areEqual", test_equal_areEqual),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(BidirectionalCollectionDropLast.__allTests__BidirectionalCollectionDropLast),
        testCase(BidirectionalCollectionEndsWith.__allTests__BidirectionalCollectionEndsWith),
        testCase(BidirectionalCollectionTakeLast.__allTests__BidirectionalCollectionTakeLast),
        testCase(CollectionTakeFirst.__allTests__CollectionTakeFirst),
        testCase(DictionaryTakeExisting.__allTests__DictionaryTakeExisting),
        testCase(MutableCollectionRemoveDuplicates.__allTests__MutableCollectionRemoveDuplicates),
        testCase(SipHashTests.__allTests__SipHashTests),
        testCase(UnicodeScalarCodePointNotation.__allTests__UnicodeScalarCodePointNotation),
        testCase(UseScalarsToHashStringTests.__allTests__UseScalarsToHashStringTests),
    ]
}
#endif
