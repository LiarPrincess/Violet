#if !canImport(ObjectiveC)
import XCTest

extension ArgumentParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentParserTests = [
        ("test_bind_argumentGivenBy_argsAndKwargs_fails", test_bind_argumentGivenBy_argsAndKwargs_fails),
        ("test_bind_count_tooMany_args", test_bind_count_tooMany_args),
        ("test_bind_count_tooMany_argsKwargs", test_bind_count_tooMany_argsKwargs),
        ("test_bind_extraneousKwarg_fails", test_bind_extraneousKwarg_fails),
        ("test_bind_missingRequiredArg_fails", test_bind_missingRequiredArg_fails),
        ("test_bind_optional_arg", test_bind_optional_arg),
        ("test_bind_optional_arg_kwarg", test_bind_optional_arg_kwarg),
        ("test_bind_optional_kwarg", test_bind_optional_kwarg),
        ("test_bind_optional_notProvided", test_bind_optional_notProvided),
        ("test_bind_optional_skipKwarg_andBind_nextOne", test_bind_optional_skipKwarg_andBind_nextOne),
        ("test_bind_required_arg", test_bind_required_arg),
        ("test_bind_required_arg_kwarg", test_bind_required_arg_kwarg),
        ("test_bind_required_kwarg", test_bind_required_kwarg),
        ("test_init_argumentCount_moreInFormatThanNames_fails", test_init_argumentCount_moreInFormatThanNames_fails),
        ("test_init_argumentCount_moreNamesThanInFormat_fails", test_init_argumentCount_moreNamesThanInFormat_fails),
        ("test_init_argumentNames_positionalAfterKwarg_fails", test_init_argumentNames_positionalAfterKwarg_fails),
        ("test_init_markers_multipleMaxPositional_fails", test_init_markers_multipleMaxPositional_fails),
        ("test_init_markers_multipleRequiredArg_fails", test_init_markers_multipleRequiredArg_fails),
        ("test_init_withoutFunctionName_fails", test_init_withoutFunctionName_fails),
        ("test_init_withoutFunctionName_withColon_fails", test_init_withoutFunctionName_withColon_fails),
    ]
}

extension ArgumentsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentsTests = [
        ("test_bytes", test_bytes),
        ("test_bytes_warning_doesNotOverrideError", test_bytes_warning_doesNotOverrideError),
        ("test_command", test_command),
        ("test_command_withFlags", test_command_withFlags),
        ("test_debug", test_debug),
        ("test_flagsOrder_doesNotMatter", test_flagsOrder_doesNotMatter),
        ("test_help", test_help),
        ("test_ignoreEnvironment", test_ignoreEnvironment),
        ("test_inspect", test_inspect),
        ("test_interactive", test_interactive),
        ("test_interactive_withFlags", test_interactive_withFlags),
        ("test_isolate", test_isolate),
        ("test_module", test_module),
        ("test_module_withFlags", test_module_withFlags),
        ("test_optimization", test_optimization),
        ("test_optimization_O_doesNotOverrideOO", test_optimization_O_doesNotOverrideOO),
        ("test_quiet", test_quiet),
        ("test_script", test_script),
        ("test_script_withFlags", test_script_withFlags),
        ("test_usage", test_usage),
        ("test_verbose", test_verbose),
        ("test_version", test_version),
        ("test_warnings", test_warnings),
        ("test_warnings_multiple", test_warnings_multiple),
    ]
}

extension DocHelperTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DocHelperTests = [
        ("test_doc_noSeparator_int", test_doc_noSeparator_int),
        ("test_doc_properSeparator_list", test_doc_properSeparator_list),
        ("test_doc_properSeparator_module", test_doc_properSeparator_module),
        ("test_signature_noSeparator_int", test_signature_noSeparator_int),
        ("test_signature_properSeparator_list", test_signature_properSeparator_list),
        ("test_signature_properSeparator_module", test_signature_properSeparator_module),
    ]
}

extension EnvironmentTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EnvironmentTests = [
        ("test_debug", test_debug),
        ("test_inspect", test_inspect),
        ("test_optimize_O", test_optimize_O),
        ("test_optimize_OO", test_optimize_OO),
        ("test_other_isIgnored", test_other_isIgnored),
        ("test_violetHome_prefix", test_violetHome_prefix),
        ("test_violetHome_prefix_colon_execPrefix", test_violetHome_prefix_colon_execPrefix),
        ("test_violetHome_prefix_colon_execPrefix_withAnotherColon", test_violetHome_prefix_colon_execPrefix_withAnotherColon),
        ("test_violetPath_multiple", test_violetPath_multiple),
        ("test_violetPath_multiple_endingWithColon", test_violetPath_multiple_endingWithColon),
        ("test_violetPath_single", test_violetPath_single),
        ("test_warnings_multiple", test_warnings_multiple),
        ("test_warnings_single", test_warnings_single),
        ("test_warnings_unknown_isIgnored", test_warnings_unknown_isIgnored),
    ]
}

extension GenericLayoutTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GenericLayoutTests = [
        ("test_i32_i8_hole1_i16_i8_hole7_i64", test_i32_i8_hole1_i16_i8_hole7_i64),
        ("test_i32_i8_i8_i16_i64", test_i32_i8_i8_i16_i64),
        ("test_i32_i8_i8_u16x5_hole", test_i32_i8_i8_u16x5_hole),
    ]
}

extension HashFloat {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__HashFloat = [
        ("test_decimal_negative", test_decimal_negative),
        ("test_decimal_positive", test_decimal_positive),
        ("test_inf_X", test_inf_X),
        ("test_int_negative_1_isMinus1", test_int_negative_1_isMinus1),
        ("test_int_negative_aroundInt32min_stayTheSame", test_int_negative_aroundInt32min_stayTheSame),
        ("test_int_negative_aroundModulus_wrapsIfNeeded", test_int_negative_aroundModulus_wrapsIfNeeded),
        ("test_int_negative_small_stayTheSame", test_int_negative_small_stayTheSame),
        ("test_int_positive_aroundInt32max_stayTheSame", test_int_positive_aroundInt32max_stayTheSame),
        ("test_int_positive_aroundModulus_wrapsIfNeeded", test_int_positive_aroundModulus_wrapsIfNeeded),
        ("test_int_positive_small_stayTheSame", test_int_positive_small_stayTheSame),
        ("test_int_zero_isZero", test_int_zero_isZero),
        ("test_nan_isZero", test_nan_isZero),
    ]
}

extension HashInt {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__HashInt = [
        ("test_negative_1_isMinus1", test_negative_1_isMinus1),
        ("test_negative_aroundInt32min_stayTheSame", test_negative_aroundInt32min_stayTheSame),
        ("test_negative_aroundModulus_wrapsIfNeeded", test_negative_aroundModulus_wrapsIfNeeded),
        ("test_negative_small_stayTheSame", test_negative_small_stayTheSame),
        ("test_positive_aroundInt32max_stayTheSame", test_positive_aroundInt32max_stayTheSame),
        ("test_positive_aroundModulus_wrapsIfNeeded", test_positive_aroundModulus_wrapsIfNeeded),
        ("test_positive_small_stayTheSame", test_positive_small_stayTheSame),
        ("test_zero_isZero", test_zero_isZero),
    ]
}

extension HashString {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__HashString = [
        ("test_empty_isZero", test_empty_isZero),
        ("test_i_see_the_light", test_i_see_the_light),
    ]
}

extension InvalidSelfArgumentMessageTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__InvalidSelfArgumentMessageTests = [
        ("test_ArithmeticError", test_ArithmeticError),
        ("test_AssertionError", test_AssertionError),
        ("test_AttributeError", test_AttributeError),
        ("test_BaseException", test_BaseException),
        ("test_BlockingIOError", test_BlockingIOError),
        ("test_bool", test_bool),
        ("test_BrokenPipeError", test_BrokenPipeError),
        ("test_BufferError", test_BufferError),
        ("test_builtinFunction", test_builtinFunction),
        ("test_builtinMethod", test_builtinMethod),
        ("test_bytearray", test_bytearray),
        ("test_bytearray_iterator", test_bytearray_iterator),
        ("test_bytes", test_bytes),
        ("test_bytes_iterator", test_bytes_iterator),
        ("test_BytesWarning", test_BytesWarning),
        ("test_callable_iterator", test_callable_iterator),
        ("test_cell", test_cell),
        ("test_ChildProcessError", test_ChildProcessError),
        ("test_classmethod", test_classmethod),
        ("test_code", test_code),
        ("test_complex", test_complex),
        ("test_ConnectionAbortedError", test_ConnectionAbortedError),
        ("test_ConnectionError", test_ConnectionError),
        ("test_ConnectionRefusedError", test_ConnectionRefusedError),
        ("test_ConnectionResetError", test_ConnectionResetError),
        ("test_DeprecationWarning", test_DeprecationWarning),
        ("test_dict", test_dict),
        ("test_dict_itemiterator", test_dict_itemiterator),
        ("test_dict_items", test_dict_items),
        ("test_dict_keyiterator", test_dict_keyiterator),
        ("test_dict_keys", test_dict_keys),
        ("test_dict_valueiterator", test_dict_valueiterator),
        ("test_dict_values", test_dict_values),
        ("test_ellipsis", test_ellipsis),
        ("test_enumerate", test_enumerate),
        ("test_EOFError", test_EOFError),
        ("test_Exception", test_Exception),
        ("test_FileExistsError", test_FileExistsError),
        ("test_FileNotFoundError", test_FileNotFoundError),
        ("test_filter", test_filter),
        ("test_float", test_float),
        ("test_FloatingPointError", test_FloatingPointError),
        ("test_frame", test_frame),
        ("test_frozenset", test_frozenset),
        ("test_function", test_function),
        ("test_FutureWarning", test_FutureWarning),
        ("test_GeneratorExit", test_GeneratorExit),
        ("test_ImportError", test_ImportError),
        ("test_ImportWarning", test_ImportWarning),
        ("test_IndentationError", test_IndentationError),
        ("test_IndexError", test_IndexError),
        ("test_int", test_int),
        ("test_InterruptedError", test_InterruptedError),
        ("test_IsADirectoryError", test_IsADirectoryError),
        ("test_iterator", test_iterator),
        ("test_KeyboardInterrupt", test_KeyboardInterrupt),
        ("test_KeyError", test_KeyError),
        ("test_list", test_list),
        ("test_list_iterator", test_list_iterator),
        ("test_list_reverseiterator", test_list_reverseiterator),
        ("test_LookupError", test_LookupError),
        ("test_map", test_map),
        ("test_MemoryError", test_MemoryError),
        ("test_method", test_method),
        ("test_module", test_module),
        ("test_ModuleNotFoundError", test_ModuleNotFoundError),
        ("test_NameError", test_NameError),
        ("test_NoneType", test_NoneType),
        ("test_NotADirectoryError", test_NotADirectoryError),
        ("test_NotImplementedError", test_NotImplementedError),
        ("test_NotImplementedType", test_NotImplementedType),
        ("test_OSError", test_OSError),
        ("test_OverflowError", test_OverflowError),
        ("test_PendingDeprecationWarning", test_PendingDeprecationWarning),
        ("test_PermissionError", test_PermissionError),
        ("test_ProcessLookupError", test_ProcessLookupError),
        ("test_property", test_property),
        ("test_range", test_range),
        ("test_range_iterator", test_range_iterator),
        ("test_RecursionError", test_RecursionError),
        ("test_ReferenceError", test_ReferenceError),
        ("test_ResourceWarning", test_ResourceWarning),
        ("test_reversed", test_reversed),
        ("test_RuntimeError", test_RuntimeError),
        ("test_RuntimeWarning", test_RuntimeWarning),
        ("test_set", test_set),
        ("test_set_iterator", test_set_iterator),
        ("test_SimpleNamespace", test_SimpleNamespace),
        ("test_slice", test_slice),
        ("test_staticmethod", test_staticmethod),
        ("test_StopAsyncIteration", test_StopAsyncIteration),
        ("test_StopIteration", test_StopIteration),
        ("test_str", test_str),
        ("test_str_iterator", test_str_iterator),
        ("test_super", test_super),
        ("test_SyntaxError", test_SyntaxError),
        ("test_SyntaxWarning", test_SyntaxWarning),
        ("test_SystemError", test_SystemError),
        ("test_SystemExit", test_SystemExit),
        ("test_TabError", test_TabError),
        ("test_TextFile", test_TextFile),
        ("test_TimeoutError", test_TimeoutError),
        ("test_traceback", test_traceback),
        ("test_tuple", test_tuple),
        ("test_tuple_iterator", test_tuple_iterator),
        ("test_type", test_type),
        ("test_TypeError", test_TypeError),
        ("test_UnboundLocalError", test_UnboundLocalError),
        ("test_UnicodeDecodeError", test_UnicodeDecodeError),
        ("test_UnicodeEncodeError", test_UnicodeEncodeError),
        ("test_UnicodeError", test_UnicodeError),
        ("test_UnicodeTranslateError", test_UnicodeTranslateError),
        ("test_UnicodeWarning", test_UnicodeWarning),
        ("test_UserWarning", test_UserWarning),
        ("test_ValueError", test_ValueError),
        ("test_Warning", test_Warning),
        ("test_ZeroDivisionError", test_ZeroDivisionError),
        ("test_zip", test_zip),
    ]
}

extension OrderedDictionaryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OrderedDictionaryTests = [
        ("test_clear", test_clear),
        ("test_delete_existing", test_delete_existing),
        ("test_delete_notExisting", test_delete_notExisting),
        ("test_description", test_description),
        ("test_get_existing", test_get_existing),
        ("test_get_notExisting", test_get_notExisting),
        ("test_get_removed", test_get_removed),
        ("test_indexCalculation_eventually_triesAllIndices", test_indexCalculation_eventually_triesAllIndices),
        ("test_init_withoutArgs", test_init_withoutArgs),
        ("test_init_withSize", test_init_withSize),
        ("test_init_withSize_lessThanMin", test_init_withSize_lessThanMin),
        ("test_isEmpty", test_isEmpty),
        ("test_resize", test_resize),
        ("test_set", test_set),
        ("test_set_update", test_set_update),
    ]
}

extension PyBoolTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyBoolTests = [
        ("test__and__", test__and__),
        ("test__or__", test__or__),
        ("test__repr__", test__repr__),
        ("test__str__", test__str__),
        ("test__xor__", test__xor__),
        ("test_description", test_description),
    ]
}

extension PyComplexNewTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyComplexNewTests = [
        ("test_fromString_empty_fails", test_fromString_empty_fails),
        ("test_fromString_imag", test_fromString_imag),
        ("test_fromString_real", test_fromString_real),
        ("test_fromString_real_imag", test_fromString_real_imag),
    ]
}

extension PyComplexTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyComplexTests = [
        ("test_description", test_description),
    ]
}

extension PyDictTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyDictTests = [
        ("test_description", test_description),
        ("test_description_recursive", test_description_recursive),
    ]
}

extension PyFloatBinaryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyFloatBinaryTests = [
        ("test__add__", test__add__),
        ("test__divmod__", test__divmod__),
        ("test__floordiv__", test__floordiv__),
        ("test__mod__", test__mod__),
        ("test__mul__", test__mul__),
        ("test__sub__", test__sub__),
        ("test__truediv__", test__truediv__),
    ]
}

extension PyFloatEqualCompareTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyFloatEqualCompareTests = [
        ("test__eq__", test__eq__),
        ("test__ge__", test__ge__),
        ("test__gt__", test__gt__),
        ("test__le__", test__le__),
        ("test__lt__", test__lt__),
        ("test__ne__", test__ne__),
    ]
}

extension PyFloatTernaryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyFloatTernaryTests = [
        ("test__pow__", test__pow__),
    ]
}

extension PyFloatTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyFloatTests = [
        ("test__round__", test__round__),
        ("test_as_integer_ratio", test_as_integer_ratio),
        ("test_description", test_description),
    ]
}

extension PyFloatUnaryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyFloatUnaryTests = [
        ("test__abs__", test__abs__),
        ("test__bool__", test__bool__),
        ("test__int__", test__int__),
        ("test__neg__", test__neg__),
        ("test__pos__", test__pos__),
        ("test__trunc__", test__trunc__),
        ("test_conjugate", test_conjugate),
        ("test_imag", test_imag),
        ("test_real", test_real),
    ]
}

extension PyFrameBlockStackTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyFrameBlockStackTests = [
        ("test_empty", test_empty),
        ("test_pop", test_pop),
        ("test_push", test_push),
    ]
}

extension PyFrameObjectStackTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyFrameObjectStackTests = [
        ("test_empty", test_empty),
        ("test_pop", test_pop),
        ("test_popInPushOrder", test_popInPushOrder),
        ("test_popUntilCount", test_popUntilCount),
        ("test_push", test_push),
        ("test_push_collection", test_push_collection),
        ("test_set", test_set),
    ]
}

extension PyIntBinaryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyIntBinaryTests = [
        ("test__add__", test__add__),
        ("test__and__", test__and__),
        ("test__divmod__", test__divmod__),
        ("test__floordiv__", test__floordiv__),
        ("test__lshift__", test__lshift__),
        ("test__mod__", test__mod__),
        ("test__mul__", test__mul__),
        ("test__or__", test__or__),
        ("test__rshift__", test__rshift__),
        ("test__sub__", test__sub__),
        ("test__truediv__", test__truediv__),
        ("test__xor__", test__xor__),
    ]
}

extension PyIntEqualCompareTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyIntEqualCompareTests = [
        ("test__eq__", test__eq__),
        ("test__ge__", test__ge__),
        ("test__gt__", test__gt__),
        ("test__le__", test__le__),
        ("test__lt__", test__lt__),
        ("test__ne__", test__ne__),
    ]
}

extension PyIntTernaryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyIntTernaryTests = [
        ("test__pow__", test__pow__),
        ("test__pow__mod", test__pow__mod),
    ]
}

extension PyIntTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyIntTests = [
        ("test_description", test_description),
    ]
}

extension PyIntUnaryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyIntUnaryTests = [
        ("test__abs__", test__abs__),
        ("test__bool__", test__bool__),
        ("test__neg__", test__neg__),
        ("test__pos__", test__pos__),
        ("test_conjugate", test_conjugate),
        ("test_imag", test_imag),
        ("test_real", test_real),
    ]
}

extension PyListTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyListTests = [
        ("test_description", test_description),
        ("test_description_recursive", test_description_recursive),
    ]
}

extension PyObjectFlagsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyObjectFlagsTests = [
        ("test_customUInt16_isIn_customFlags_from0_to15", test_customUInt16_isIn_customFlags_from0_to15),
        ("test_customUInt16_set", test_customUInt16_set),
        ("test_flags_doNot_overlap", test_flags_doNot_overlap),
        ("test_set_unset_changesFlagValue", test_set_unset_changesFlagValue),
        ("test_setCustomFlags_forCustomFlags_setsFlag", test_setCustomFlags_forCustomFlags_setsFlag),
        ("test_setCustomFlags_forEveryObjectFlags_doesNothing", test_setCustomFlags_forEveryObjectFlags_doesNothing),
        ("test_setTrue_setFalse_changesFlagValue", test_setTrue_setFalse_changesFlagValue),
    ]
}

extension PyStringTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyStringTests = [
        ("test_description", test_description),
    ]
}

extension PyTupleTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyTupleTests = [
        ("test_description", test_description),
        ("test_description_recursive", test_description_recursive),
    ]
}

extension PyTypeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PyTypeTests = [
        ("test_builtinTypes", test_builtinTypes),
        ("test_description", test_description),
    ]
}

extension SysFlagsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SysFlagsTests = [
        ("test_bytesWarning", test_bytesWarning),
        ("test_ignoreEnvironment", test_ignoreEnvironment),
        ("test_inspectInteractively", test_inspectInteractively),
        ("test_isolated", test_isolated),
        ("test_optimizations_arg_setToNone_alwaysUsesEnv", test_optimizations_arg_setToNone_alwaysUsesEnv),
        ("test_optimizations_arg_setToO_withEnv_setToNone_orO_isAlwaysOO", test_optimizations_arg_setToO_withEnv_setToNone_orO_isAlwaysOO),
        ("test_optimizations_arg_setToO_withEnv_setToOO_isOO", test_optimizations_arg_setToO_withEnv_setToOO_isOO),
        ("test_optimizations_arg_setToOO_isAlwaysOO", test_optimizations_arg_setToOO_isAlwaysOO),
        ("test_optimizations_ignoreEnv", test_optimizations_ignoreEnv),
        ("test_warnings", test_warnings),
        ("test_warnings_ignoreEnv", test_warnings_ignoreEnv),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ArgumentParserTests.__allTests__ArgumentParserTests),
        testCase(ArgumentsTests.__allTests__ArgumentsTests),
        testCase(DocHelperTests.__allTests__DocHelperTests),
        testCase(EnvironmentTests.__allTests__EnvironmentTests),
        testCase(GenericLayoutTests.__allTests__GenericLayoutTests),
        testCase(HashFloat.__allTests__HashFloat),
        testCase(HashInt.__allTests__HashInt),
        testCase(HashString.__allTests__HashString),
        testCase(InvalidSelfArgumentMessageTests.__allTests__InvalidSelfArgumentMessageTests),
        testCase(OrderedDictionaryTests.__allTests__OrderedDictionaryTests),
        testCase(PyBoolTests.__allTests__PyBoolTests),
        testCase(PyComplexNewTests.__allTests__PyComplexNewTests),
        testCase(PyComplexTests.__allTests__PyComplexTests),
        testCase(PyDictTests.__allTests__PyDictTests),
        testCase(PyFloatBinaryTests.__allTests__PyFloatBinaryTests),
        testCase(PyFloatEqualCompareTests.__allTests__PyFloatEqualCompareTests),
        testCase(PyFloatTernaryTests.__allTests__PyFloatTernaryTests),
        testCase(PyFloatTests.__allTests__PyFloatTests),
        testCase(PyFloatUnaryTests.__allTests__PyFloatUnaryTests),
        testCase(PyFrameBlockStackTests.__allTests__PyFrameBlockStackTests),
        testCase(PyFrameObjectStackTests.__allTests__PyFrameObjectStackTests),
        testCase(PyIntBinaryTests.__allTests__PyIntBinaryTests),
        testCase(PyIntEqualCompareTests.__allTests__PyIntEqualCompareTests),
        testCase(PyIntTernaryTests.__allTests__PyIntTernaryTests),
        testCase(PyIntTests.__allTests__PyIntTests),
        testCase(PyIntUnaryTests.__allTests__PyIntUnaryTests),
        testCase(PyListTests.__allTests__PyListTests),
        testCase(PyObjectFlagsTests.__allTests__PyObjectFlagsTests),
        testCase(PyStringTests.__allTests__PyStringTests),
        testCase(PyTupleTests.__allTests__PyTupleTests),
        testCase(PyTypeTests.__allTests__PyTypeTests),
        testCase(SysFlagsTests.__allTests__SysFlagsTests),
    ]
}
#endif
