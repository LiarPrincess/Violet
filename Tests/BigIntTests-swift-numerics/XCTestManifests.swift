#if !canImport(ObjectiveC)
import XCTest

extension AppleBigIntDivTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AppleBigIntDivTests = [
        ("test_run", test_run),
    ]
}

extension AppleBigIntTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AppleBigIntTests = [
        ("test_binaryInteger_interop", test_binaryInteger_interop),
        ("test_bitshift", test_bitshift),
        ("test_bitwise", test_bitwise),
        ("test_conformances", test_conformances),
        ("test_huge", test_huge),
        ("test_identity_fixedPoint", test_identity_fixedPoint),
        ("test_initialization", test_initialization),
        ("test_magnitude", test_magnitude),
        ("test_strings", test_strings),
        ("test_zeroArithmetic", test_zeroArithmetic),
    ]
}

extension ApplyA_ApplyB_Equals_ApplyAB {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ApplyA_ApplyB_Equals_ApplyAB = [
        ("test_add_big", test_add_big),
        ("test_add_int", test_add_int),
        ("test_div_big", test_div_big),
        ("test_div_int", test_div_int),
        ("test_mul_big", test_mul_big),
        ("test_mul_int", test_mul_int),
        ("test_shiftLeft_big", test_shiftLeft_big),
        ("test_shiftLeft_int", test_shiftLeft_int),
        ("test_shiftRight_big", test_shiftRight_big),
        ("test_shiftRight_int", test_shiftRight_int),
        ("test_sub_big", test_sub_big),
        ("test_sub_int", test_sub_int),
    ]
}

extension ApplyA_UndoA {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ApplyA_UndoA = [
        ("test_addSub_bigBig", test_addSub_bigBig),
        ("test_addSub_bigInt", test_addSub_bigInt),
        ("test_addSub_intBig", test_addSub_intBig),
        ("test_addSub_intInt", test_addSub_intInt),
        ("test_mulDiv_bigBig", test_mulDiv_bigBig),
        ("test_mulDiv_bigInt", test_mulDiv_bigInt),
        ("test_mulDiv_intBig", test_mulDiv_intBig),
        ("test_mulDiv_intInt", test_mulDiv_intInt),
        ("test_shiftLeftRight_big", test_shiftLeftRight_big),
        ("test_shiftLeftRight_int", test_shiftLeftRight_int),
        ("test_toStringInit_big", test_toStringInit_big),
        ("test_toStringInit_ints", test_toStringInit_ints),
    ]
}

extension BigIntPrototypeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntPrototypeTests = [
        ("test_create", test_create),
        ("test_magnitudeWordModified_negative", test_magnitudeWordModified_negative),
        ("test_magnitudeWordModified_positive", test_magnitudeWordModified_positive),
    ]
}

extension BinaryAddTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BinaryAddTests = [
        ("test_big_bothMultipleWords", test_big_bothMultipleWords),
        ("test_big_sign_bothNegative", test_big_sign_bothNegative),
        ("test_big_sign_bothPositive", test_big_sign_bothPositive),
        ("test_big_sign_negativePositive", test_big_sign_negativePositive),
        ("test_big_sign_positiveNegative", test_big_sign_positiveNegative),
        ("test_big_singleWord_vs_multipleWords", test_big_singleWord_vs_multipleWords),
        ("test_big_zero", test_big_zero),
        ("test_int_multipleWords", test_int_multipleWords),
        ("test_int_singleWord", test_int_singleWord),
        ("test_int_zero", test_int_zero),
    ]
}

extension BinaryAndTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BinaryAndTests = [
        ("test_big_bothMultipleWords", test_big_bothMultipleWords),
        ("test_big_singleWord", test_big_singleWord),
        ("test_big_singleWord_vs_multipleWords", test_big_singleWord_vs_multipleWords),
        ("test_big_zero", test_big_zero),
        ("test_int_multipleWords", test_int_multipleWords),
        ("test_int_singleWord", test_int_singleWord),
        ("test_int_truthTable", test_int_truthTable),
        ("test_int_zero", test_int_zero),
    ]
}

extension BinaryDivRemTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BinaryDivRemTests = [
        ("test_big_bothMultipleWords", test_big_bothMultipleWords),
        ("test_big_equalMagnitude", test_big_equalMagnitude),
        ("test_big_lhs_hasGreaterMagnitude", test_big_lhs_hasGreaterMagnitude),
        ("test_big_lhsLonger", test_big_lhsLonger),
        ("test_big_minus1", test_big_minus1),
        ("test_big_plus1", test_big_plus1),
        ("test_big_powerOf2", test_big_powerOf2),
        ("test_big_rhs_hasGreaterMagnitude", test_big_rhs_hasGreaterMagnitude),
        ("test_big_rhsLonger", test_big_rhsLonger),
        ("test_big_zero", test_big_zero),
        ("test_int", test_int),
        ("test_int_equalMagnitude", test_int_equalMagnitude),
        ("test_int_lhs_hasGreaterMagnitude", test_int_lhs_hasGreaterMagnitude),
        ("test_int_minus1", test_int_minus1),
        ("test_int_multipleWords", test_int_multipleWords),
        ("test_int_plus1", test_int_plus1),
        ("test_int_powerOf2", test_int_powerOf2),
        ("test_int_rhs_hasGreaterMagnitude", test_int_rhs_hasGreaterMagnitude),
        ("test_int_zero", test_int_zero),
    ]
}

extension BinaryMulTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BinaryMulTests = [
        ("test_big_bothMultipleWords", test_big_bothMultipleWords),
        ("test_big_carryOverflow", test_big_carryOverflow),
        ("test_big_minus1", test_big_minus1),
        ("test_big_plus1", test_big_plus1),
        ("test_big_powerOf2", test_big_powerOf2),
        ("test_big_singleWord_vs_multipleWords", test_big_singleWord_vs_multipleWords),
        ("test_big_zero", test_big_zero),
        ("test_int_minus1", test_int_minus1),
        ("test_int_multipleWords", test_int_multipleWords),
        ("test_int_plus1", test_int_plus1),
        ("test_int_powerOf2", test_int_powerOf2),
        ("test_int_singleWord", test_int_singleWord),
        ("test_int_zero", test_int_zero),
    ]
}

extension BinaryOrTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BinaryOrTests = [
        ("test_big_bothMultipleWords", test_big_bothMultipleWords),
        ("test_big_singleWord", test_big_singleWord),
        ("test_big_singleWord_vs_multipleWords", test_big_singleWord_vs_multipleWords),
        ("test_big_zero", test_big_zero),
        ("test_int_multipleWords", test_int_multipleWords),
        ("test_int_singleWord", test_int_singleWord),
        ("test_int_truthTable", test_int_truthTable),
        ("test_int_zero", test_int_zero),
    ]
}

extension BinaryShiftLeftTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BinaryShiftLeftTests = [
        ("test_big_byBits_noOverflow", test_big_byBits_noOverflow),
        ("test_big_byWholeWord", test_big_byWholeWord),
        ("test_big_byZero", test_big_byZero),
        ("test_big_exampleFromCode", test_big_exampleFromCode),
        ("test_big_right", test_big_right),
        ("test_int_byNegative", test_int_byNegative),
        ("test_int_byPositive", test_int_byPositive),
    ]
}

extension BinaryShiftRightTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BinaryShiftRightTests = [
        ("test_big_byBits_noOverflow", test_big_byBits_noOverflow),
        ("test_big_byMoreThanBitWidth", test_big_byMoreThanBitWidth),
        ("test_big_byZero", test_big_byZero),
        ("test_big_exampleFromCode", test_big_exampleFromCode),
        ("test_big_left", test_big_left),
        ("test_big_negative_byWholeWord_withAdjustment", test_big_negative_byWholeWord_withAdjustment),
        ("test_big_negative_byWholeWord_withoutAdjustment", test_big_negative_byWholeWord_withoutAdjustment),
        ("test_big_positive_byWholeWord", test_big_positive_byWholeWord),
        ("test_int_byMoreThanBitWidth", test_int_byMoreThanBitWidth),
        ("test_int_byNegative", test_int_byNegative),
        ("test_int_byPositive", test_int_byPositive),
    ]
}

extension BinarySubTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BinarySubTests = [
        ("test_big_bothMultipleWords", test_big_bothMultipleWords),
        ("test_big_sign_bothNegative", test_big_sign_bothNegative),
        ("test_big_sign_bothPositive", test_big_sign_bothPositive),
        ("test_big_sign_negativePositive", test_big_sign_negativePositive),
        ("test_big_sign_positiveNegative", test_big_sign_positiveNegative),
        ("test_big_singleWord_vs_multipleWords", test_big_singleWord_vs_multipleWords),
        ("test_big_zero", test_big_zero),
        ("test_int_multipleWords", test_int_multipleWords),
        ("test_int_singleWord", test_int_singleWord),
        ("test_int_zero", test_int_zero),
    ]
}

extension BinaryXorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BinaryXorTests = [
        ("test_big_bothMultipleWords", test_big_bothMultipleWords),
        ("test_big_singleWord", test_big_singleWord),
        ("test_big_singleWord_vs_multipleWords", test_big_singleWord_vs_multipleWords),
        ("test_big_zero", test_big_zero),
        ("test_int_multipleWords", test_int_multipleWords),
        ("test_int_singleWord", test_int_singleWord),
        ("test_int_truthTable", test_int_truthTable),
        ("test_int_zero", test_int_zero),
        ("test_theTrueH4x0rWay_for1337_toZeroValue_andOwnN00bz", test_theTrueH4x0rWay_for1337_toZeroValue_andOwnN00bz),
    ]
}

extension BitWidthTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BitWidthTests = [
        ("test_ints", test_ints),
        ("test_powerOf2_negative", test_powerOf2_negative),
        ("test_powerOf2_negative_multipleWords", test_powerOf2_negative_multipleWords),
        ("test_powerOf2_positive", test_powerOf2_positive),
        ("test_powerOf2_positive_multipleWords", test_powerOf2_positive_multipleWords),
        ("test_trivial", test_trivial),
    ]
}

extension COWTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__COWTests = [
        ("test_add_toCopy_doesNotModifyOriginal", test_add_toCopy_doesNotModifyOriginal),
        ("test_add_toInout_doesNotModifyOriginal", test_add_toInout_doesNotModifyOriginal),
        ("test_addEqual_toCopy_doesNotModifyOriginal", test_addEqual_toCopy_doesNotModifyOriginal),
        ("test_addEqual_toInout_doesModifyOriginal", test_addEqual_toInout_doesModifyOriginal),
        ("test_div_toCopy_doesNotModifyOriginal", test_div_toCopy_doesNotModifyOriginal),
        ("test_div_toInout_doesNotModifyOriginal", test_div_toInout_doesNotModifyOriginal),
        ("test_divEqual_toCopy_doesNotModifyOriginal", test_divEqual_toCopy_doesNotModifyOriginal),
        ("test_divEqual_toInout_doesModifyOriginal", test_divEqual_toInout_doesModifyOriginal),
        ("test_invert_doesNotModifyOriginal", test_invert_doesNotModifyOriginal),
        ("test_minus_doesNotModifyOriginal", test_minus_doesNotModifyOriginal),
        ("test_mod_toCopy_doesNotModifyOriginal", test_mod_toCopy_doesNotModifyOriginal),
        ("test_mod_toInout_doesNotModifyOriginal", test_mod_toInout_doesNotModifyOriginal),
        ("test_modEqual_toCopy_doesNotModifyOriginal", test_modEqual_toCopy_doesNotModifyOriginal),
        ("test_modEqual_toInout_doesModifyOriginal", test_modEqual_toInout_doesModifyOriginal),
        ("test_mul_toCopy_doesNotModifyOriginal", test_mul_toCopy_doesNotModifyOriginal),
        ("test_mul_toInout_doesNotModifyOriginal", test_mul_toInout_doesNotModifyOriginal),
        ("test_mulEqual_toCopy_doesNotModifyOriginal", test_mulEqual_toCopy_doesNotModifyOriginal),
        ("test_mulEqual_toInout_doesModifyOriginal", test_mulEqual_toInout_doesModifyOriginal),
        ("test_plus_doesNotModifyOriginal", test_plus_doesNotModifyOriginal),
        ("test_shiftLeft_copy_doesNotModifyOriginal", test_shiftLeft_copy_doesNotModifyOriginal),
        ("test_shiftLeft_inout_doesNotModifyOriginal", test_shiftLeft_inout_doesNotModifyOriginal),
        ("test_shiftLeftEqual_copy_doesNotModifyOriginal", test_shiftLeftEqual_copy_doesNotModifyOriginal),
        ("test_shiftLeftEqual_inout_doesModifyOriginal", test_shiftLeftEqual_inout_doesModifyOriginal),
        ("test_shiftRight_copy_doesNotModifyOriginal", test_shiftRight_copy_doesNotModifyOriginal),
        ("test_shiftRight_inout_doesNotModifyOriginal", test_shiftRight_inout_doesNotModifyOriginal),
        ("test_shiftRightEqual_copy_doesNotModifyOriginal", test_shiftRightEqual_copy_doesNotModifyOriginal),
        ("test_shiftRightEqual_inout_doesModifyOriginal", test_shiftRightEqual_inout_doesModifyOriginal),
        ("test_sub_toCopy_doesNotModifyOriginal", test_sub_toCopy_doesNotModifyOriginal),
        ("test_sub_toInout_doesNotModifyOriginal", test_sub_toInout_doesNotModifyOriginal),
        ("test_subEqual_toCopy_doesNotModifyOriginal", test_subEqual_toCopy_doesNotModifyOriginal),
        ("test_subEqual_toInout_doesModifyOriginal", test_subEqual_toInout_doesModifyOriginal),
    ]
}

extension ComparableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ComparableTests = [
        ("test_big_differentSign_negative_isLess", test_big_differentSign_negative_isLess),
        ("test_big_equal", test_big_equal),
        ("test_big_minus1_isLess", test_big_minus1_isLess),
        ("test_big_plus1_isGreater", test_big_plus1_isGreater),
        ("test_big_sameSign_biggerWords", test_big_sameSign_biggerWords),
        ("test_big_sameSign_lessWords", test_big_sameSign_lessWords),
        ("test_big_sameSign_moreWords", test_big_sameSign_moreWords),
        ("test_big_sameSign_smallerWords", test_big_sameSign_smallerWords),
        ("test_int_differentSign_negative_isLess", test_int_differentSign_negative_isLess),
        ("test_int_equal", test_int_equal),
        ("test_int_minus1_isLess", test_int_minus1_isLess),
        ("test_int_plus1_isGreater", test_int_plus1_isGreater),
        ("test_int_sameSign_moreThan1Word", test_int_sameSign_moreThan1Word),
    ]
}

extension EquatableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EquatableTests = [
        ("test_big_equal", test_big_equal),
        ("test_big_lessWords_isNeverEqual", test_big_lessWords_isNeverEqual),
        ("test_big_moreWords_isNeverEqual", test_big_moreWords_isNeverEqual),
        ("test_big_withBiggerWords_isNeverEqual", test_big_withBiggerWords_isNeverEqual),
        ("test_big_withDifferentSign_isNeverEqual", test_big_withDifferentSign_isNeverEqual),
        ("test_big_withSmallerWords_isNeverEqual", test_big_withSmallerWords_isNeverEqual),
        ("test_int_equal", test_int_equal),
        ("test_int_moreThan1Word_isNotEqual", test_int_moreThan1Word_isNotEqual),
        ("test_int_notEqual", test_int_notEqual),
        ("test_zero", test_zero),
    ]
}

extension HashableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__HashableTests = [
        ("test_dict_insertAndFind", test_dict_insertAndFind),
        ("test_dict_insertAndRemove", test_dict_insertAndRemove),
        ("test_dict_insertReplaceAndFind", test_dict_insertReplaceAndFind),
        ("test_set_insertAndFind", test_set_insertAndFind),
        ("test_set_insertAndRemove", test_set_insertAndRemove),
    ]
}

extension InitFromIntTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__InitFromIntTests = [
        ("test_clamping_big", test_clamping_big),
        ("test_clamping_signed", test_clamping_signed),
        ("test_clamping_signed_lessThanMin", test_clamping_signed_lessThanMin),
        ("test_clamping_signed_moreThanMax", test_clamping_signed_moreThanMax),
        ("test_clamping_unsigned", test_clamping_unsigned),
        ("test_clamping_unsigned_lessThanMin", test_clamping_unsigned_lessThanMin),
        ("test_clamping_unsigned_moreThanMax", test_clamping_unsigned_moreThanMax),
        ("test_exactly_big", test_exactly_big),
        ("test_exactly_signed", test_exactly_signed),
        ("test_exactly_signed_lessThanMin", test_exactly_signed_lessThanMin),
        ("test_exactly_signed_moreThanMax", test_exactly_signed_moreThanMax),
        ("test_exactly_unsigned", test_exactly_unsigned),
        ("test_exactly_unsigned_lessThanMin", test_exactly_unsigned_lessThanMin),
        ("test_exactly_unsigned_moreThanMax", test_exactly_unsigned_moreThanMax),
        ("test_raw_big", test_raw_big),
        ("test_raw_signed", test_raw_signed),
        ("test_raw_unsigned", test_raw_unsigned),
        ("test_truncatingIfNeeded_big", test_truncatingIfNeeded_big),
        ("test_truncatingIfNeeded_signed", test_truncatingIfNeeded_signed),
        ("test_truncatingIfNeeded_signed_lessThanMin", test_truncatingIfNeeded_signed_lessThanMin),
        ("test_truncatingIfNeeded_signed_moreThanMax", test_truncatingIfNeeded_signed_moreThanMax),
        ("test_truncatingIfNeeded_unsigned", test_truncatingIfNeeded_unsigned),
        ("test_truncatingIfNeeded_unsigned_lessThanMin", test_truncatingIfNeeded_unsigned_lessThanMin),
        ("test_truncatingIfNeeded_unsigned_moreThanMax", test_truncatingIfNeeded_unsigned_moreThanMax),
    ]
}

extension InitFromStringTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__InitFromStringTests = [
        ("test_binary_singleWord", test_binary_singleWord),
        ("test_binary_twoWords", test_binary_twoWords),
        ("test_decimal_fourWords", test_decimal_fourWords),
        ("test_decimal_singleWord", test_decimal_singleWord),
        ("test_decimal_threeWords", test_decimal_threeWords),
        ("test_decimal_twoWords", test_decimal_twoWords),
        ("test_empty_fails", test_empty_fails),
        ("test_hex_singleWord", test_hex_singleWord),
        ("test_hex_threeWords", test_hex_threeWords),
        ("test_hex_twoWords", test_hex_twoWords),
        ("test_int_toString_toBigInt_binary", test_int_toString_toBigInt_binary),
        ("test_int_toString_toBigInt_decimal", test_int_toString_toBigInt_decimal),
        ("test_int_toString_toBigInt_hex", test_int_toString_toBigInt_hex),
        ("test_invalidDigit_biggerThanRadix_fails", test_invalidDigit_biggerThanRadix_fails),
        ("test_octal_singleWord", test_octal_singleWord),
        ("test_octal_threeWords", test_octal_threeWords),
        ("test_octal_twoWords", test_octal_twoWords),
        ("test_onlySign_withoutDigits_minus_fails", test_onlySign_withoutDigits_minus_fails),
        ("test_onlySign_withoutDigits_plus_fails", test_onlySign_withoutDigits_plus_fails),
        ("test_quinary_singleWord", test_quinary_singleWord),
        ("test_quinary_twoWords", test_quinary_twoWords),
        ("test_underscore_after_minusSign_fails", test_underscore_after_minusSign_fails),
        ("test_underscore_after_plusSign_fails", test_underscore_after_plusSign_fails),
        ("test_underscore_before_minusSign_fails", test_underscore_before_minusSign_fails),
        ("test_underscore_before_plusSign_fails", test_underscore_before_plusSign_fails),
        ("test_underscore_double_fails", test_underscore_double_fails),
        ("test_underscore_prefix_withoutSign_fails", test_underscore_prefix_withoutSign_fails),
        ("test_underscore_suffix_fails", test_underscore_suffix_fails),
        ("test_unicode_broken_UTF8_fails", test_unicode_broken_UTF8_fails),
        ("test_unicode_emoji_fails", test_unicode_emoji_fails),
        ("test_unicode_invalidNumerals_fails", test_unicode_invalidNumerals_fails),
        ("test_zero_multiple", test_zero_multiple),
        ("test_zero_single", test_zero_single),
        ("test_zero_single_minus", test_zero_single_minus),
        ("test_zero_single_plus", test_zero_single_plus),
    ]
}

extension MagnitudeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MagnitudeTests = [
        ("test_big", test_big),
        ("test_int", test_int),
    ]
}

extension NodeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NodeTests = [
        ("test_add_big_big", test_add_big_big),
        ("test_add_big_int", test_add_big_int),
        ("test_add_int_big", test_add_int_big),
        ("test_add_int_int", test_add_int_int),
        ("test_and_big_big", test_and_big_big),
        ("test_and_big_int", test_and_big_int),
        ("test_and_int_big", test_and_int_big),
        ("test_and_int_int", test_and_int_int),
        ("test_div_big_big", test_div_big_big),
        ("test_div_big_int", test_div_big_int),
        ("test_div_int_big", test_div_int_big),
        ("test_div_int_int", test_div_int_int),
        ("test_divMod_big_big", test_divMod_big_big),
        ("test_divMod_big_int", test_divMod_big_int),
        ("test_divMod_int_big", test_divMod_int_big),
        ("test_divMod_int_int", test_divMod_int_int),
        ("test_invert_big", test_invert_big),
        ("test_invert_int", test_invert_int),
        ("test_minus_big", test_minus_big),
        ("test_minus_int", test_minus_int),
        ("test_mod_big_big", test_mod_big_big),
        ("test_mod_big_int", test_mod_big_int),
        ("test_mod_int_big", test_mod_int_big),
        ("test_mod_int_int", test_mod_int_int),
        ("test_mul_big_big", test_mul_big_big),
        ("test_mul_big_int", test_mul_big_int),
        ("test_mul_int_big", test_mul_int_big),
        ("test_mul_int_int", test_mul_int_int),
        ("test_or_big_big", test_or_big_big),
        ("test_or_big_int", test_or_big_int),
        ("test_or_int_big", test_or_int_big),
        ("test_or_int_int", test_or_int_int),
        ("test_plus_big", test_plus_big),
        ("test_plus_int", test_plus_int),
        ("test_power_big", test_power_big),
        ("test_power_int", test_power_int),
        ("test_shiftLeft_big_lessThanWord", test_shiftLeft_big_lessThanWord),
        ("test_shiftLeft_big_moreThanWord", test_shiftLeft_big_moreThanWord),
        ("test_shiftLeft_big_word", test_shiftLeft_big_word),
        ("test_shiftLeft_int_lessThanWord", test_shiftLeft_int_lessThanWord),
        ("test_shiftLeft_int_moreThanWord", test_shiftLeft_int_moreThanWord),
        ("test_shiftLeft_int_word", test_shiftLeft_int_word),
        ("test_shiftRight_big_lessThanWord", test_shiftRight_big_lessThanWord),
        ("test_shiftRight_big_moreThanWord", test_shiftRight_big_moreThanWord),
        ("test_shiftRight_big_word", test_shiftRight_big_word),
        ("test_shiftRight_int_lessThanWord", test_shiftRight_int_lessThanWord),
        ("test_shiftRight_int_moreThanWord", test_shiftRight_int_moreThanWord),
        ("test_shiftRight_int_word", test_shiftRight_int_word),
        ("test_sub_big_big", test_sub_big_big),
        ("test_sub_big_int", test_sub_big_int),
        ("test_sub_int_big", test_sub_int_big),
        ("test_sub_int_int", test_sub_int_int),
        ("test_xor_big_big", test_xor_big_big),
        ("test_xor_big_int", test_xor_big_int),
        ("test_xor_int_big", test_xor_int_big),
        ("test_xor_int_int", test_xor_int_int),
    ]
}

extension PowerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PowerTests = [
        ("test_againstFoundationPow", test_againstFoundationPow),
        ("test_base_minusOne", test_base_minusOne),
        ("test_base_one", test_base_one),
        ("test_base_zero", test_base_zero),
        ("test_exponent_one", test_exponent_one),
        ("test_exponent_three", test_exponent_three),
        ("test_exponent_two", test_exponent_two),
        ("test_exponent_zero", test_exponent_zero),
    ]
}

extension StringTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StringTests = [
        ("test_binary_singleWord", test_binary_singleWord),
        ("test_binary_twoWords", test_binary_twoWords),
        ("test_decimal_fourWords", test_decimal_fourWords),
        ("test_decimal_singleWord", test_decimal_singleWord),
        ("test_decimal_threeWords", test_decimal_threeWords),
        ("test_decimal_twoWords", test_decimal_twoWords),
        ("test_description_fourWords", test_description_fourWords),
        ("test_description_int", test_description_int),
        ("test_description_singleWord", test_description_singleWord),
        ("test_description_threeWords", test_description_threeWords),
        ("test_description_trivial", test_description_trivial),
        ("test_description_twoWords", test_description_twoWords),
        ("test_hex_singleWord", test_hex_singleWord),
        ("test_hex_threeWords", test_hex_threeWords),
        ("test_hex_twoWords", test_hex_twoWords),
        ("test_octal_singleWord", test_octal_singleWord),
        ("test_octal_threeWords", test_octal_threeWords),
        ("test_octal_twoWords", test_octal_twoWords),
        ("test_quinary_singleWord", test_quinary_singleWord),
        ("test_quinary_twoWords", test_quinary_twoWords),
    ]
}

extension TrailingZeroBitCountTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TrailingZeroBitCountTests = [
        ("test_int", test_int),
        ("test_manuallyCountedZeros", test_manuallyCountedZeros),
        ("test_manuallyCountedZeros_additionalZeroWord", test_manuallyCountedZeros_additionalZeroWord),
        ("test_shift", test_shift),
        ("test_shift_andAdd", test_shift_andAdd),
        ("test_zero", test_zero),
    ]
}

extension UnaryInvertTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UnaryInvertTests = [
        ("test_big", test_big),
        ("test_int", test_int),
    ]
}

extension UnaryMinusTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UnaryMinusTests = [
        ("test_big", test_big),
        ("test_big_apply2Times", test_big_apply2Times),
        ("test_int", test_int),
        ("test_zero", test_zero),
    ]
}

extension UnaryPlusTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UnaryPlusTests = [
        ("test_big", test_big),
        ("test_int", test_int),
    ]
}

extension WordsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__WordsTests = [
        ("test_int", test_int),
        ("test_multipleWords_negative_notPowerOf2", test_multipleWords_negative_notPowerOf2),
        ("test_multipleWords_negative_powerOf2", test_multipleWords_negative_powerOf2),
        ("test_multipleWords_positive", test_multipleWords_positive),
        ("test_zero", test_zero),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AppleBigIntDivTests.__allTests__AppleBigIntDivTests),
        testCase(AppleBigIntTests.__allTests__AppleBigIntTests),
        testCase(ApplyA_ApplyB_Equals_ApplyAB.__allTests__ApplyA_ApplyB_Equals_ApplyAB),
        testCase(ApplyA_UndoA.__allTests__ApplyA_UndoA),
        testCase(BigIntPrototypeTests.__allTests__BigIntPrototypeTests),
        testCase(BinaryAddTests.__allTests__BinaryAddTests),
        testCase(BinaryAndTests.__allTests__BinaryAndTests),
        testCase(BinaryDivRemTests.__allTests__BinaryDivRemTests),
        testCase(BinaryMulTests.__allTests__BinaryMulTests),
        testCase(BinaryOrTests.__allTests__BinaryOrTests),
        testCase(BinaryShiftLeftTests.__allTests__BinaryShiftLeftTests),
        testCase(BinaryShiftRightTests.__allTests__BinaryShiftRightTests),
        testCase(BinarySubTests.__allTests__BinarySubTests),
        testCase(BinaryXorTests.__allTests__BinaryXorTests),
        testCase(BitWidthTests.__allTests__BitWidthTests),
        testCase(COWTests.__allTests__COWTests),
        testCase(ComparableTests.__allTests__ComparableTests),
        testCase(EquatableTests.__allTests__EquatableTests),
        testCase(HashableTests.__allTests__HashableTests),
        testCase(InitFromIntTests.__allTests__InitFromIntTests),
        testCase(InitFromStringTests.__allTests__InitFromStringTests),
        testCase(MagnitudeTests.__allTests__MagnitudeTests),
        testCase(NodeTests.__allTests__NodeTests),
        testCase(PowerTests.__allTests__PowerTests),
        testCase(StringTests.__allTests__StringTests),
        testCase(TrailingZeroBitCountTests.__allTests__TrailingZeroBitCountTests),
        testCase(UnaryInvertTests.__allTests__UnaryInvertTests),
        testCase(UnaryMinusTests.__allTests__UnaryMinusTests),
        testCase(UnaryPlusTests.__allTests__UnaryPlusTests),
        testCase(WordsTests.__allTests__WordsTests),
    ]
}
#endif
