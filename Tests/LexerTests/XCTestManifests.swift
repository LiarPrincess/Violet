#if !canImport(ObjectiveC)
import XCTest

extension CommentTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CommentTests = [
        ("test_comment", test_comment),
        ("test_comment_afterCode", test_comment_afterCode),
        ("test_comment_inLastLine", test_comment_inLastLine),
        ("test_emacs_invalidEncoding_inFirstLine_throws", test_emacs_invalidEncoding_inFirstLine_throws),
        ("test_emacs_invalidEncoding_inFirstLine_withIndent_throws", test_emacs_invalidEncoding_inFirstLine_withIndent_throws),
        ("test_emacs_invalidEncoding_inFirstLine_withSomethingBefore_isIgnored", test_emacs_invalidEncoding_inFirstLine_withSomethingBefore_isIgnored),
        ("test_emacs_invalidEncoding_inSecondLine_throws", test_emacs_invalidEncoding_inSecondLine_throws),
        ("test_emacs_validEncoding_inFirstLine_isAccepted", test_emacs_validEncoding_inFirstLine_isAccepted),
    ]
}

extension FloatingPointTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FloatingPointTests = [
        ("test_number", test_number),
        ("test_number_withExponent", test_number_withExponent),
        ("test_number_withExponent2", test_number_withExponent2),
        ("test_number_withFraction_andExponent", test_number_withFraction_andExponent),
        ("test_number_withoutFractions", test_number_withoutFractions),
        ("test_number_withoutWhole", test_number_withoutWhole),
        ("test_number_withUnderscores", test_number_withUnderscores),
        ("test_zero", test_zero),
        ("test_zero_asExponent", test_zero_asExponent),
    ]
}

extension IdentifierTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IdentifierTests = [
        ("test_identifier_containingCJK", test_identifier_containingCJK),
        ("test_identifier_containingEmoji_throws", test_identifier_containingEmoji_throws),
        ("test_identifier_simple", test_identifier_simple),
        ("test_identifier_singleCombiningCharacter_throws", test_identifier_singleCombiningCharacter_throws),
        ("test_identifier_startingWithCJK", test_identifier_startingWithCJK),
        ("test_identifier_startingWithEmoji_throws", test_identifier_startingWithEmoji_throws),
        ("test_identifier_startingWithUnderscore", test_identifier_startingWithUnderscore),
        ("test_identifiers_fromReservedClass", test_identifiers_fromReservedClass),
        ("test_keywords", test_keywords),
        ("test_prefixedString_isString", test_prefixedString_isString),
    ]
}

extension IndentSpaceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IndentSpaceTests = [
        ("test_doubleIndent_dedent_isIncorrect", test_doubleIndent_dedent_isIncorrect),
        ("test_indent_dedent", test_indent_dedent),
        ("test_indent_equal", test_indent_equal),
        ("test_indent_indent_doubleDedent", test_indent_indent_doubleDedent),
    ]
}

extension IndentTabTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IndentTabTests = [
        ("test_doubleIndent_dedent_isIncorrect", test_doubleIndent_dedent_isIncorrect),
        ("test_indent_dedent", test_indent_dedent),
        ("test_indent_equal", test_indent_equal),
        ("test_indent_indent_doubleDedent", test_indent_indent_doubleDedent),
    ]
}

extension IndentTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IndentTests = [
        ("test_1tab_equals_8spaces", test_1tab_equals_8spaces),
        ("test_braces_doNotIndent", test_braces_doNotIndent),
        ("test_emitsMissingDedents_onEOF_1", test_emitsMissingDedents_onEOF_1),
        ("test_emitsMissingDedents_onEOF_2", test_emitsMissingDedents_onEOF_2),
        ("test_emptyLine_doesNotIndent", test_emptyLine_doesNotIndent),
        ("test_lineWithOnlyComment_doesNotIndent", test_lineWithOnlyComment_doesNotIndent),
        ("test_noIndent", test_noIndent),
    ]
}

extension IntegerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IntegerTests = [
        ("test_binary", test_binary),
        ("test_binary_withUnderscores", test_binary_withUnderscores),
        ("test_decimal", test_decimal),
        ("test_decimal_maxInt64", test_decimal_maxInt64),
        ("test_decimal_withUnderscores", test_decimal_withUnderscores),
        ("test_decimal_zero", test_decimal_zero),
        ("test_decimal_zero_withUnderscores", test_decimal_zero_withUnderscores),
        ("test_hex", test_hex),
        ("test_hex_lastUnderscore_isNotAPartOfTheNumber", test_hex_lastUnderscore_isNotAPartOfTheNumber),
        ("test_hex_withUnderscores", test_hex_withUnderscores),
        ("test_hex_zero", test_hex_zero),
        ("test_octal", test_octal),
        ("test_octal_withUnderscores", test_octal_withUnderscores),
    ]
}

extension OperatorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OperatorTests = [
        ("test_amper", test_amper),
        ("test_amperEqual", test_amperEqual),
        ("test_at", test_at),
        ("test_atEqual", test_atEqual),
        ("test_circumflex", test_circumflex),
        ("test_circumflexEqual", test_circumflexEqual),
        ("test_colon", test_colon),
        ("test_colonEqual", test_colonEqual),
        ("test_comma", test_comma),
        ("test_dot", test_dot),
        ("test_ellipsis", test_ellipsis),
        ("test_equal", test_equal),
        ("test_equalEqual", test_equalEqual),
        ("test_greater", test_greater),
        ("test_greaterEqual", test_greaterEqual),
        ("test_leftBrace", test_leftBrace),
        ("test_leftParen", test_leftParen),
        ("test_leftShift", test_leftShift),
        ("test_leftShiftEqual", test_leftShiftEqual),
        ("test_leftSqb", test_leftSqb),
        ("test_less", test_less),
        ("test_lessEqual", test_lessEqual),
        ("test_minus", test_minus),
        ("test_minusEqual", test_minusEqual),
        ("test_notEqual", test_notEqual),
        ("test_percent", test_percent),
        ("test_percentEqual", test_percentEqual),
        ("test_plus", test_plus),
        ("test_plusEqual", test_plusEqual),
        ("test_rightArrow", test_rightArrow),
        ("test_rightBrace", test_rightBrace),
        ("test_rightParen", test_rightParen),
        ("test_rightShift", test_rightShift),
        ("test_rightShiftEqual", test_rightShiftEqual),
        ("test_rightSqb", test_rightSqb),
        ("test_semicolon", test_semicolon),
        ("test_slash", test_slash),
        ("test_slashEqual", test_slashEqual),
        ("test_slashSlash", test_slashSlash),
        ("test_slashSlashEqual", test_slashSlashEqual),
        ("test_star", test_star),
        ("test_starEqual", test_starEqual),
        ("test_starStar", test_starStar),
        ("test_starStarEqual", test_starStarEqual),
        ("test_tilde", test_tilde),
        ("test_vbar", test_vbar),
        ("test_vbarEqual", test_vbarEqual),
    ]
}

extension OtherTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OtherTests = [
        ("test_eof", test_eof),
        ("test_newLine_CR", test_newLine_CR),
        ("test_newLine_CRLF", test_newLine_CRLF),
        ("test_newLine_escape", test_newLine_escape),
        ("test_newLine_escape_withoutNewLine_throws", test_newLine_escape_withoutNewLine_throws),
        ("test_newLine_LF", test_newLine_LF),
        ("test_newLine_LF_CR", test_newLine_LF_CR),
    ]
}

extension StringTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StringTests = [
        ("test_bytes", test_bytes),
        ("test_doubleQuote_CJK", test_doubleQuote_CJK),
        ("test_doubleQuote_emoji", test_doubleQuote_emoji),
        ("test_doubleQuote_simple", test_doubleQuote_simple),
        ("test_doubleQuote_withEscapes", test_doubleQuote_withEscapes),
        ("test_doubleQuote_withLineEscapes", test_doubleQuote_withLineEscapes),
        ("test_doubleQuote_withNumericEscapes", test_doubleQuote_withNumericEscapes),
        ("test_doubleQuote_withoutEnd_throws", test_doubleQuote_withoutEnd_throws),
        ("test_doubleQuote_withUnrecognizedEscape_warns", test_doubleQuote_withUnrecognizedEscape_warns),
        ("test_emptyString", test_emptyString),
        ("test_rawString", test_rawString),
        ("test_singleQuote_simple", test_singleQuote_simple),
        ("test_tripleQuote_multilineString", test_tripleQuote_multilineString),
        ("test_tripleQuote_simple", test_tripleQuote_simple),
        ("test_tripleQuote_singleQuotes_doNotEnd", test_tripleQuote_singleQuotes_doNotEnd),
        ("test_tripleQuote_withoutEnd_throws", test_tripleQuote_withoutEnd_throws),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(CommentTests.__allTests__CommentTests),
        testCase(FloatingPointTests.__allTests__FloatingPointTests),
        testCase(IdentifierTests.__allTests__IdentifierTests),
        testCase(IndentSpaceTests.__allTests__IndentSpaceTests),
        testCase(IndentTabTests.__allTests__IndentTabTests),
        testCase(IndentTests.__allTests__IndentTests),
        testCase(IntegerTests.__allTests__IntegerTests),
        testCase(OperatorTests.__allTests__OperatorTests),
        testCase(OtherTests.__allTests__OtherTests),
        testCase(StringTests.__allTests__StringTests),
    ]
}
#endif
