#if !canImport(ObjectiveC)
import XCTest

extension FStringTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FStringTests = [
        ("test_empty", test_empty),
        ("test_formattedValue_addition", test_formattedValue_addition),
        ("test_formattedValue_conversion_formatSpec", test_formattedValue_conversion_formatSpec),
        ("test_formattedValue_conversion", test_formattedValue_conversion),
        ("test_formattedValue_formatSpec", test_formattedValue_formatSpec),
        ("test_formattedValue_inParens", test_formattedValue_inParens),
        ("test_formattedValue_string", test_formattedValue_string),
        ("test_formattedValue", test_formattedValue),
        ("test_fString_withoutExpr_multiple", test_fString_withoutExpr_multiple),
        ("test_fString_withoutExpr_withEscapes", test_fString_withoutExpr_withEscapes),
        ("test_fString_withoutExpr_withSingleRightBrace_throws", test_fString_withoutExpr_withSingleRightBrace_throws),
        ("test_fString_withoutExpr_withUnclosedEscape_throws", test_fString_withoutExpr_withUnclosedEscape_throws),
        ("test_fString_withoutExpr", test_fString_withoutExpr),
        ("test_joined_double_unclosedParen_throws_mismatchedParen", test_joined_double_unclosedParen_throws_mismatchedParen),
        ("test_joined_expression_asEnd", test_joined_expression_asEnd),
        ("test_joined_expression_atStart", test_joined_expression_atStart),
        ("test_joined_expression_empty_throws", test_joined_expression_empty_throws),
        ("test_joined_expression_inTheMiddle_withConversion_andFormatSpec", test_joined_expression_inTheMiddle_withConversion_andFormatSpec),
        ("test_joined_expression_inTheMiddle", test_joined_expression_inTheMiddle),
        ("test_joined_expression_withBackslash_throws", test_joined_expression_withBackslash_throws),
        ("test_joined_expression_withComment_throws", test_joined_expression_withComment_throws),
        ("test_joined_expressions_multiple", test_joined_expressions_multiple),
        ("test_joined_expressions_sideBySide", test_joined_expressions_sideBySide),
        ("test_joined_formatString_withNestedExpression_throws", test_joined_formatString_withNestedExpression_throws),
        ("test_joined_invalidConversion_throws", test_joined_invalidConversion_throws),
        ("test_joined_longString", test_joined_longString),
        ("test_joined_single_unclosedParen_throws_unexpectedEnd", test_joined_single_unclosedParen_throws_unexpectedEnd),
        ("test_joined_unclosedLongString_throws", test_joined_unclosedLongString_throws),
        ("test_joined_unclosedString_throws", test_joined_unclosedString_throws),
        ("test_string_multiline", test_string_multiline),
        ("test_string", test_string),
    ]
}

extension LexerAdapterTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LexerAdapterTests = [
        ("test_advance_ignoresSubsequentLines_withComment", test_advance_ignoresSubsequentLines_withComment),
        ("test_advance_ignoresSubsequentLines_withComment_orNewLine", test_advance_ignoresSubsequentLines_withComment_orNewLine),
        ("test_advance_ignoresSubsequentNewLines", test_advance_ignoresSubsequentNewLines),
        ("test_populatePeeks_ignoresComments", test_populatePeeks_ignoresComments),
        ("test_populatePeeks_withEOF_as1stToken", test_populatePeeks_withEOF_as1stToken),
        ("test_populatePeeks_withEOF_as2ndToken", test_populatePeeks_withEOF_as2ndToken),
    ]
}

extension ParseAnnAssign {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseAnnAssign = [
        ("test_inParen_isNotSimple", test_inParen_isNotSimple),
        ("test_simple", test_simple),
        ("test_toAttribute", test_toAttribute),
        ("test_toConstants_throws", test_toConstants_throws),
        ("test_toSubscript", test_toSubscript),
        ("test_withoutValue", test_withoutValue),
    ]
}

extension ParseArithmeticExpr {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseArithmeticExpr = [
        ("test_addGroup_isLeftAssociative", test_addGroup_isLeftAssociative),
        ("test_binary", test_binary),
        ("test_minus_hasHigherPrecedence_thanMul", test_minus_hasHigherPrecedence_thanMul),
        ("test_mul_hasHigherPrecedence_thanAdd", test_mul_hasHigherPrecedence_thanAdd),
        ("test_mulGroup_isLeftAssociative", test_mulGroup_isLeftAssociative),
        ("test_powerGroup_isRightAssociative", test_powerGroup_isRightAssociative),
        ("test_unary", test_unary),
        ("test_unaryGroup_isRightAssociative", test_unaryGroup_isRightAssociative),
    ]
}

extension ParseAssert {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseAssert = [
        ("test_simple", test_simple),
        ("test_withMessage", test_withMessage),
    ]
}

extension ParseAssign {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseAssign = [
        ("test_simple", test_simple),
        ("test_target_multiple", test_target_multiple),
        ("test_target_withComma_isTuple", test_target_withComma_isTuple),
        ("test_toTuple", test_toTuple),
        ("test_yieldTarget", test_yieldTarget),
        ("test_yieldValue", test_yieldValue),
    ]
}

extension ParseAsync {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseAsync = [
        ("test_def", test_def),
        ("test_for", test_for),
        ("test_while_throws", test_while_throws),
        ("test_with", test_with),
    ]
}

extension ParseAtoms {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseAtoms = [
        ("test_await", test_await),
        ("test_ellipsis", test_ellipsis),
        ("test_false", test_false),
        ("test_float", test_float),
        ("test_imaginary", test_imaginary),
        ("test_int", test_int),
        ("test_none", test_none),
        ("test_true", test_true),
    ]
}

extension ParseAttribute {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseAttribute = [
        ("test_isLeftAssociative", test_isLeftAssociative),
        ("test_simple", test_simple),
    ]
}

extension ParseAugAssign {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseAugAssign = [
        ("test_simple", test_simple),
        ("test_toAttribute", test_toAttribute),
        ("test_toConstants_throws", test_toConstants_throws),
        ("test_toSubscript", test_toSubscript),
        ("test_yield", test_yield),
    ]
}

extension ParseBitExpr {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseBitExpr = [
        ("test_andGroup_isLeftAssociative", test_andGroup_isLeftAssociative),
        ("test_operators", test_operators),
        ("test_orGroup_isLeftAssociative", test_orGroup_isLeftAssociative),
        ("test_shiftGroup_isLeftAssociative", test_shiftGroup_isLeftAssociative),
        ("test_xorGroup_isLeftAssociative", test_xorGroup_isLeftAssociative),
    ]
}

extension ParseBoolExpr {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseBoolExpr = [
        ("test_and_hasHigherPrecedence_thanOr", test_and_hasHigherPrecedence_thanOr),
        ("test_and_isLeftAssociative", test_and_isLeftAssociative),
        ("test_and_or", test_and_or),
        ("test_not", test_not),
        ("test_not_hasHigherPrecedence_thanAnd", test_not_hasHigherPrecedence_thanAnd),
        ("test_not_isRightAssociative", test_not_isRightAssociative),
        ("test_or_isLeftAssociative", test_or_isLeftAssociative),
    ]
}

extension ParseCall {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseCall = [
        ("test_keyword_duplicate_throws", test_keyword_duplicate_throws),
        ("test_keyword_invalidName_throws", test_keyword_invalidName_throws),
        ("test_keyword_lambda_assignment_throws", test_keyword_lambda_assignment_throws),
        ("test_keyword_multiple", test_keyword_multiple),
        ("test_keyword_single", test_keyword_single),
        ("test_noArgs", test_noArgs),
        ("test_positional_afterKeyword_throws", test_positional_afterKeyword_throws),
        ("test_positional_afterKeywordUnpacking_throws", test_positional_afterKeywordUnpacking_throws),
        ("test_positional_multiple", test_positional_multiple),
        ("test_positional_single", test_positional_single),
        ("test_positional_withAdditionalParens", test_positional_withAdditionalParens),
        ("test_positional_withCommaAfter", test_positional_withCommaAfter),
        ("test_star", test_star),
        ("test_star_afterKeyword", test_star_afterKeyword),
        ("test_star_afterKeywordUnpacking_throws", test_star_afterKeywordUnpacking_throws),
        ("test_star_afterPositional", test_star_afterPositional),
        ("test_starStar", test_starStar),
        ("test_starStar_afterPositional", test_starStar_afterPositional),
    ]
}

extension ParseCallComprehension {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseCallComprehension = [
        ("test_afterPositional_inParens", test_afterPositional_inParens),
        ("test_afterPositional_withoutParens_fails", test_afterPositional_withoutParens_fails),
        ("test_beforePositional_inParens", test_beforePositional_inParens),
        ("test_beforePositional_withoutParens_fails", test_beforePositional_withoutParens_fails),
        ("test_commaAfter", test_commaAfter),
        ("test_simple", test_simple),
    ]
}

extension ParseClassDef {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseClassDef = [
        ("test_base_afterKeyword_throws", test_base_afterKeyword_throws),
        ("test_base_afterKeywordUnpacking_throws", test_base_afterKeywordUnpacking_throws),
        ("test_base_multiple", test_base_multiple),
        ("test_base_single", test_base_single),
        ("test_base_withAdditionalParens", test_base_withAdditionalParens),
        ("test_base_withCommaAfter", test_base_withCommaAfter),
        ("test_base_withStar", test_base_withStar),
        ("test_base_withStar_afterKeyword", test_base_withStar_afterKeyword),
        ("test_base_withStar_afterKeywordUnpacking_throws", test_base_withStar_afterKeywordUnpacking_throws),
        ("test_generator_throws", test_generator_throws),
        ("test_keyword_duplicate_throws", test_keyword_duplicate_throws),
        ("test_keyword_invalidName_throws", test_keyword_invalidName_throws),
        ("test_keyword_lambda_assignment_throws", test_keyword_lambda_assignment_throws),
        ("test_keyword_multiple", test_keyword_multiple),
        ("test_keyword_single", test_keyword_single),
        ("test_keyword_withStarStar", test_keyword_withStarStar),
        ("test_keyword_withStarStar_afterNormal", test_keyword_withStarStar_afterNormal),
        ("test_noBase", test_noBase),
        ("test_noBase_emptyParens", test_noBase_emptyParens),
    ]
}

extension ParseComment {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseComment = [
        ("test_startWithComment", test_startWithComment),
        ("test_startWithComment_multipleStatements", test_startWithComment_multipleStatements),
    ]
}

extension ParseComparisonExpr {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseComparisonExpr = [
        ("test_compare_withMultipleElements", test_compare_withMultipleElements),
        ("test_isNot", test_isNot),
        ("test_notIn", test_notIn),
        ("test_operators", test_operators),
    ]
}

extension ParseContinueBreak {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseContinueBreak = [
        ("test_break", test_break),
        ("test_continue", test_continue),
    ]
}

extension ParseDecorators {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseDecorators = [
        ("test_arguments_keyword", test_arguments_keyword),
        ("test_arguments_multiple", test_arguments_multiple),
        ("test_arguments_none", test_arguments_none),
        ("test_arguments_positional", test_arguments_positional),
        ("test_dottedName", test_dottedName),
        ("test_function", test_function),
        ("test_function_async", test_function_async),
        ("test_multiple", test_multiple),
        ("test_simple", test_simple),
    ]
}

extension ParseDelete {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseDelete = [
        ("test_attribute", test_attribute),
        ("test_multiple", test_multiple),
        ("test_simple", test_simple),
        ("test_subscript", test_subscript),
        ("test_withCommaAfter", test_withCommaAfter),
    ]
}

extension ParseDictionary {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseDictionary = [
        ("test_comprehension", test_comprehension),
        ("test_empty", test_empty),
        ("test_multipleElements", test_multipleElements),
        ("test_singleElement", test_singleElement),
        ("test_starStar", test_starStar),
        ("test_unpacking_insideComprehension_throws", test_unpacking_insideComprehension_throws),
        ("test_withComaAfter", test_withComaAfter),
    ]
}

extension ParseExpressionStatement {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseExpressionStatement = [
        ("test_expression", test_expression),
    ]
}

extension ParseFor {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseFor = [
        ("test_simple", test_simple),
        ("test_withCommaAfterTarget_isTuple", test_withCommaAfterTarget_isTuple),
        ("test_withCommaTargetTuple", test_withCommaTargetTuple),
        ("test_withElse", test_withElse),
        ("test_withIterTuple", test_withIterTuple),
    ]
}

extension ParseFunctionDef {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseFunctionDef = [
        ("test_all", test_all),
        ("test_kwargs", test_kwargs),
        ("test_kwargs_duplicate_throws", test_kwargs_duplicate_throws),
        ("test_kwargs_withCommaAfter", test_kwargs_withCommaAfter),
        ("test_noArguments", test_noArguments),
        ("test_noArguments_return", test_noArguments_return),
        ("test_positional", test_positional),
        ("test_positional_default", test_positional_default),
        ("test_positional_default_afterRequired", test_positional_default_afterRequired),
        ("test_positional_multiple", test_positional_multiple),
        ("test_positional_requited_afterDefault_throws", test_positional_requited_afterDefault_throws),
        ("test_positional_withType", test_positional_withType),
        ("test_varargs", test_varargs),
        ("test_varargs_duplicate_throws", test_varargs_duplicate_throws),
        ("test_varargs_keywordOnly_withDefault", test_varargs_keywordOnly_withDefault),
        ("test_varargs_keywordOnly_withoutDefault_isImplicitNone", test_varargs_keywordOnly_withoutDefault_isImplicitNone),
        ("test_varargsUnnamed", test_varargsUnnamed),
        ("test_varargsUnnamed_withoutFollowingArguments_throws", test_varargsUnnamed_withoutFollowingArguments_throws),
    ]
}

extension ParseGlobalNonlocal {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseGlobalNonlocal = [
        ("test_global", test_global),
        ("test_global_multiple", test_global_multiple),
        ("test_nonlocal", test_nonlocal),
        ("test_nonlocal_multiple", test_nonlocal_multiple),
    ]
}

extension ParseIfExpr {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseIfExpr = [
        ("test_simple", test_simple),
    ]
}

extension ParseIfStatement {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseIfStatement = [
        ("test_simple", test_simple),
        ("test_withElif", test_withElif),
        ("test_withElif_andElse", test_withElif_andElse),
        ("test_withElse", test_withElse),
    ]
}

extension ParseImport {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseImport = [
        ("test_multiple", test_multiple),
        ("test_nested", test_nested),
        ("test_simple", test_simple),
        ("test_withAlias", test_withAlias),
    ]
}

extension ParseImportFrom {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseImportFrom = [
        ("test_dir", test_dir),
        ("test_dotModule", test_dotModule),
        ("test_ellipsis", test_ellipsis),
        ("test_ellipsisModule", test_ellipsisModule),
        ("test_module", test_module),
        ("test_module_importAll", test_module_importAll),
        ("test_module_multiple", test_module_multiple),
        ("test_module_multiple_inParens", test_module_multiple_inParens),
        ("test_module_withAlias", test_module_withAlias),
        ("test_nestedModule", test_nestedModule),
    ]
}

extension ParseLambda {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseLambda = [
        ("test_all", test_all),
        ("test_kwargs", test_kwargs),
        ("test_kwargs_duplicate_throws", test_kwargs_duplicate_throws),
        ("test_kwargs_withCommaAfter", test_kwargs_withCommaAfter),
        ("test_noArguments", test_noArguments),
        ("test_positional", test_positional),
        ("test_positional_default", test_positional_default),
        ("test_positional_default_afterRequired", test_positional_default_afterRequired),
        ("test_positional_multiple", test_positional_multiple),
        ("test_positional_requited_afterDefault_throws", test_positional_requited_afterDefault_throws),
        ("test_varargs", test_varargs),
        ("test_varargs_duplicate_throws", test_varargs_duplicate_throws),
        ("test_varargs_keywordOnly_withDefault", test_varargs_keywordOnly_withDefault),
        ("test_varargs_keywordOnly_withoutDefault_isImplicitNone", test_varargs_keywordOnly_withoutDefault_isImplicitNone),
        ("test_varargsUnnamed", test_varargsUnnamed),
        ("test_varargsUnnamed_withoutFollowingArguments_throws", test_varargsUnnamed_withoutFollowingArguments_throws),
    ]
}

extension ParseList {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseList = [
        ("test_comprehension_async", test_comprehension_async),
        ("test_comprehension_for_multiple", test_comprehension_for_multiple),
        ("test_comprehension_ifs_multiple", test_comprehension_ifs_multiple),
        ("test_comprehension_list", test_comprehension_list),
        ("test_comprehension_target_multiple", test_comprehension_target_multiple),
        ("test_comprehension_target_withCommaAfter_isTuple", test_comprehension_target_withCommaAfter_isTuple),
        ("test_empty", test_empty),
        ("test_value", test_value),
        ("test_value_multiple", test_value_multiple),
        ("test_value_withComaAfter", test_value_withComaAfter),
    ]
}

extension ParseParenExpr {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseParenExpr = [
        ("test_emptyTuple", test_emptyTuple),
        ("test_generator", test_generator),
        ("test_tuple", test_tuple),
        ("test_value", test_value),
        ("test_value_withComaAfter_givesTuple", test_value_withComaAfter_givesTuple),
        ("test_yield_expr", test_yield_expr),
        ("test_yield_nil", test_yield_nil),
        ("test_yield_tuple", test_yield_tuple),
    ]
}

extension ParsePass {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParsePass = [
        ("test_pass", test_pass),
    ]
}

extension ParseRaise {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseRaise = [
        ("test_exception", test_exception),
        ("test_exception_from", test_exception_from),
        ("test_reRaise", test_reRaise),
    ]
}

extension ParseReturn {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseReturn = [
        ("test_multiple", test_multiple),
        ("test_value", test_value),
        ("test_withCommaAfter_returnsTuple", test_withCommaAfter_returnsTuple),
        ("test_withoutValue", test_withoutValue),
    ]
}

extension ParseSet {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseSet = [
        ("test_comprehension", test_comprehension),
        ("test_multipleElements", test_multipleElements),
        ("test_singleElement", test_singleElement),
        ("test_star", test_star),
        ("test_withComaAfter", test_withComaAfter),
    ]
}

extension ParseString {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseString = [
        ("test_bytes", test_bytes),
        ("test_bytes_concat", test_bytes_concat),
        ("test_bytes_concatWithFormatString_throws", test_bytes_concatWithFormatString_throws),
        ("test_bytes_concatWithString_throws", test_bytes_concatWithString_throws),
        ("test_fstring_concat", test_fstring_concat),
        ("test_fstring_error", test_fstring_error),
        ("test_fstring", test_fstring),
        ("test_string", test_string),
        ("test_string_concat", test_string_concat),
        ("test_string_concatWithBytes_throws", test_string_concatWithBytes_throws),
    ]
}

extension ParseSubscript {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseSubscript = [
        ("test_empty_throws", test_empty_throws),
        ("test_extSlice", test_extSlice),
        ("test_index", test_index),
        ("test_index_tuple", test_index_tuple),
        ("test_index_withCommaAfter_isTuple", test_index_withCommaAfter_isTuple),
        ("test_slice_all", test_slice_all),
        ("test_slice_lower", test_slice_lower),
        ("test_slice_none", test_slice_none),
        ("test_slice_step", test_slice_step),
        ("test_slice_upper", test_slice_upper),
    ]
}

extension ParseSuite {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseSuite = [
        ("test_class_withFunction", test_class_withFunction),
        ("test_for_withWith", test_for_withWith),
        ("test_function_withIf", test_function_withIf),
        ("test_if_withWhile", test_if_withWhile),
        ("test_multipleNewLines_atTheBeginning", test_multipleNewLines_atTheBeginning),
        ("test_while_withFor", test_while_withFor),
        ("test_with_withClass", test_with_withClass),
    ]
}

extension ParseTry {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseTry = [
        ("test_else_withoutExcept_throws", test_else_withoutExcept_throws),
        ("test_except", test_except),
        ("test_except_else", test_except_else),
        ("test_except_else_finally", test_except_else_finally),
        ("test_except_finally", test_except_finally),
        ("test_except_multiple", test_except_multiple),
        ("test_except_type", test_except_type),
        ("test_except_type_withName", test_except_type_withName),
        ("test_finally", test_finally),
        ("test_withoutFinallyOrElse_throws", test_withoutFinallyOrElse_throws),
    ]
}

extension ParseWhile {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseWhile = [
        ("test_simple", test_simple),
        ("test_withElse", test_withElse),
    ]
}

extension ParseWith {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseWith = [
        ("test_alias", test_alias),
        ("test_multipleItems", test_multipleItems),
        ("test_multipleItems_withAlias", test_multipleItems_withAlias),
        ("test_simple", test_simple),
    ]
}

extension ParseYield {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseYield = [
        ("test_from", test_from),
        ("test_value", test_value),
        ("test_value_multiple", test_value_multiple),
        ("test_value_withCommaAfter_yieldsTuple", test_value_withCommaAfter_yieldsTuple),
        ("test_withoutValue", test_withoutValue),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(FStringTests.__allTests__FStringTests),
        testCase(LexerAdapterTests.__allTests__LexerAdapterTests),
        testCase(ParseAnnAssign.__allTests__ParseAnnAssign),
        testCase(ParseArithmeticExpr.__allTests__ParseArithmeticExpr),
        testCase(ParseAssert.__allTests__ParseAssert),
        testCase(ParseAssign.__allTests__ParseAssign),
        testCase(ParseAsync.__allTests__ParseAsync),
        testCase(ParseAtoms.__allTests__ParseAtoms),
        testCase(ParseAttribute.__allTests__ParseAttribute),
        testCase(ParseAugAssign.__allTests__ParseAugAssign),
        testCase(ParseBitExpr.__allTests__ParseBitExpr),
        testCase(ParseBoolExpr.__allTests__ParseBoolExpr),
        testCase(ParseCall.__allTests__ParseCall),
        testCase(ParseCallComprehension.__allTests__ParseCallComprehension),
        testCase(ParseClassDef.__allTests__ParseClassDef),
        testCase(ParseComment.__allTests__ParseComment),
        testCase(ParseComparisonExpr.__allTests__ParseComparisonExpr),
        testCase(ParseContinueBreak.__allTests__ParseContinueBreak),
        testCase(ParseDecorators.__allTests__ParseDecorators),
        testCase(ParseDelete.__allTests__ParseDelete),
        testCase(ParseDictionary.__allTests__ParseDictionary),
        testCase(ParseExpressionStatement.__allTests__ParseExpressionStatement),
        testCase(ParseFor.__allTests__ParseFor),
        testCase(ParseFunctionDef.__allTests__ParseFunctionDef),
        testCase(ParseGlobalNonlocal.__allTests__ParseGlobalNonlocal),
        testCase(ParseIfExpr.__allTests__ParseIfExpr),
        testCase(ParseIfStatement.__allTests__ParseIfStatement),
        testCase(ParseImport.__allTests__ParseImport),
        testCase(ParseImportFrom.__allTests__ParseImportFrom),
        testCase(ParseLambda.__allTests__ParseLambda),
        testCase(ParseList.__allTests__ParseList),
        testCase(ParseParenExpr.__allTests__ParseParenExpr),
        testCase(ParsePass.__allTests__ParsePass),
        testCase(ParseRaise.__allTests__ParseRaise),
        testCase(ParseReturn.__allTests__ParseReturn),
        testCase(ParseSet.__allTests__ParseSet),
        testCase(ParseString.__allTests__ParseString),
        testCase(ParseSubscript.__allTests__ParseSubscript),
        testCase(ParseSuite.__allTests__ParseSuite),
        testCase(ParseTry.__allTests__ParseTry),
        testCase(ParseWhile.__allTests__ParseWhile),
        testCase(ParseWith.__allTests__ParseWith),
        testCase(ParseYield.__allTests__ParseYield),
    ]
}
#endif
