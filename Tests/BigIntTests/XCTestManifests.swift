#if !canImport(ObjectiveC)
import XCTest

extension AppleBigIntTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AppleBigIntTests = [
        ("test_binaryInteger_interop", test_binaryInteger_interop),
        ("test_bitshift", test_bitshift),
        ("test_bitwise", test_bitwise),
        ("test_conformances", test_conformances),
        ("test_huge", test_huge),
        ("test_identity_fixedPoint", test_identity_fixedPoint),
        ("test_initialization", test_initialization),
        ("test_magnitude", test_magnitude),
        ("test_minRequiredWidth", test_minRequiredWidth),
        ("test_strings", test_strings),
        ("test_zeroArithmetic", test_zeroArithmetic),
    ]
}

extension BigIntCOWTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntCOWTests = [
        ("test_add_toCopy_doesNotModifyOriginal", test_add_toCopy_doesNotModifyOriginal),
        ("test_add_toInout_doesNotModifyOriginal", test_add_toInout_doesNotModifyOriginal),
        ("test_addEqual_toCopy_doesNotModifyOriginal", test_addEqual_toCopy_doesNotModifyOriginal),
        ("test_addEqual_toInout_doesModifyOriginal", test_addEqual_toInout_doesModifyOriginal),
        ("test_div_toCopy_doesNotModifyOriginal", test_div_toCopy_doesNotModifyOriginal),
        ("test_div_toInout_doesNotModifyOriginal", test_div_toInout_doesNotModifyOriginal),
        ("test_divEqual_toCopy_doesNotModifyOriginal", test_divEqual_toCopy_doesNotModifyOriginal),
        ("test_divEqual_toInout_doesModifyOriginal", test_divEqual_toInout_doesModifyOriginal),
        ("test_invert_doesNotModifyOriginal", test_invert_doesNotModifyOriginal),
        ("test_minus_doesNotModifyOriginal", test_minus_doesNotModifyOriginal),
        ("test_mod_toCopy_doesNotModifyOriginal", test_mod_toCopy_doesNotModifyOriginal),
        ("test_mod_toInout_doesNotModifyOriginal", test_mod_toInout_doesNotModifyOriginal),
        ("test_modEqual_toCopy_doesNotModifyOriginal", test_modEqual_toCopy_doesNotModifyOriginal),
        ("test_modEqual_toInout_doesModifyOriginal", test_modEqual_toInout_doesModifyOriginal),
        ("test_mul_toCopy_doesNotModifyOriginal", test_mul_toCopy_doesNotModifyOriginal),
        ("test_mul_toInout_doesNotModifyOriginal", test_mul_toInout_doesNotModifyOriginal),
        ("test_mulEqual_toCopy_doesNotModifyOriginal", test_mulEqual_toCopy_doesNotModifyOriginal),
        ("test_mulEqual_toInout_doesModifyOriginal", test_mulEqual_toInout_doesModifyOriginal),
        ("test_plus_doesNotModifyOriginal", test_plus_doesNotModifyOriginal),
        ("test_shiftLeft_copy_doesNotModifyOriginal", test_shiftLeft_copy_doesNotModifyOriginal),
        ("test_shiftLeft_inout_doesNotModifyOriginal", test_shiftLeft_inout_doesNotModifyOriginal),
        ("test_shiftLeftEqual_copy_doesNotModifyOriginal", test_shiftLeftEqual_copy_doesNotModifyOriginal),
        ("test_shiftLeftEqual_inout_doesModifyOriginal", test_shiftLeftEqual_inout_doesModifyOriginal),
        ("test_shiftRight_copy_doesNotModifyOriginal", test_shiftRight_copy_doesNotModifyOriginal),
        ("test_shiftRight_inout_doesNotModifyOriginal", test_shiftRight_inout_doesNotModifyOriginal),
        ("test_shiftRightEqual_copy_doesNotModifyOriginal", test_shiftRightEqual_copy_doesNotModifyOriginal),
        ("test_shiftRightEqual_inout_doesModifyOriginal", test_shiftRightEqual_inout_doesModifyOriginal),
        ("test_sub_toCopy_doesNotModifyOriginal", test_sub_toCopy_doesNotModifyOriginal),
        ("test_sub_toInout_doesNotModifyOriginal", test_sub_toInout_doesNotModifyOriginal),
        ("test_subEqual_toCopy_doesNotModifyOriginal", test_subEqual_toCopy_doesNotModifyOriginal),
        ("test_subEqual_toInout_doesModifyOriginal", test_subEqual_toInout_doesModifyOriginal),
    ]
}

extension BigIntDivTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntDivTests = [
        ("test_run", test_run),
    ]
}

extension BigIntDoubleOperationsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntDoubleOperationsTests = [
        ("test_add_heapHeap", test_add_heapHeap),
        ("test_add_heapSmi", test_add_heapSmi),
        ("test_add_smiHeap", test_add_smiHeap),
        ("test_add_smiSmi", test_add_smiSmi),
        ("test_div_heapHeap", test_div_heapHeap),
        ("test_div_heapSmi", test_div_heapSmi),
        ("test_div_smiHeap", test_div_smiHeap),
        ("test_div_smiSmi", test_div_smiSmi),
        ("test_mul_heapHeap", test_mul_heapHeap),
        ("test_mul_heapSmi", test_mul_heapSmi),
        ("test_mul_smiHeap", test_mul_smiHeap),
        ("test_mul_smiSmi", test_mul_smiSmi),
        ("test_shiftLeft_heap", test_shiftLeft_heap),
        ("test_shiftLeft_smi", test_shiftLeft_smi),
        ("test_shiftRight_heap_belowWord", test_shiftRight_heap_belowWord),
        ("test_shiftRight_heap_overWord", test_shiftRight_heap_overWord),
        ("test_shiftRight_smi_belowWord", test_shiftRight_smi_belowWord),
        ("test_shiftRight_smi_overWord", test_shiftRight_smi_overWord),
        ("test_sub_heapHeap", test_sub_heapHeap),
        ("test_sub_heapSmi", test_sub_heapSmi),
        ("test_sub_smiHeap", test_sub_smiHeap),
        ("test_sub_smiSmi", test_sub_smiSmi),
    ]
}

extension BigIntFloatingPointTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntFloatingPointTests = [
        ("test_random", test_random),
        ("test_special", test_special),
    ]
}

extension BigIntHashTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntHashTests = [
        ("test_dict_insertAndFind", test_dict_insertAndFind),
        ("test_dict_insertAndRemove", test_dict_insertAndRemove),
        ("test_dict_insertReplaceAndFind", test_dict_insertReplaceAndFind),
        ("test_set_insertAndFind", test_set_insertAndFind),
        ("test_set_insertAndRemove", test_set_insertAndRemove),
    ]
}

extension BigIntHeapAddTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntHeapAddTests = [
        ("test_heap_bothMultipleWords", test_heap_bothMultipleWords),
        ("test_heap_bothNegative_newWord", test_heap_bothNegative_newWord),
        ("test_heap_bothNegative_sameWord", test_heap_bothNegative_sameWord),
        ("test_heap_bothPositive_newWord", test_heap_bothPositive_newWord),
        ("test_heap_bothPositive_sameWord", test_heap_bothPositive_sameWord),
        ("test_heap_lhsLonger", test_heap_lhsLonger),
        ("test_heap_otherZero", test_heap_otherZero),
        ("test_heap_rhsLonger", test_heap_rhsLonger),
        ("test_heap_selfNegative_otherPositive_changingSign", test_heap_selfNegative_otherPositive_changingSign),
        ("test_heap_selfNegative_otherPositive_sameSign", test_heap_selfNegative_otherPositive_sameSign),
        ("test_heap_selfNegative_otherPositive_zero", test_heap_selfNegative_otherPositive_zero),
        ("test_heap_selfPositive_otherNegative_changingSign", test_heap_selfPositive_otherNegative_changingSign),
        ("test_heap_selfPositive_otherNegative_sameSign", test_heap_selfPositive_otherNegative_sameSign),
        ("test_heap_selfPositive_otherNegative_zero", test_heap_selfPositive_otherNegative_zero),
        ("test_heap_selfZero_otherPositive", test_heap_selfZero_otherPositive),
        ("test_smi_bothNegative_newWord", test_smi_bothNegative_newWord),
        ("test_smi_bothNegative_sameWord", test_smi_bothNegative_sameWord),
        ("test_smi_bothPositive_newWord", test_smi_bothPositive_newWord),
        ("test_smi_bothPositive_sameWord", test_smi_bothPositive_sameWord),
        ("test_smi_generated", test_smi_generated),
        ("test_smi_lhsLonger", test_smi_lhsLonger),
        ("test_smi_otherZero", test_smi_otherZero),
        ("test_smi_selfNegative_otherPositive_changingSign", test_smi_selfNegative_otherPositive_changingSign),
        ("test_smi_selfNegative_otherPositive_sameSign", test_smi_selfNegative_otherPositive_sameSign),
        ("test_smi_selfNegative_otherPositive_zero", test_smi_selfNegative_otherPositive_zero),
        ("test_smi_selfPositive_otherNegative_changingSign", test_smi_selfPositive_otherNegative_changingSign),
        ("test_smi_selfPositive_otherNegative_sameSign", test_smi_selfPositive_otherNegative_sameSign),
        ("test_smi_selfPositive_otherNegative_zero", test_smi_selfPositive_otherNegative_zero),
        ("test_smi_selfZero", test_smi_selfZero),
    ]
}

extension BigIntHeapAndTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntHeapAndTests = [
        ("test_heap_bothMultipleWords", test_heap_bothMultipleWords),
        ("test_heap_lhsLonger", test_heap_lhsLonger),
        ("test_heap_otherZero", test_heap_otherZero),
        ("test_heap_rhsLonger", test_heap_rhsLonger),
        ("test_heap_selfZero", test_heap_selfZero),
        ("test_heap_singleWord", test_heap_singleWord),
        ("test_heap_singleWord_trivial", test_heap_singleWord_trivial),
        ("test_smi_lhsLonger", test_smi_lhsLonger),
        ("test_smi_otherZero", test_smi_otherZero),
        ("test_smi_selfZero", test_smi_selfZero),
        ("test_smi_singleWord", test_smi_singleWord),
    ]
}

extension BigIntHeapComparableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntHeapComparableTests = [
        ("test_heap_differentSign_negativeIsAlwaysLess", test_heap_differentSign_negativeIsAlwaysLess),
        ("test_heap_sameSign_equalMagnitude_isNeverLess", test_heap_sameSign_equalMagnitude_isNeverLess),
        ("test_heap_sameSign_greaterMagnitude_isNeverLess", test_heap_sameSign_greaterMagnitude_isNeverLess),
        ("test_heap_sameSign_moreWords", test_heap_sameSign_moreWords),
        ("test_heap_sameSign_smallerMagnitude_isLess", test_heap_sameSign_smallerMagnitude_isLess),
        ("test_smi_differentSign_negativeIsAlwaysLess", test_smi_differentSign_negativeIsAlwaysLess),
        ("test_smi_sameSign_equalMagnitude_isNotLess", test_smi_sameSign_equalMagnitude_isNotLess),
        ("test_smi_sameSign_greaterMagnitude_isNeverLess", test_smi_sameSign_greaterMagnitude_isNeverLess),
        ("test_smi_sameSign_moreThan1Word", test_smi_sameSign_moreThan1Word),
        ("test_smi_sameSign_smallerMagnitude_isLess", test_smi_sameSign_smallerMagnitude_isLess),
    ]
}

extension BigIntHeapDivRemTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntHeapDivRemTests = [
        ("test_heap", test_heap),
        ("test_smi", test_smi),
    ]
}

extension BigIntHeapDivTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntHeapDivTests = [
        ("test_heap_bothMultipleWords", test_heap_bothMultipleWords),
        ("test_heap_equalMagnitude", test_heap_equalMagnitude),
        ("test_heap_lhsLonger", test_heap_lhsLonger),
        ("test_heap_otherHas_greaterMagnitude", test_heap_otherHas_greaterMagnitude),
        ("test_heap_otherIsPowerOf2", test_heap_otherIsPowerOf2),
        ("test_heap_otherMinusOne", test_heap_otherMinusOne),
        ("test_heap_otherPlusOne", test_heap_otherPlusOne),
        ("test_heap_rhsLonger", test_heap_rhsLonger),
        ("test_heap_selfHas_greaterMagnitude", test_heap_selfHas_greaterMagnitude),
        ("test_heap_selfMinusOne", test_heap_selfMinusOne),
        ("test_heap_selfPlusOne", test_heap_selfPlusOne),
        ("test_heap_selfZero", test_heap_selfZero),
        ("test_smi_equalMagnitude", test_smi_equalMagnitude),
        ("test_smi_lhsLonger", test_smi_lhsLonger),
        ("test_smi_otherHas_greaterMagnitude", test_smi_otherHas_greaterMagnitude),
        ("test_smi_otherIsPowerOf2", test_smi_otherIsPowerOf2),
        ("test_smi_otherMinusOne", test_smi_otherMinusOne),
        ("test_smi_otherPlusOne", test_smi_otherPlusOne),
        ("test_smi_selfHas_greaterMagnitude", test_smi_selfHas_greaterMagnitude),
        ("test_smi_selfMinusOne", test_smi_selfMinusOne),
        ("test_smi_selfPlusOne", test_smi_selfPlusOne),
        ("test_smi_selfZero", test_smi_selfZero),
    ]
}

extension BigIntHeapEquatableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntHeapEquatableTests = [
        ("test_heap_equal", test_heap_equal),
        ("test_heap_withDifferentSign_isNeverEqual", test_heap_withDifferentSign_isNeverEqual),
        ("test_heap_withDifferentWordCount_isNeverEqual", test_heap_withDifferentWordCount_isNeverEqual),
        ("test_heap_withDifferentWords_isNeverEqual", test_heap_withDifferentWords_isNeverEqual),
        ("test_smi_equal", test_smi_equal),
        ("test_smi_moreThan1Word_isNeverEqual", test_smi_moreThan1Word_isNeverEqual),
        ("test_smi_notEqual", test_smi_notEqual),
    ]
}

extension BigIntHeapHashableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntHeapHashableTests = [
        ("test_notSmi_doesNotTrap_etc", test_notSmi_doesNotTrap_etc),
        ("test_smiRepresentable_hasTheSameHash_asSmi", test_smiRepresentable_hasTheSameHash_asSmi),
    ]
}

extension BigIntHeapInvertTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntHeapInvertTests = [
        ("test_invert_multipleWords", test_invert_multipleWords),
        ("test_invert_singleWord", test_invert_singleWord),
    ]
}

extension BigIntHeapModTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntHeapModTests = [
        ("test_heap", test_heap),
        ("test_smi", test_smi),
    ]
}

extension BigIntHeapMulTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntHeapMulTests = [
        ("test_heap_bothMultipleWords", test_heap_bothMultipleWords),
        ("test_heap_carryOverflow", test_heap_carryOverflow),
        ("test_heap_lhsLonger", test_heap_lhsLonger),
        ("test_heap_otherIsPowerOf2", test_heap_otherIsPowerOf2),
        ("test_heap_otherMinusOne", test_heap_otherMinusOne),
        ("test_heap_otherPlusOne", test_heap_otherPlusOne),
        ("test_heap_otherZero", test_heap_otherZero),
        ("test_heap_rhsLonger", test_heap_rhsLonger),
        ("test_heap_selfMinusOne", test_heap_selfMinusOne),
        ("test_heap_selfPlusOne", test_heap_selfPlusOne),
        ("test_heap_selfZero", test_heap_selfZero),
        ("test_smi_generated", test_smi_generated),
        ("test_smi_lhsLonger", test_smi_lhsLonger),
        ("test_smi_otherIsPowerOf2", test_smi_otherIsPowerOf2),
        ("test_smi_otherMinusOne", test_smi_otherMinusOne),
        ("test_smi_otherPlusOne", test_smi_otherPlusOne),
        ("test_smi_otherZero", test_smi_otherZero),
        ("test_smi_selfMinusOne", test_smi_selfMinusOne),
        ("test_smi_selfPlusOne", test_smi_selfPlusOne),
        ("test_smi_selfZero", test_smi_selfZero),
    ]
}

extension BigIntHeapNegateTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntHeapNegateTests = [
        ("test_negate_heap", test_negate_heap),
        ("test_negate_smi", test_negate_smi),
        ("test_negate_zero", test_negate_zero),
    ]
}

extension BigIntHeapOrTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntHeapOrTests = [
        ("test_heap_bothMultipleWords", test_heap_bothMultipleWords),
        ("test_heap_lhsLonger", test_heap_lhsLonger),
        ("test_heap_otherZero", test_heap_otherZero),
        ("test_heap_rhsLonger", test_heap_rhsLonger),
        ("test_heap_selfZero", test_heap_selfZero),
        ("test_heap_singleWord", test_heap_singleWord),
        ("test_heap_singleWord_trivial", test_heap_singleWord_trivial),
        ("test_smi_lhsLonger", test_smi_lhsLonger),
        ("test_smi_otherZero", test_smi_otherZero),
        ("test_smi_selfZero", test_smi_selfZero),
        ("test_smi_singleWord", test_smi_singleWord),
    ]
}

extension BigIntHeapPropertyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntHeapPropertyTests = [
        ("test_bitWidth_multipleWords_negativePowersOf2", test_bitWidth_multipleWords_negativePowersOf2),
        ("test_bitWidth_multipleWords_positivePowersOf2", test_bitWidth_multipleWords_positivePowersOf2),
        ("test_bitWidth_negativePowersOf2", test_bitWidth_negativePowersOf2),
        ("test_bitWidth_positivePowersOf2", test_bitWidth_positivePowersOf2),
        ("test_bitWidth_smiTestCases", test_bitWidth_smiTestCases),
        ("test_bitWidth_trivial", test_bitWidth_trivial),
        ("test_hasMagnitudeOfOne_false", test_hasMagnitudeOfOne_false),
        ("test_hasMagnitudeOfOne_true", test_hasMagnitudeOfOne_true),
        ("test_isNegative", test_isNegative),
        ("test_isPositive", test_isPositive),
        ("test_isZero", test_isZero),
        ("test_magnitude_heap", test_magnitude_heap),
        ("test_magnitude_int", test_magnitude_int),
        ("test_magnitude_negation", test_magnitude_negation),
        ("test_magnitude_trivial", test_magnitude_trivial),
        ("test_minRequiredWidth_heap", test_minRequiredWidth_heap),
        ("test_minRequiredWidth_negativePowersOf2", test_minRequiredWidth_negativePowersOf2),
        ("test_minRequiredWidth_positivePowersOf2", test_minRequiredWidth_positivePowersOf2),
        ("test_minRequiredWidth_smi", test_minRequiredWidth_smi),
        ("test_trailingZeroBitCount_multipleWords", test_trailingZeroBitCount_multipleWords),
        ("test_trailingZeroBitCount_singleWord", test_trailingZeroBitCount_singleWord),
        ("test_trailingZeroBitCount_zero", test_trailingZeroBitCount_zero),
        ("test_words_int", test_words_int),
        ("test_words_multipleWords_negative_notPowerOf2", test_words_multipleWords_negative_notPowerOf2),
        ("test_words_multipleWords_negative_powerOf2", test_words_multipleWords_negative_powerOf2),
        ("test_words_multipleWords_positive", test_words_multipleWords_positive),
        ("test_words_zero", test_words_zero),
    ]
}

extension BigIntHeapShiftTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntHeapShiftTests = [
        ("test_left_heap_butActuallyRight", test_left_heap_butActuallyRight),
        ("test_left_heap_byBits", test_left_heap_byBits),
        ("test_left_heap_byZero", test_left_heap_byZero),
        ("test_left_smi_butActuallyRight", test_left_smi_butActuallyRight),
        ("test_left_smi_byBits", test_left_smi_byBits),
        ("test_left_smi_byWholeWord", test_left_smi_byWholeWord),
        ("test_left_smi_byZero", test_left_smi_byZero),
        ("test_left_smi_exampleFromCode", test_left_smi_exampleFromCode),
        ("test_right_heap_butActuallyRight", test_right_heap_butActuallyRight),
        ("test_right_heap_byBits", test_right_heap_byBits),
        ("test_right_heap_byZero", test_right_heap_byZero),
        ("test_right_smi_butActuallyLeft", test_right_smi_butActuallyLeft),
        ("test_right_smi_byBits", test_right_smi_byBits),
        ("test_right_smi_byMoreThanBitWidth", test_right_smi_byMoreThanBitWidth),
        ("test_right_smi_byWholeWord_negative_withAdjustment", test_right_smi_byWholeWord_negative_withAdjustment),
        ("test_right_smi_byWholeWord_negative_withoutAdjustment", test_right_smi_byWholeWord_negative_withoutAdjustment),
        ("test_right_smi_byWholeWord_positive", test_right_smi_byWholeWord_positive),
        ("test_right_smi_byZero", test_right_smi_byZero),
        ("test_right_smi_exampleFromCode", test_right_smi_exampleFromCode),
    ]
}

extension BigIntHeapStringTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntHeapStringTests = [
        ("test_binary_singleWord", test_binary_singleWord),
        ("test_binary_trivial", test_binary_trivial),
        ("test_binary_twoWords", test_binary_twoWords),
        ("test_decimal_singleWord", test_decimal_singleWord),
        ("test_decimal_threeWords", test_decimal_threeWords),
        ("test_decimal_trivial", test_decimal_trivial),
        ("test_decimal_twoWords", test_decimal_twoWords),
        ("test_description_fourWords", test_description_fourWords),
        ("test_description_singleWord", test_description_singleWord),
        ("test_description_singleWord_generated", test_description_singleWord_generated),
        ("test_description_threeWords", test_description_threeWords),
        ("test_description_trivial", test_description_trivial),
        ("test_description_twoWords", test_description_twoWords),
        ("test_hex_singleWord", test_hex_singleWord),
        ("test_hex_threeWords", test_hex_threeWords),
        ("test_hex_trivial", test_hex_trivial),
        ("test_hex_twoWords", test_hex_twoWords),
        ("test_octal_singleWord", test_octal_singleWord),
        ("test_octal_threeWords", test_octal_threeWords),
        ("test_octal_trivial", test_octal_trivial),
        ("test_octal_twoWords", test_octal_twoWords),
        ("test_quinary_singleWord", test_quinary_singleWord),
        ("test_quinary_trivial", test_quinary_trivial),
        ("test_quinary_twoWords", test_quinary_twoWords),
    ]
}

extension BigIntHeapSubTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntHeapSubTests = [
        ("test_heap_bothMultipleWords", test_heap_bothMultipleWords),
        ("test_heap_bothNegative_changingSign", test_heap_bothNegative_changingSign),
        ("test_heap_bothNegative_sameSign", test_heap_bothNegative_sameSign),
        ("test_heap_bothNegative_zero", test_heap_bothNegative_zero),
        ("test_heap_bothPositive_changingSign", test_heap_bothPositive_changingSign),
        ("test_heap_bothPositive_sameSign", test_heap_bothPositive_sameSign),
        ("test_heap_bothPositive_zero", test_heap_bothPositive_zero),
        ("test_heap_lhsLonger", test_heap_lhsLonger),
        ("test_heap_otherZero", test_heap_otherZero),
        ("test_heap_rhsLonger", test_heap_rhsLonger),
        ("test_heap_selfNegative_otherPositive_newWord", test_heap_selfNegative_otherPositive_newWord),
        ("test_heap_selfNegative_otherPositive_sameWord", test_heap_selfNegative_otherPositive_sameWord),
        ("test_heap_selfPositive_otherNegative_newWord", test_heap_selfPositive_otherNegative_newWord),
        ("test_heap_selfPositive_otherNegative_sameWord", test_heap_selfPositive_otherNegative_sameWord),
        ("test_heap_selfZero_otherPositive", test_heap_selfZero_otherPositive),
        ("test_smi_bothNegative_changingSign", test_smi_bothNegative_changingSign),
        ("test_smi_bothNegative_sameSign", test_smi_bothNegative_sameSign),
        ("test_smi_bothNegative_zero", test_smi_bothNegative_zero),
        ("test_smi_bothPositive_changingSign", test_smi_bothPositive_changingSign),
        ("test_smi_bothPositive_sameSign", test_smi_bothPositive_sameSign),
        ("test_smi_bothPositive_zero", test_smi_bothPositive_zero),
        ("test_smi_generated", test_smi_generated),
        ("test_smi_lhsLonger", test_smi_lhsLonger),
        ("test_smi_otherZero", test_smi_otherZero),
        ("test_smi_selfNegative_otherPositive_newWord", test_smi_selfNegative_otherPositive_newWord),
        ("test_smi_selfNegative_otherPositive_sameWord", test_smi_selfNegative_otherPositive_sameWord),
        ("test_smi_selfPositive_otherNegative_newWord", test_smi_selfPositive_otherNegative_newWord),
        ("test_smi_selfPositive_otherNegative_sameWord", test_smi_selfPositive_otherNegative_sameWord),
        ("test_smi_selfZero", test_smi_selfZero),
    ]
}

extension BigIntHeapXorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntHeapXorTests = [
        ("test_heap_bothMultipleWords", test_heap_bothMultipleWords),
        ("test_heap_lhsLonger", test_heap_lhsLonger),
        ("test_heap_otherZero", test_heap_otherZero),
        ("test_heap_rhsLonger", test_heap_rhsLonger),
        ("test_heap_selfZero", test_heap_selfZero),
        ("test_heap_singleWord", test_heap_singleWord),
        ("test_heap_singleWord_trivial", test_heap_singleWord_trivial),
        ("test_smi_lhsLonger", test_smi_lhsLonger),
        ("test_smi_otherZero", test_smi_otherZero),
        ("test_smi_selfZero", test_smi_selfZero),
        ("test_smi_singleWord", test_smi_singleWord),
    ]
}

extension BigIntIntegerInitTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntIntegerInitTests = [
        ("test_clamping_signed", test_clamping_signed),
        ("test_clamping_signed_biggerThanMax_returnsNil", test_clamping_signed_biggerThanMax_returnsNil),
        ("test_clamping_signed_lessThanMin_returnsNil", test_clamping_signed_lessThanMin_returnsNil),
        ("test_clamping_unsigned", test_clamping_unsigned),
        ("test_clamping_unsigned_biggerThanMax_returnsNil", test_clamping_unsigned_biggerThanMax_returnsNil),
        ("test_clamping_unsigned_lessThanMin_returnsNil", test_clamping_unsigned_lessThanMin_returnsNil),
        ("test_exactly_signed", test_exactly_signed),
        ("test_exactly_signed_biggerThanMax_returnsNil", test_exactly_signed_biggerThanMax_returnsNil),
        ("test_exactly_signed_lessThanMin_returnsNil", test_exactly_signed_lessThanMin_returnsNil),
        ("test_exactly_unsigned", test_exactly_unsigned),
        ("test_exactly_unsigned_biggerThanMax_returnsNil", test_exactly_unsigned_biggerThanMax_returnsNil),
        ("test_exactly_unsigned_lessThanMin_returnsNil", test_exactly_unsigned_lessThanMin_returnsNil),
        ("test_truncatingIfNeeded_signed", test_truncatingIfNeeded_signed),
        ("test_truncatingIfNeeded_signed_biggerThanMax_returnsNil", test_truncatingIfNeeded_signed_biggerThanMax_returnsNil),
        ("test_truncatingIfNeeded_signed_lessThanMin_returnsNil", test_truncatingIfNeeded_signed_lessThanMin_returnsNil),
        ("test_truncatingIfNeeded_unsigned", test_truncatingIfNeeded_unsigned),
        ("test_truncatingIfNeeded_unsigned_biggerThanMax_returnsNil", test_truncatingIfNeeded_unsigned_biggerThanMax_returnsNil),
        ("test_truncatingIfNeeded_unsigned_lessThanMin_returnsNil", test_truncatingIfNeeded_unsigned_lessThanMin_returnsNil),
    ]
}

extension BigIntMemoryLayoutTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntMemoryLayoutTests = [
        ("test_size", test_size),
    ]
}

extension BigIntPowerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntPowerTests = [
        ("test_againstFoundationPow", test_againstFoundationPow),
        ("test_base_minusOne", test_base_minusOne),
        ("test_base_one", test_base_one),
        ("test_base_zero", test_base_zero),
        ("test_exponent_one", test_exponent_one),
        ("test_exponent_three", test_exponent_three),
        ("test_exponent_two", test_exponent_two),
        ("test_exponent_zero", test_exponent_zero),
    ]
}

extension BigIntPropertyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntPropertyTests = [
        ("test_bitWidth_multipleWords_negativePowersOf2", test_bitWidth_multipleWords_negativePowersOf2),
        ("test_bitWidth_multipleWords_positivePowersOf2", test_bitWidth_multipleWords_positivePowersOf2),
        ("test_bitWidth_negativePowersOf2", test_bitWidth_negativePowersOf2),
        ("test_bitWidth_positivePowersOf2", test_bitWidth_positivePowersOf2),
        ("test_bitWidth_smiTestCases", test_bitWidth_smiTestCases),
        ("test_bitWidth_trivial", test_bitWidth_trivial),
        ("test_description", test_description),
        ("test_heap", test_heap),
        ("test_magnitude_heap", test_magnitude_heap),
        ("test_magnitude_int", test_magnitude_int),
        ("test_minRequiredWidth_heap", test_minRequiredWidth_heap),
        ("test_minRequiredWidth_negativePowersOf2", test_minRequiredWidth_negativePowersOf2),
        ("test_minRequiredWidth_positivePowersOf2", test_minRequiredWidth_positivePowersOf2),
        ("test_minRequiredWidth_smi", test_minRequiredWidth_smi),
        ("test_smi", test_smi),
        ("test_trailingZeroBitCount_heap_nonZeroFirstWord", test_trailingZeroBitCount_heap_nonZeroFirstWord),
        ("test_trailingZeroBitCount_heap_zeroFirstWord", test_trailingZeroBitCount_heap_zeroFirstWord),
        ("test_trailingZeroBitCount_int", test_trailingZeroBitCount_int),
        ("test_trailingZeroBitCount_zero", test_trailingZeroBitCount_zero),
        ("test_words_int", test_words_int),
        ("test_words_multipleWords_negative_notPowerOf2", test_words_multipleWords_negative_notPowerOf2),
        ("test_words_multipleWords_negative_powerOf2", test_words_multipleWords_negative_powerOf2),
        ("test_words_multipleWords_positive", test_words_multipleWords_positive),
        ("test_words_zero", test_words_zero),
    ]
}

extension BigIntPythonStringInitTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntPythonStringInitTests = [
        ("test_basic", test_basic),
        ("test_underscores", test_underscores),
    ]
}

extension BigIntReversibleOperationsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntReversibleOperationsTests = [
        ("test_addSub_heapHeap", test_addSub_heapHeap),
        ("test_addSub_heapSmi", test_addSub_heapSmi),
        ("test_addSub_smiHeap", test_addSub_smiHeap),
        ("test_addSub_smiSmi", test_addSub_smiSmi),
        ("test_mulDiv_heapHeap", test_mulDiv_heapHeap),
        ("test_mulDiv_heapSmi", test_mulDiv_heapSmi),
        ("test_mulDiv_smiHeap", test_mulDiv_smiHeap),
        ("test_mulDiv_smiSmi", test_mulDiv_smiSmi),
        ("test_shiftLeftRight_heap", test_shiftLeftRight_heap),
        ("test_shiftLeftRight_smi", test_shiftLeftRight_smi),
        ("test_toStringInit_heap", test_toStringInit_heap),
        ("test_toStringInit_smi", test_toStringInit_smi),
    ]
}

extension BigIntStorageTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntStorageTests = [
        ("test_append", test_append),
        ("test_append_cow", test_append_cow),
        ("test_append_withGrow", test_append_withGrow),
        ("test_appendCollection_cow", test_appendCollection_cow),
        ("test_appendCollection_toNonZero", test_appendCollection_toNonZero),
        ("test_appendCollection_toZero", test_appendCollection_toZero),
        ("test_description", test_description),
        ("test_dropFirst_lessThanCount", test_dropFirst_lessThanCount),
        ("test_dropFirst_lessThanCount_cow", test_dropFirst_lessThanCount_cow),
        ("test_dropFirst_moreThanCount", test_dropFirst_moreThanCount),
        ("test_dropFirst_moreThanCount_cow", test_dropFirst_moreThanCount_cow),
        ("test_dropFirst_zero", test_dropFirst_zero),
        ("test_equatable", test_equatable),
        ("test_isNegative_cow", test_isNegative_cow),
        ("test_isNegative_isPositive", test_isNegative_isPositive),
        ("test_memoryLayout", test_memoryLayout),
        ("test_prepend_cow", test_prepend_cow),
        ("test_prepend_inNewBuffer", test_prepend_inNewBuffer),
        ("test_prepend_insideExistingBuffer", test_prepend_insideExistingBuffer),
        ("test_set_Int", test_set_Int),
        ("test_set_Int_cow", test_set_Int_cow),
        ("test_set_UInt", test_set_UInt),
        ("test_set_UInt_cow", test_set_UInt_cow),
        ("test_subscript_get", test_subscript_get),
        ("test_subscript_set", test_subscript_set),
        ("test_subscript_set_cow", test_subscript_set_cow),
        ("test_transform", test_transform),
        ("test_transform_cow", test_transform_cow),
    ]
}

extension BigIntStringInitTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BigIntStringInitTests = [
        ("test_empty_fails", test_empty_fails),
        ("test_heap_binary_singleWord", test_heap_binary_singleWord),
        ("test_heap_binary_twoWords", test_heap_binary_twoWords),
        ("test_heap_decimal_fourWords", test_heap_decimal_fourWords),
        ("test_heap_decimal_singleWord", test_heap_decimal_singleWord),
        ("test_heap_decimal_threeWords", test_heap_decimal_threeWords),
        ("test_heap_decimal_twoWords", test_heap_decimal_twoWords),
        ("test_heap_hex_singleWord", test_heap_hex_singleWord),
        ("test_heap_hex_threeWords", test_heap_hex_threeWords),
        ("test_heap_hex_twoWords", test_heap_hex_twoWords),
        ("test_heap_octal_singleWord", test_heap_octal_singleWord),
        ("test_heap_octal_threeWords", test_heap_octal_threeWords),
        ("test_heap_octal_twoWords", test_heap_octal_twoWords),
        ("test_heap_quinary_singleWord", test_heap_quinary_singleWord),
        ("test_heap_quinary_twoWords", test_heap_quinary_twoWords),
        ("test_invalidDigit_biggerThanRadix_fails", test_invalidDigit_biggerThanRadix_fails),
        ("test_invalidDigit_emoji_fails", test_invalidDigit_emoji_fails),
        ("test_onlyMinusSign_withoutDigits_fails", test_onlyMinusSign_withoutDigits_fails),
        ("test_onlyPlusSign_withoutDigits_fails", test_onlyPlusSign_withoutDigits_fails),
        ("test_smi_decimal", test_smi_decimal),
        ("test_underscore_after_minusSign_fails", test_underscore_after_minusSign_fails),
        ("test_underscore_after_plusSign_fails", test_underscore_after_plusSign_fails),
        ("test_underscore_before_minusSign_fails", test_underscore_before_minusSign_fails),
        ("test_underscore_before_plusSign_fails", test_underscore_before_plusSign_fails),
        ("test_underscore_binary", test_underscore_binary),
        ("test_underscore_decimal", test_underscore_decimal),
        ("test_underscore_double_fails", test_underscore_double_fails),
        ("test_underscore_prefix_withoutSign_fails", test_underscore_prefix_withoutSign_fails),
        ("test_underscore_suffix_fails", test_underscore_suffix_fails),
        ("test_zero_multiple", test_zero_multiple),
        ("test_zero_single", test_zero_single),
        ("test_zero_single_minus", test_zero_single_minus),
        ("test_zero_single_plus", test_zero_single_plus),
    ]
}

extension NodeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NodeTests = [
        ("test_add_heap_heap", test_add_heap_heap),
        ("test_add_heap_smi", test_add_heap_smi),
        ("test_add_smi_heap", test_add_smi_heap),
        ("test_add_smi_smi", test_add_smi_smi),
        ("test_and_heap_heap", test_and_heap_heap),
        ("test_and_heap_smi", test_and_heap_smi),
        ("test_and_smi_heap", test_and_smi_heap),
        ("test_and_smi_smi", test_and_smi_smi),
        ("test_div_heap_heap", test_div_heap_heap),
        ("test_div_heap_smi", test_div_heap_smi),
        ("test_div_smi_heap", test_div_smi_heap),
        ("test_div_smi_smi", test_div_smi_smi),
        ("test_divMod_heap_heap", test_divMod_heap_heap),
        ("test_divMod_heap_smi", test_divMod_heap_smi),
        ("test_divMod_smi_heap", test_divMod_smi_heap),
        ("test_divMod_smi_smi", test_divMod_smi_smi),
        ("test_invert_heap", test_invert_heap),
        ("test_invert_smi", test_invert_smi),
        ("test_minus_heap", test_minus_heap),
        ("test_minus_smi", test_minus_smi),
        ("test_mod_heap_heap", test_mod_heap_heap),
        ("test_mod_heap_smi", test_mod_heap_smi),
        ("test_mod_smi_heap", test_mod_smi_heap),
        ("test_mod_smi_smi", test_mod_smi_smi),
        ("test_mul_heap_heap", test_mul_heap_heap),
        ("test_mul_heap_smi", test_mul_heap_smi),
        ("test_mul_smi_heap", test_mul_smi_heap),
        ("test_mul_smi_smi", test_mul_smi_smi),
        ("test_or_heap_heap", test_or_heap_heap),
        ("test_or_heap_smi", test_or_heap_smi),
        ("test_or_smi_heap", test_or_smi_heap),
        ("test_or_smi_smi", test_or_smi_smi),
        ("test_plus_heap", test_plus_heap),
        ("test_plus_smi", test_plus_smi),
        ("test_power_heap", test_power_heap),
        ("test_power_smi", test_power_smi),
        ("test_shiftLeft_heap_lessThanWord", test_shiftLeft_heap_lessThanWord),
        ("test_shiftLeft_heap_moreThanWord", test_shiftLeft_heap_moreThanWord),
        ("test_shiftLeft_heap_word", test_shiftLeft_heap_word),
        ("test_shiftLeft_smi_lessThanWord", test_shiftLeft_smi_lessThanWord),
        ("test_shiftLeft_smi_moreThanWord", test_shiftLeft_smi_moreThanWord),
        ("test_shiftLeft_smi_word", test_shiftLeft_smi_word),
        ("test_shiftRight_heap_lessThanWord", test_shiftRight_heap_lessThanWord),
        ("test_shiftRight_heap_moreThanWord", test_shiftRight_heap_moreThanWord),
        ("test_shiftRight_heap_word", test_shiftRight_heap_word),
        ("test_shiftRight_smi_lessThanWord", test_shiftRight_smi_lessThanWord),
        ("test_shiftRight_smi_moreThanWord", test_shiftRight_smi_moreThanWord),
        ("test_shiftRight_smi_word", test_shiftRight_smi_word),
        ("test_sub_heap_heap", test_sub_heap_heap),
        ("test_sub_heap_smi", test_sub_heap_smi),
        ("test_sub_smi_heap", test_sub_smi_heap),
        ("test_sub_smi_smi", test_sub_smi_smi),
        ("test_xor_heap_heap", test_xor_heap_heap),
        ("test_xor_heap_smi", test_xor_heap_smi),
        ("test_xor_smi_heap", test_xor_smi_heap),
        ("test_xor_smi_smi", test_xor_smi_smi),
    ]
}

extension SmiBinaryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SmiBinaryTests = [
        ("test_add_overflow_negative", test_add_overflow_negative),
        ("test_add_overflow_positive", test_add_overflow_positive),
        ("test_add_withoutOverflow", test_add_withoutOverflow),
        ("test_div_min_by_minus1", test_div_min_by_minus1),
        ("test_div_withoutOverflow", test_div_withoutOverflow),
        ("test_mod_min_by_minus1", test_mod_min_by_minus1),
        ("test_mod_withoutOverflow", test_mod_withoutOverflow),
        ("test_mul_overflow_negative", test_mul_overflow_negative),
        ("test_mul_overflow_positive", test_mul_overflow_positive),
        ("test_mul_withoutOverflow", test_mul_withoutOverflow),
        ("test_sub_overflow_negative", test_sub_overflow_negative),
        ("test_sub_overflow_positive", test_sub_overflow_positive),
        ("test_sub_withoutOverflow", test_sub_withoutOverflow),
    ]
}

extension SmiBtTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SmiBtTests = [
        ("test_and", test_and),
        ("test_or", test_or),
        ("test_xor", test_xor),
    ]
}

extension SmiPropertyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SmiPropertyTests = [
        ("test_bitWidth_negativePowersOf2", test_bitWidth_negativePowersOf2),
        ("test_bitWidth_positivePowersOf2", test_bitWidth_positivePowersOf2),
        ("test_bitWidth_smiTestCases", test_bitWidth_smiTestCases),
        ("test_bitWidth_trivial", test_bitWidth_trivial),
        ("test_isPositive_isNegative", test_isPositive_isNegative),
        ("test_isZero", test_isZero),
        ("test_magnitude", test_magnitude),
        ("test_minRequiredWidth_negativePowersOf2", test_minRequiredWidth_negativePowersOf2),
        ("test_minRequiredWidth_positivePowersOf2", test_minRequiredWidth_positivePowersOf2),
        ("test_minRequiredWidth_smiTestCases", test_minRequiredWidth_smiTestCases),
        ("test_minRequiredWidth_trivial", test_minRequiredWidth_trivial),
        ("test_trailingZeroBitCount", test_trailingZeroBitCount),
        ("test_words", test_words),
    ]
}

extension SmiShiftTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SmiShiftTests = [
        ("test_left_byZero", test_left_byZero),
        ("test_left_negativeCount", test_left_negativeCount),
        ("test_left_withoutOverflow", test_left_withoutOverflow),
        ("test_right", test_right),
        ("test_right_byZero", test_right_byZero),
        ("test_right_negativeCount", test_right_negativeCount),
    ]
}

extension SmiUnaryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SmiUnaryTests = [
        ("test_invert", test_invert),
        ("test_minus", test_minus),
        ("test_minus_min", test_minus_min),
    ]
}

extension SmiVsHeapHash {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SmiVsHeapHash = [
        ("test_compareHashValue", test_compareHashValue),
    ]
}

extension SmiVsHeapProperties {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SmiVsHeapProperties = [
        ("test_bitWidth", test_bitWidth),
        ("test_magnitude", test_magnitude),
        ("test_minRequiredWidth", test_minRequiredWidth),
        ("test_trailingZeroBitCount", test_trailingZeroBitCount),
        ("test_words", test_words),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AppleBigIntTests.__allTests__AppleBigIntTests),
        testCase(BigIntCOWTests.__allTests__BigIntCOWTests),
        testCase(BigIntDivTests.__allTests__BigIntDivTests),
        testCase(BigIntDoubleOperationsTests.__allTests__BigIntDoubleOperationsTests),
        testCase(BigIntFloatingPointTests.__allTests__BigIntFloatingPointTests),
        testCase(BigIntHashTests.__allTests__BigIntHashTests),
        testCase(BigIntHeapAddTests.__allTests__BigIntHeapAddTests),
        testCase(BigIntHeapAndTests.__allTests__BigIntHeapAndTests),
        testCase(BigIntHeapComparableTests.__allTests__BigIntHeapComparableTests),
        testCase(BigIntHeapDivRemTests.__allTests__BigIntHeapDivRemTests),
        testCase(BigIntHeapDivTests.__allTests__BigIntHeapDivTests),
        testCase(BigIntHeapEquatableTests.__allTests__BigIntHeapEquatableTests),
        testCase(BigIntHeapHashableTests.__allTests__BigIntHeapHashableTests),
        testCase(BigIntHeapInvertTests.__allTests__BigIntHeapInvertTests),
        testCase(BigIntHeapModTests.__allTests__BigIntHeapModTests),
        testCase(BigIntHeapMulTests.__allTests__BigIntHeapMulTests),
        testCase(BigIntHeapNegateTests.__allTests__BigIntHeapNegateTests),
        testCase(BigIntHeapOrTests.__allTests__BigIntHeapOrTests),
        testCase(BigIntHeapPropertyTests.__allTests__BigIntHeapPropertyTests),
        testCase(BigIntHeapShiftTests.__allTests__BigIntHeapShiftTests),
        testCase(BigIntHeapStringTests.__allTests__BigIntHeapStringTests),
        testCase(BigIntHeapSubTests.__allTests__BigIntHeapSubTests),
        testCase(BigIntHeapXorTests.__allTests__BigIntHeapXorTests),
        testCase(BigIntIntegerInitTests.__allTests__BigIntIntegerInitTests),
        testCase(BigIntMemoryLayoutTests.__allTests__BigIntMemoryLayoutTests),
        testCase(BigIntPowerTests.__allTests__BigIntPowerTests),
        testCase(BigIntPropertyTests.__allTests__BigIntPropertyTests),
        testCase(BigIntPythonStringInitTests.__allTests__BigIntPythonStringInitTests),
        testCase(BigIntReversibleOperationsTests.__allTests__BigIntReversibleOperationsTests),
        testCase(BigIntStorageTests.__allTests__BigIntStorageTests),
        testCase(BigIntStringInitTests.__allTests__BigIntStringInitTests),
        testCase(NodeTests.__allTests__NodeTests),
        testCase(SmiBinaryTests.__allTests__SmiBinaryTests),
        testCase(SmiBtTests.__allTests__SmiBtTests),
        testCase(SmiPropertyTests.__allTests__SmiPropertyTests),
        testCase(SmiShiftTests.__allTests__SmiShiftTests),
        testCase(SmiUnaryTests.__allTests__SmiUnaryTests),
        testCase(SmiVsHeapHash.__allTests__SmiVsHeapHash),
        testCase(SmiVsHeapProperties.__allTests__SmiVsHeapProperties),
    ]
}
#endif
