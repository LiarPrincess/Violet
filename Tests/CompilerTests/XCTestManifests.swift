#if !canImport(ObjectiveC)
import XCTest

extension CompileAnnAssign {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileAnnAssign = [
        ("test_simple", test_simple),
        ("test_toAttribute", test_toAttribute),
        ("test_toIndex", test_toIndex),
        ("test_toIndex_withoutValue", test_toIndex_withoutValue),
        ("test_toSlice_withoutValue", test_toSlice_withoutValue),
        ("test_withoutValue", test_withoutValue),
    ]
}

extension CompileAssert {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileAssert = [
        ("test_simple", test_simple),
        ("test_withMessage", test_withMessage),
        ("test_withOptimization_emitsNothing", test_withOptimization_emitsNothing),
    ]
}

extension CompileAssign {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileAssign = [
        ("test_attribute", test_attribute),
        ("test_multiple", test_multiple),
        ("test_single", test_single),
        ("test_subscript", test_subscript),
        ("test_toTuple", test_toTuple),
        ("test_toTuple_withUnpack", test_toTuple_withUnpack),
    ]
}

extension CompileAttribute {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileAttribute = [
        ("test_nested", test_nested),
        ("test_single", test_single),
    ]
}

extension CompileAugAssign {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileAugAssign = [
        ("test_attribute", test_attribute),
        ("test_simple", test_simple),
        ("test_subscript", test_subscript),
    ]
}

extension CompileCall {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileCall = [
        ("test_all", test_all),
        ("test_args", test_args),
        ("test_args_unpack", test_args_unpack),
        ("test_args_unpack_multiple", test_args_unpack_multiple),
        ("test_keyword", test_keyword),
        ("test_keyword_unpack", test_keyword_unpack),
        ("test_keyword_unpack_multiple", test_keyword_unpack_multiple),
        ("test_noArgs", test_noArgs),
    ]
}

extension CompileClassDef {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileClassDef = [
        ("test_baseTypes_keyword_multiple", test_baseTypes_keyword_multiple),
        ("test_baseTypes_keyword_single", test_baseTypes_keyword_single),
        ("test_baseTypes_keyword_withStarStar", test_baseTypes_keyword_withStarStar),
        ("test_baseTypes_keyword_withStarStar_afterNormal", test_baseTypes_keyword_withStarStar_afterNormal),
        ("test_baseTypes_multiple", test_baseTypes_multiple),
        ("test_baseTypes_no", test_baseTypes_no),
        ("test_baseTypes_single", test_baseTypes_single),
        ("test_baseTypes_withStar", test_baseTypes_withStar),
        ("test_baseTypes_withStar_afterKeyword", test_baseTypes_withStar_afterKeyword),
        ("test_init_singleArg", test_init_singleArg),
    ]
}

extension CompileClosureTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileClosureTests = [
        ("test__class__inNestedFunction_load", test__class__inNestedFunction_load),
        ("test_nonlocal_inNestedFunction_del", test_nonlocal_inNestedFunction_del),
        ("test_nonlocal_inNestedFunction_load", test_nonlocal_inNestedFunction_load),
        ("test_nonlocal_inNestedFunction_store", test_nonlocal_inNestedFunction_store),
    ]
}

extension CompileConstants {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileConstants = [
        ("test_complex", test_complex),
        ("test_ellipsis", test_ellipsis),
        ("test_false", test_false),
        ("test_float", test_float),
        ("test_integer", test_integer),
        ("test_none", test_none),
        ("test_true", test_true),
    ]
}

extension CompileDelete {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileDelete = [
        ("test_attribute", test_attribute),
        ("test_identifier", test_identifier),
        ("test_multiple", test_multiple),
        ("test_subscript", test_subscript),
        ("test_tuple", test_tuple),
    ]
}

extension CompileDictionary {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileDictionary = [
        ("test_constantsOnly", test_constantsOnly),
        ("test_empty", test_empty),
        ("test_withIdentifier", test_withIdentifier),
        ("test_withUnpack", test_withUnpack),
        ("test_withUnpack_multiple", test_withUnpack_multiple),
    ]
}

extension CompileFor {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileFor = [
        ("test_break", test_break),
        ("test_continue", test_continue),
        ("test_continue_inExcept", test_continue_inExcept),
        ("test_simple", test_simple),
        ("test_withElse", test_withElse),
    ]
}

extension CompileFunctionDef {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileFunctionDef = [
        ("test_all", test_all),
        ("test_kwargs", test_kwargs),
        ("test_noArguments", test_noArguments),
        ("test_noArguments_return", test_noArguments_return),
        ("test_positional", test_positional),
        ("test_positional_default", test_positional_default),
        ("test_positional_default_afterRequired", test_positional_default_afterRequired),
        ("test_positional_multiple", test_positional_multiple),
        ("test_positional_withType", test_positional_withType),
        ("test_varargs", test_varargs),
        ("test_varargs_keywordOnly_withDefault", test_varargs_keywordOnly_withDefault),
        ("test_varargsUnnamed", test_varargsUnnamed),
    ]
}

extension CompileIfExpr {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileIfExpr = [
        ("test_constants", test_constants),
        ("test_nested", test_nested),
        ("test_withIdentifier", test_withIdentifier),
    ]
}

extension CompileIfStmt {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileIfStmt = [
        ("test_false", test_false),
        ("test_if", test_if),
        ("test_if_binaryAnd", test_if_binaryAnd),
        ("test_if_binaryOr", test_if_binaryOr),
        ("test_if_compare_multiple", test_if_compare_multiple),
        ("test_if_compare_single", test_if_compare_single),
        ("test_if_ifExpr", test_if_ifExpr),
        ("test_if_unaryNot", test_if_unaryNot),
        ("test_if_withElse", test_if_withElse),
        ("test_multiple", test_multiple),
        ("test_true", test_true),
    ]
}

extension CompileImport {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileImport = [
        ("test_alias", test_alias),
        ("test_alias_multiple", test_alias_multiple),
        ("test_attributedModule", test_attributedModule),
        ("test_simple_withDot", test_simple_withDot),
        ("test_single", test_single),
    ]
}

extension CompileImportFrom {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileImportFrom = [
        ("test_dir", test_dir),
        ("test_dotModule", test_dotModule),
        ("test_module", test_module),
        ("test_module_importAll", test_module_importAll),
        ("test_module_multiple", test_module_multiple),
        ("test_module_nested", test_module_nested),
        ("test_module_withAlias", test_module_withAlias),
    ]
}

extension CompileLambda {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileLambda = [
        ("test_all", test_all),
        ("test_kwargs", test_kwargs),
        ("test_noArguments", test_noArguments),
        ("test_noArguments_store", test_noArguments_store),
        ("test_positional", test_positional),
        ("test_positional_default", test_positional_default),
        ("test_positional_default_afterRequired", test_positional_default_afterRequired),
        ("test_positional_multiple", test_positional_multiple),
        ("test_varargs", test_varargs),
        ("test_varargs_keywordOnly_withDefault", test_varargs_keywordOnly_withDefault),
        ("test_varargsUnnamed", test_varargsUnnamed),
    ]
}

extension CompileList {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileList = [
        ("test_constantsOnly", test_constantsOnly),
        ("test_empty", test_empty),
        ("test_withIdentifier", test_withIdentifier),
        ("test_withUnpack", test_withUnpack),
        ("test_withUnpack_multiple", test_withUnpack_multiple),
    ]
}

extension CompileLoadClassFree {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileLoadClassFree = [
        ("test_loadClassFree_forStore_isNotUsed", test_loadClassFree_forStore_isNotUsed),
        ("test_loadClassFree_isUsed", test_loadClassFree_isUsed),
    ]
}

extension CompileOperators {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileOperators = [
        ("test_binary", test_binary),
        ("test_binary_multiple", test_binary_multiple),
        ("test_boolean_and", test_boolean_and),
        ("test_boolean_multiple", test_boolean_multiple),
        ("test_boolean_or", test_boolean_or),
        ("test_compare", test_compare),
        ("test_compare_const", test_compare_const),
        ("test_compare_quad", test_compare_quad),
        ("test_compare_triple", test_compare_triple),
        ("test_unary", test_unary),
        ("test_unary_multiple", test_unary_multiple),
    ]
}

extension CompileRaise {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileRaise = [
        ("test_raise_exception", test_raise_exception),
        ("test_raise_exception_from", test_raise_exception_from),
        ("test_reRaise", test_reRaise),
    ]
}

extension CompileSet {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileSet = [
        ("test_constantsOnly", test_constantsOnly),
        ("test_withIdentifier", test_withIdentifier),
        ("test_withUnpack", test_withUnpack),
        ("test_withUnpack_multiple", test_withUnpack_multiple),
    ]
}

extension CompileStringTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileStringTests = [
        ("test_bytes", test_bytes),
        ("test_formattedValue_withConversion", test_formattedValue_withConversion),
        ("test_formattedValue_withConversion_andFormat", test_formattedValue_withConversion_andFormat),
        ("test_formattedValue_withFormat", test_formattedValue_withFormat),
        ("test_formattedValue_withoutConversion_orFormat", test_formattedValue_withoutConversion_orFormat),
        ("test_joinedString", test_joinedString),
        ("test_stringLiteral", test_stringLiteral),
    ]
}

extension CompileSubscript {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileSubscript = [
        ("test_index_afterIndex", test_index_afterIndex),
        ("test_index_constant", test_index_constant),
        ("test_index_identifier", test_index_identifier),
        ("test_slice_allNil", test_slice_allNil),
        ("test_slice_constant", test_slice_constant),
        ("test_slice_extended", test_slice_extended),
        ("test_slice_identifiers", test_slice_identifiers),
        ("test_slice_identifiers_withoutStep", test_slice_identifiers_withoutStep),
    ]
}

extension CompileTrivial {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileTrivial = [
        ("test_empty", test_empty),
        ("test_pass_doesNothing", test_pass_doesNothing),
    ]
}

extension CompileTry {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileTry = [
        ("test_except", test_except),
        ("test_except_else", test_except_else),
        ("test_except_else_finally", test_except_else_finally),
        ("test_except_finally", test_except_finally),
        ("test_except_multiple", test_except_multiple),
        ("test_except_type", test_except_type),
        ("test_except_type_withName", test_except_type_withName),
        ("test_except_type_withName_inFunction", test_except_type_withName_inFunction),
        ("test_finally", test_finally),
    ]
}

extension CompileTuple {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileTuple = [
        ("test_constantsOnly", test_constantsOnly),
        ("test_empty", test_empty),
        ("test_withIdentifier", test_withIdentifier),
        ("test_withUnpack", test_withUnpack),
        ("test_withUnpack_multiple", test_withUnpack_multiple),
    ]
}

extension CompileWhile {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileWhile = [
        ("test_break", test_break),
        ("test_continue", test_continue),
        ("test_simple", test_simple),
        ("test_withElse", test_withElse),
    ]
}

extension CompileWith {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompileWith = [
        ("test_alias", test_alias),
        ("test_multipleItems", test_multipleItems),
        ("test_multipleItemsAlias", test_multipleItemsAlias),
        ("test_simple", test_simple),
    ]
}

extension FutureFeaturesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FutureFeaturesTests = [
        ("test_emptyAST_hasNoFutureFeatures", test_emptyAST_hasNoFutureFeatures),
        ("test_future_annotations_isRecognized", test_future_annotations_isRecognized),
        ("test_future_annotations_withAlias_isRecognized", test_future_annotations_withAlias_isRecognized),
        ("test_future_braces_isRecognized", test_future_braces_isRecognized),
        ("test_future_braces_withAlias_isRecognized", test_future_braces_withAlias_isRecognized),
        ("test_future_flufl_afterDoc_isRecognized", test_future_flufl_afterDoc_isRecognized),
        ("test_future_flufl_isRecognized", test_future_flufl_isRecognized),
        ("test_future_flufl_withAlias_isRecognized", test_future_flufl_withAlias_isRecognized),
        ("test_import_hasNoFutureFeatures", test_import_hasNoFutureFeatures),
        ("test_import_withAlias_hasNoFutureFeatures", test_import_withAlias_hasNoFutureFeatures),
        ("test_lateFuture_throws", test_lateFuture_throws),
        ("test_multiple_separateStatements_areRecognized", test_multiple_separateStatements_areRecognized),
        ("test_multiple_separateStatements_sameLine_areRecognized", test_multiple_separateStatements_sameLine_areRecognized),
        ("test_multiple_tuple_areRecognized", test_multiple_tuple_areRecognized),
        ("test_obsoleteFlags_doNotThrow", test_obsoleteFlags_doNotThrow),
        ("test_unrecognized_throws", test_unrecognized_throws),
    ]
}

extension OptimizationLevelTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OptimizationLevelTests = [
        ("test_compare_none", test_compare_none),
        ("test_compare_O", test_compare_O),
        ("test_compare_OO", test_compare_OO),
    ]
}

extension STAssign {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__STAssign = [
        ("test_annAssign", test_annAssign),
        ("test_annAssign_attribute", test_annAssign_attribute),
        ("test_annAssign_global_withAnnotation_throws", test_annAssign_global_withAnnotation_throws),
        ("test_annAssign_inParens", test_annAssign_inParens),
        ("test_annAssign_nonlocal_withAnnotation_throws", test_annAssign_nonlocal_withAnnotation_throws),
        ("test_annAssign_toItself", test_annAssign_toItself),
        ("test_annAssign_withoutValue", test_annAssign_withoutValue),
        ("test_assign", test_assign),
        ("test_assign_multiple", test_assign_multiple),
        ("test_assign_toItself", test_assign_toItself),
        ("test_augAssign", test_augAssign),
        ("test_augAssign_toItself", test_augAssign_toItself),
    ]
}

extension STClass {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__STClass = [
        ("test_init_singleArg", test_init_singleArg),
    ]
}

extension STExpr {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__STExpr = [
        ("test_await", test_await),
        ("test_bytes", test_bytes),
        ("test_call_args", test_call_args),
        ("test_collections_dictionary", test_collections_dictionary),
        ("test_collections_list", test_collections_list),
        ("test_collections_set", test_collections_set),
        ("test_collections_tuple", test_collections_tuple),
        ("test_complex", test_complex),
        ("test_ellipsis", test_ellipsis),
        ("test_empty", test_empty),
        ("test_false", test_false),
        ("test_float", test_float),
        ("test_ifExpression", test_ifExpression),
        ("test_int", test_int),
        ("test_none", test_none),
        ("test_operations_binary", test_operations_binary),
        ("test_operations_bool", test_operations_bool),
        ("test_operations_comparison", test_operations_comparison),
        ("test_operations_unary", test_operations_unary),
        ("test_starred", test_starred),
        ("test_string_formattedValue", test_string_formattedValue),
        ("test_string_joined", test_string_joined),
        ("test_string_simple", test_string_simple),
        ("test_trailers_attribute", test_trailers_attribute),
        ("test_trailers_subscript_index", test_trailers_subscript_index),
        ("test_trailers_subscript_slice", test_trailers_subscript_slice),
        ("test_true", test_true),
        ("test_yield", test_yield),
        ("test_yield_value", test_yield_value),
        ("test_yieldFrom", test_yieldFrom),
    ]
}

extension STExprComprehension {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__STExprComprehension = [
        ("test_dictionary", test_dictionary),
        ("test_generator", test_generator),
        ("test_list", test_list),
        ("test_list_ifs", test_list_ifs),
        ("test_list_nested", test_list_nested),
        ("test_set", test_set),
    ]
}

extension STFunction {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__STFunction = [
        ("test_arguments_async", test_arguments_async),
        ("test_arguments_kwarg", test_arguments_kwarg),
        ("test_arguments_positional", test_arguments_positional),
        ("test_arguments_vararg_keywordOnly", test_arguments_vararg_keywordOnly),
        ("test_duplicateArgument_args_args_throws", test_duplicateArgument_args_args_throws),
        ("test_duplicateArgument_args_vararg_throws", test_duplicateArgument_args_vararg_throws),
        ("test_duplicateArgument_kwOnlyArgs_kwarg_throws", test_duplicateArgument_kwOnlyArgs_kwarg_throws),
        ("test_duplicateArgument_vararg_kwOnlyArgs_throws", test_duplicateArgument_vararg_kwOnlyArgs_throws),
        ("test_global_thenNonlocal_throws", test_global_thenNonlocal_throws),
        ("test_localVariable", test_localVariable),
        ("test_nonlocal", test_nonlocal),
        ("test_nonlocal_thenGlobal_throws", test_nonlocal_thenGlobal_throws),
        ("test_nonlocal_withoutBinding_throws", test_nonlocal_withoutBinding_throws),
        ("test_returns", test_returns),
    ]
}

extension STImport {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__STImport = [
        ("test_import", test_import),
        ("test_import_withAlias", test_import_withAlias),
        ("test_import_withAttribute", test_import_withAttribute),
        ("test_importFrom", test_importFrom),
        ("test_importFrom_withAlias", test_importFrom_withAlias),
        ("test_importFrom_withStar", test_importFrom_withStar),
        ("test_importFrom_withStar_inFunction_throws", test_importFrom_withStar_inFunction_throws),
    ]
}

extension STLambda {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__STLambda = [
        ("test_lambda", test_lambda),
        ("test_lambda_free_cell", test_lambda_free_cell),
    ]
}

extension STStmt {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__STStmt = [
        ("test_assert", test_assert),
        ("test_break", test_break),
        ("test_continue", test_continue),
        ("test_delete", test_delete),
        ("test_for", test_for),
        ("test_if", test_if),
        ("test_pass", test_pass),
        ("test_raise", test_raise),
        ("test_return", test_return),
        ("test_try", test_try),
        ("test_while", test_while),
        ("test_with", test_with),
    ]
}

extension STTopScope {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__STTopScope = [
        ("test_annotatedLocal_thenGlobal_throws", test_annotatedLocal_thenGlobal_throws),
        ("test_annotatedLocal_thenNonlocal_throws", test_annotatedLocal_thenNonlocal_throws),
        ("test_global", test_global),
        ("test_global_equalToParam_throws", test_global_equalToParam_throws),
        ("test_identifier_expression", test_identifier_expression),
        ("test_identifier_statement", test_identifier_statement),
        ("test_nonlocal_atModuleScope_throws", test_nonlocal_atModuleScope_throws),
        ("test_nonlocal_equalToParam_throws", test_nonlocal_equalToParam_throws),
        ("test_useAsLocal_thenGlobal_throws", test_useAsLocal_thenGlobal_throws),
        ("test_useAsLocal_thenNonlocal_throws", test_useAsLocal_thenNonlocal_throws),
    ]
}

extension SymbolInfoTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SymbolInfoTests = [
        ("test_description_multiple", test_description_multiple),
        ("test_description_noflags", test_description_noflags),
        ("test_description_single", test_description_single),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(CompileAnnAssign.__allTests__CompileAnnAssign),
        testCase(CompileAssert.__allTests__CompileAssert),
        testCase(CompileAssign.__allTests__CompileAssign),
        testCase(CompileAttribute.__allTests__CompileAttribute),
        testCase(CompileAugAssign.__allTests__CompileAugAssign),
        testCase(CompileCall.__allTests__CompileCall),
        testCase(CompileClassDef.__allTests__CompileClassDef),
        testCase(CompileClosureTests.__allTests__CompileClosureTests),
        testCase(CompileConstants.__allTests__CompileConstants),
        testCase(CompileDelete.__allTests__CompileDelete),
        testCase(CompileDictionary.__allTests__CompileDictionary),
        testCase(CompileFor.__allTests__CompileFor),
        testCase(CompileFunctionDef.__allTests__CompileFunctionDef),
        testCase(CompileIfExpr.__allTests__CompileIfExpr),
        testCase(CompileIfStmt.__allTests__CompileIfStmt),
        testCase(CompileImport.__allTests__CompileImport),
        testCase(CompileImportFrom.__allTests__CompileImportFrom),
        testCase(CompileLambda.__allTests__CompileLambda),
        testCase(CompileList.__allTests__CompileList),
        testCase(CompileLoadClassFree.__allTests__CompileLoadClassFree),
        testCase(CompileOperators.__allTests__CompileOperators),
        testCase(CompileRaise.__allTests__CompileRaise),
        testCase(CompileSet.__allTests__CompileSet),
        testCase(CompileStringTests.__allTests__CompileStringTests),
        testCase(CompileSubscript.__allTests__CompileSubscript),
        testCase(CompileTrivial.__allTests__CompileTrivial),
        testCase(CompileTry.__allTests__CompileTry),
        testCase(CompileTuple.__allTests__CompileTuple),
        testCase(CompileWhile.__allTests__CompileWhile),
        testCase(CompileWith.__allTests__CompileWith),
        testCase(FutureFeaturesTests.__allTests__FutureFeaturesTests),
        testCase(OptimizationLevelTests.__allTests__OptimizationLevelTests),
        testCase(STAssign.__allTests__STAssign),
        testCase(STClass.__allTests__STClass),
        testCase(STExpr.__allTests__STExpr),
        testCase(STExprComprehension.__allTests__STExprComprehension),
        testCase(STFunction.__allTests__STFunction),
        testCase(STImport.__allTests__STImport),
        testCase(STLambda.__allTests__STLambda),
        testCase(STStmt.__allTests__STStmt),
        testCase(STTopScope.__allTests__STTopScope),
        testCase(SymbolInfoTests.__allTests__SymbolInfoTests),
    ]
}
#endif
