#if !canImport(ObjectiveC)
import XCTest

extension BuilderClassTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderClassTests = [
        ("test_appendLoadBuildClass", test_appendLoadBuildClass),
    ]
}

extension BuilderCollectionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderCollectionTests = [
        ("test_appendBuildConstKeyMap", test_appendBuildConstKeyMap),
        ("test_appendBuildConstKeyMap_extended", test_appendBuildConstKeyMap_extended),
        ("test_appendBuildList", test_appendBuildList),
        ("test_appendBuildList_extended", test_appendBuildList_extended),
        ("test_appendBuildListUnpack", test_appendBuildListUnpack),
        ("test_appendBuildListUnpack_extended", test_appendBuildListUnpack_extended),
        ("test_appendBuildMap", test_appendBuildMap),
        ("test_appendBuildMap_extended", test_appendBuildMap_extended),
        ("test_appendBuildMapUnpack", test_appendBuildMapUnpack),
        ("test_appendBuildMapUnpack_extended", test_appendBuildMapUnpack_extended),
        ("test_appendBuildMapUnpackWithCall", test_appendBuildMapUnpackWithCall),
        ("test_appendBuildMapUnpackWithCall_extended", test_appendBuildMapUnpackWithCall_extended),
        ("test_appendBuildSet", test_appendBuildSet),
        ("test_appendBuildSet_extended", test_appendBuildSet_extended),
        ("test_appendBuildSetUnpack", test_appendBuildSetUnpack),
        ("test_appendBuildSetUnpack_extended", test_appendBuildSetUnpack_extended),
        ("test_appendBuildTuple", test_appendBuildTuple),
        ("test_appendBuildTuple_extended", test_appendBuildTuple_extended),
        ("test_appendBuildTuple_extended2", test_appendBuildTuple_extended2),
        ("test_appendBuildTuple_extended3", test_appendBuildTuple_extended3),
        ("test_appendBuildTupleUnpack", test_appendBuildTupleUnpack),
        ("test_appendBuildTupleUnpack_extended", test_appendBuildTupleUnpack_extended),
        ("test_appendBuildTupleUnpackWithCall", test_appendBuildTupleUnpackWithCall),
        ("test_appendBuildTupleUnpackWithCall_extended", test_appendBuildTupleUnpackWithCall_extended),
        ("test_appendListAppend", test_appendListAppend),
        ("test_appendListAppend_extended", test_appendListAppend_extended),
        ("test_appendMapAdd", test_appendMapAdd),
        ("test_appendMapAdd_extended", test_appendMapAdd_extended),
        ("test_appendSetAdd", test_appendSetAdd),
        ("test_appendSetAdd_extended", test_appendSetAdd_extended),
        ("test_appendUnpackEx", test_appendUnpackEx),
        ("test_appendUnpackEx_extended", test_appendUnpackEx_extended),
        ("test_appendUnpackSequence", test_appendUnpackSequence),
        ("test_appendUnpackSequence_extended", test_appendUnpackSequence_extended),
    ]
}

extension BuilderConstantsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderConstantsTests = [
        ("test_addConstant", test_addConstant),
        ("test_appendBytes", test_appendBytes),
        ("test_appendCode", test_appendCode),
        ("test_appendComplex", test_appendComplex),
        ("test_appendEllipsis", test_appendEllipsis),
        ("test_appendEllipsis_constantIndex_isReused", test_appendEllipsis_constantIndex_isReused),
        ("test_appendFalse", test_appendFalse),
        ("test_appendFalse_constantIndex_isReused", test_appendFalse_constantIndex_isReused),
        ("test_appendFloat", test_appendFloat),
        ("test_appendInteger_big", test_appendInteger_big),
        ("test_appendInteger_one_constantIndex_isReused", test_appendInteger_one_constantIndex_isReused),
        ("test_appendInteger_small", test_appendInteger_small),
        ("test_appendInteger_zero_constantIndex_isReused", test_appendInteger_zero_constantIndex_isReused),
        ("test_appendNone", test_appendNone),
        ("test_appendNone_constantIndex_isReused", test_appendNone_constantIndex_isReused),
        ("test_appendString", test_appendString),
        ("test_appendString_constantIndex_isReused", test_appendString_constantIndex_isReused),
        ("test_appendString_mangled", test_appendString_mangled),
        ("test_appendString_mangled_constantIndex_isReused", test_appendString_mangled_constantIndex_isReused),
        ("test_appendTrue", test_appendTrue),
        ("test_appendTrue_constantIndex_isReused", test_appendTrue_constantIndex_isReused),
        ("test_appendTuple", test_appendTuple),
        ("test_mixDifferentTypes_where_constantIndex_isReused", test_mixDifferentTypes_where_constantIndex_isReused),
    ]
}

extension BuilderConstantsUsesScalarsForStringsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderConstantsUsesScalarsForStringsTests = [
        ("test_string_usesScalars_toDifferentiateStrings", test_string_usesScalars_toDifferentiateStrings),
    ]
}

extension BuilderFunctionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderFunctionTests = [
        ("test_appendCallFunction", test_appendCallFunction),
        ("test_appendCallFunction_extended", test_appendCallFunction_extended),
        ("test_appendCallFunctionEx_no", test_appendCallFunctionEx_no),
        ("test_appendCallFunctionKw", test_appendCallFunctionKw),
        ("test_appendCallFunctionKw_extended", test_appendCallFunctionKw_extended),
        ("test_appendCallMethod", test_appendCallMethod),
        ("test_appendCallMethod_extended", test_appendCallMethod_extended),
        ("test_appendLoadMethod", test_appendLoadMethod),
        ("test_appendLoadMethod_nameIsReused", test_appendLoadMethod_nameIsReused),
        ("test_appendMakeFunction_allFlags", test_appendMakeFunction_allFlags),
        ("test_appendMakeFunction_noFlags", test_appendMakeFunction_noFlags),
        ("test_appendReturn", test_appendReturn),
    ]
}

extension BuilderGeneralTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderGeneralTests = [
        ("test_appendBuildSlice", test_appendBuildSlice),
        ("test_appendDupTop", test_appendDupTop),
        ("test_appendDupTopTwo", test_appendDupTopTwo),
        ("test_appendExtendedArg", test_appendExtendedArg),
        ("test_appendExtendedArg_multipleInRow", test_appendExtendedArg_multipleInRow),
        ("test_appendNop", test_appendNop),
        ("test_appendPopBlock", test_appendPopBlock),
        ("test_appendPopTop", test_appendPopTop),
        ("test_appendPrintExpr", test_appendPrintExpr),
        ("test_appendRotThree", test_appendRotThree),
        ("test_appendRotTwo", test_appendRotTwo),
        ("test_appendSetupAnnotations", test_appendSetupAnnotations),
    ]
}

extension BuilderGeneratorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderGeneratorTests = [
        ("test_appendGetAIter", test_appendGetAIter),
        ("test_appendGetANext", test_appendGetANext),
        ("test_appendGetAwaitable", test_appendGetAwaitable),
        ("test_appendYieldFrom", test_appendYieldFrom),
        ("test_appendYieldValue", test_appendYieldValue),
    ]
}

extension BuilderImportTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderImportTests = [
        ("test_appendImportFrom", test_appendImportFrom),
        ("test_appendImportFrom_nameIsReused", test_appendImportFrom_nameIsReused),
        ("test_appendImportName", test_appendImportName),
        ("test_appendImportName_nameIsReused", test_appendImportName_nameIsReused),
        ("test_appendImportStar", test_appendImportStar),
    ]
}

extension BuilderJumpTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderJumpTests = [
        ("test_appendJumpAbsolute", test_appendJumpAbsolute),
        ("test_appendJumpAbsolute_extended", test_appendJumpAbsolute_extended),
        ("test_appendJumpIfFalseOrPop", test_appendJumpIfFalseOrPop),
        ("test_appendJumpIfFalseOrPop_extended", test_appendJumpIfFalseOrPop_extended),
        ("test_appendJumpIfTrueOrPop", test_appendJumpIfTrueOrPop),
        ("test_appendJumpIfTrueOrPop_extended", test_appendJumpIfTrueOrPop_extended),
        ("test_appendPopJumpIfFalse", test_appendPopJumpIfFalse),
        ("test_appendPopJumpIfFalse_extended", test_appendPopJumpIfFalse_extended),
        ("test_appendPopJumpIfTrue", test_appendPopJumpIfTrue),
        ("test_appendPopJumpIfTrue_extended", test_appendPopJumpIfTrue_extended),
    ]
}

extension BuilderLoadStoreDeleteAttributeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderLoadStoreDeleteAttributeTests = [
        ("test_appendDeleteAttribute", test_appendDeleteAttribute),
        ("test_appendDeleteAttribute_isReused", test_appendDeleteAttribute_isReused),
        ("test_appendDeleteAttribute_mangled", test_appendDeleteAttribute_mangled),
        ("test_appendDeleteAttribute_mangled_isReused", test_appendDeleteAttribute_mangled_isReused),
        ("test_appendLoadAttribute", test_appendLoadAttribute),
        ("test_appendLoadAttribute_isReused", test_appendLoadAttribute_isReused),
        ("test_appendLoadAttribute_mangled", test_appendLoadAttribute_mangled),
        ("test_appendLoadAttribute_mangled_isReused", test_appendLoadAttribute_mangled_isReused),
        ("test_appendStoreAttribute", test_appendStoreAttribute),
        ("test_appendStoreAttribute_isReused", test_appendStoreAttribute_isReused),
        ("test_appendStoreAttribute_mangled", test_appendStoreAttribute_mangled),
        ("test_appendStoreAttribute_mangled_isReused", test_appendStoreAttribute_mangled_isReused),
    ]
}

extension BuilderLoadStoreDeleteCellTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderLoadStoreDeleteCellTests = [
        ("test_appendDelete_mangled", test_appendDelete_mangled),
        ("test_appendDelete_mangled_isReused", test_appendDelete_mangled_isReused),
        ("test_appendLoad_mangled", test_appendLoad_mangled),
        ("test_appendLoad_mangled_isReused", test_appendLoad_mangled_isReused),
        ("test_appendStore_mangled", test_appendStore_mangled),
        ("test_appendStore_mangled_isReused", test_appendStore_mangled_isReused),
    ]
}

extension BuilderLoadStoreDeleteClosureTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderLoadStoreDeleteClosureTests = [
        ("test_appendLoadClosureCell_mangled", test_appendLoadClosureCell_mangled),
        ("test_appendLoadClosureCell_mangled_isReused", test_appendLoadClosureCell_mangled_isReused),
        ("test_appendLoadClosureFree_mangled", test_appendLoadClosureFree_mangled),
        ("test_appendLoadClosureFree_mangled_isReused", test_appendLoadClosureFree_mangled_isReused),
    ]
}

extension BuilderLoadStoreDeleteFastTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderLoadStoreDeleteFastTests = [
        ("test_appendDeleteFast_mangled", test_appendDeleteFast_mangled),
        ("test_appendDeleteFast_mangled_isReused", test_appendDeleteFast_mangled_isReused),
        ("test_appendLoadFast_mangled", test_appendLoadFast_mangled),
        ("test_appendLoadFast_mangled_isReused", test_appendLoadFast_mangled_isReused),
        ("test_appendStoreFast_mangled", test_appendStoreFast_mangled),
        ("test_appendStoreFast_mangled_isReused", test_appendStoreFast_mangled_isReused),
    ]
}

extension BuilderLoadStoreDeleteFreeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderLoadStoreDeleteFreeTests = [
        ("test_appendDelete_mangled", test_appendDelete_mangled),
        ("test_appendDelete_mangled_isReused", test_appendDelete_mangled_isReused),
        ("test_appendLoad_mangled", test_appendLoad_mangled),
        ("test_appendLoad_mangled_isReused", test_appendLoad_mangled_isReused),
        ("test_appendLoadClassFree_mangled", test_appendLoadClassFree_mangled),
        ("test_appendLoadClassFree_mangled_isReused", test_appendLoadClassFree_mangled_isReused),
        ("test_appendStore_mangled", test_appendStore_mangled),
        ("test_appendStore_mangled_isReused", test_appendStore_mangled_isReused),
    ]
}

extension BuilderLoadStoreDeleteGlobalTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderLoadStoreDeleteGlobalTests = [
        ("test_appendDeleteGlobal", test_appendDeleteGlobal),
        ("test_appendDeleteGlobal_isReused", test_appendDeleteGlobal_isReused),
        ("test_appendDeleteGlobal_mangled", test_appendDeleteGlobal_mangled),
        ("test_appendDeleteGlobal_mangled_isReused", test_appendDeleteGlobal_mangled_isReused),
        ("test_appendLoadGlobal", test_appendLoadGlobal),
        ("test_appendLoadGlobal_isReused", test_appendLoadGlobal_isReused),
        ("test_appendLoadGlobal_mangled", test_appendLoadGlobal_mangled),
        ("test_appendLoadGlobal_mangled_isReused", test_appendLoadGlobal_mangled_isReused),
        ("test_appendStoreGlobal", test_appendStoreGlobal),
        ("test_appendStoreGlobal_isReused", test_appendStoreGlobal_isReused),
        ("test_appendStoreGlobal_mangled", test_appendStoreGlobal_mangled),
        ("test_appendStoreGlobal_mangled_isReused", test_appendStoreGlobal_mangled_isReused),
    ]
}

extension BuilderLoadStoreDeleteNameTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderLoadStoreDeleteNameTests = [
        ("test_appendDeleteName", test_appendDeleteName),
        ("test_appendDeleteName_isReused", test_appendDeleteName_isReused),
        ("test_appendDeleteName_mangled", test_appendDeleteName_mangled),
        ("test_appendDeleteName_mangled_isReused", test_appendDeleteName_mangled_isReused),
        ("test_appendLoadName", test_appendLoadName),
        ("test_appendLoadName_isReused", test_appendLoadName_isReused),
        ("test_appendLoadName_mangled", test_appendLoadName_mangled),
        ("test_appendLoadName_mangled_isReused", test_appendLoadName_mangled_isReused),
        ("test_appendStoreName", test_appendStoreName),
        ("test_appendStoreName_isReused", test_appendStoreName_isReused),
        ("test_appendStoreName_mangled", test_appendStoreName_mangled),
        ("test_appendStoreName_mangled_isReused", test_appendStoreName_mangled_isReused),
    ]
}

extension BuilderLoadStoreDeleteSubscriptTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderLoadStoreDeleteSubscriptTests = [
        ("test_appendBinarySubscript", test_appendBinarySubscript),
        ("test_appendDeleteSubscript", test_appendDeleteSubscript),
        ("test_appendStoreSubscript", test_appendStoreSubscript),
    ]
}

extension BuilderLoopTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderLoopTests = [
        ("test_appendBreak", test_appendBreak),
        ("test_appendContinue", test_appendContinue),
        ("test_appendContinue_extended", test_appendContinue_extended),
        ("test_appendForIter", test_appendForIter),
        ("test_appendForIter_extended", test_appendForIter_extended),
        ("test_appendGetIter", test_appendGetIter),
        ("test_appendSetupLoop", test_appendSetupLoop),
        ("test_appendSetupLoop_extended", test_appendSetupLoop_extended),
        ("test_GetYieldFromIter", test_GetYieldFromIter),
    ]
}

extension BuilderOperationsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderOperationsTests = [
        ("test_appendBinaryAdd", test_appendBinaryAdd),
        ("test_appendBinaryAnd", test_appendBinaryAnd),
        ("test_appendBinaryFloorDivide", test_appendBinaryFloorDivide),
        ("test_appendBinaryLShift", test_appendBinaryLShift),
        ("test_appendBinaryMatrixMultiply", test_appendBinaryMatrixMultiply),
        ("test_appendBinaryModulo", test_appendBinaryModulo),
        ("test_appendBinaryMultiply", test_appendBinaryMultiply),
        ("test_appendBinaryOr", test_appendBinaryOr),
        ("test_appendBinaryPower", test_appendBinaryPower),
        ("test_appendBinaryRShift", test_appendBinaryRShift),
        ("test_appendBinarySubtract", test_appendBinarySubtract),
        ("test_appendBinaryTrueDivide", test_appendBinaryTrueDivide),
        ("test_appendBinaryXor", test_appendBinaryXor),
        ("test_appendCompareOp", test_appendCompareOp),
        ("test_appendInPlaceAdd", test_appendInPlaceAdd),
        ("test_appendInPlaceAnd", test_appendInPlaceAnd),
        ("test_appendInPlaceFloorDivide", test_appendInPlaceFloorDivide),
        ("test_appendInPlaceLShift", test_appendInPlaceLShift),
        ("test_appendInPlaceMatrixMultiply", test_appendInPlaceMatrixMultiply),
        ("test_appendInPlaceModulo", test_appendInPlaceModulo),
        ("test_appendInPlaceMultiply", test_appendInPlaceMultiply),
        ("test_appendInPlaceOr", test_appendInPlaceOr),
        ("test_appendInPlacePower", test_appendInPlacePower),
        ("test_appendInPlaceRShift", test_appendInPlaceRShift),
        ("test_appendInPlaceSubtract", test_appendInPlaceSubtract),
        ("test_appendInPlaceTrueDivide", test_appendInPlaceTrueDivide),
        ("test_appendInPlaceXor", test_appendInPlaceXor),
        ("test_appendUnaryInvert", test_appendUnaryInvert),
        ("test_appendUnaryNegative", test_appendUnaryNegative),
        ("test_appendUnaryNot", test_appendUnaryNot),
        ("test_appendUnaryPositive", test_appendUnaryPositive),
    ]
}

extension BuilderStringTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderStringTests = [
        ("test_appendBuildString", test_appendBuildString),
        ("test_appendBuildString_extended", test_appendBuildString_extended),
        ("test_appendBuildString_extended2", test_appendBuildString_extended2),
        ("test_appendBuildString_extended3", test_appendBuildString_extended3),
        ("test_appendFormatValue", test_appendFormatValue),
    ]
}

extension BuilderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderTests = [
        ("test_createLabel_setLabel", test_createLabel_setLabel),
        ("test_names_forAsyncFunction", test_names_forAsyncFunction),
        ("test_names_forClass", test_names_forClass),
        ("test_names_forComprehension", test_names_forComprehension),
        ("test_names_forFunction", test_names_forFunction),
        ("test_names_forLambda", test_names_forLambda),
        ("test_names_forModule", test_names_forModule),
        ("test_property_argCount", test_property_argCount),
        ("test_property_firsLine", test_property_firsLine),
        ("test_property_flags", test_property_flags),
        ("test_property_variableNames", test_property_variableNames),
        ("test_setAppendLocation", test_setAppendLocation),
    ]
}

extension BuilderTryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderTryTests = [
        ("test_appendEndFinally", test_appendEndFinally),
        ("test_appendPopExcept", test_appendPopExcept),
        ("test_appendRaiseVarargs", test_appendRaiseVarargs),
        ("test_appendSetupExcept", test_appendSetupExcept),
        ("test_appendSetupExcept_extended", test_appendSetupExcept_extended),
        ("test_appendSetupFinally", test_appendSetupFinally),
        ("test_appendSetupFinally_extended", test_appendSetupFinally_extended),
    ]
}

extension BuilderWithTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BuilderWithTests = [
        ("test_appendBeforeAsyncWith", test_appendBeforeAsyncWith),
        ("test_appendSetupAsyncWith", test_appendSetupAsyncWith),
        ("test_appendSetupWith", test_appendSetupWith),
        ("test_appendWithCleanupFinish", test_appendWithCleanupFinish),
        ("test_appendWithCleanupStart", test_appendWithCleanupStart),
    ]
}

extension CodeObjectDescriptionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CodeObjectDescriptionTests = [
        ("test_noInstructions", test_noInstructions),
        ("test_withInstructions", test_withInstructions),
    ]
}

extension CodeObjectFilledInstructionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CodeObjectFilledInstructionTests = [
        ("test_binary", test_binary),
        ("test_class", test_class),
        ("test_collections", test_collections),
        ("test_compare", test_compare),
        ("test_coroutines", test_coroutines),
        ("test_function", test_function),
        ("test_general", test_general),
        ("test_generators", test_generators),
        ("test_import", test_import),
        ("test_inPlace", test_inPlace),
        ("test_isOurMangledNameCorrect", test_isOurMangledNameCorrect),
        ("test_jumps", test_jumps),
        ("test_loops", test_loops),
        ("test_other", test_other),
        ("test_print", test_print),
        ("test_storeLoadDelete_attribute", test_storeLoadDelete_attribute),
        ("test_storeLoadDelete_cell", test_storeLoadDelete_cell),
        ("test_storeLoadDelete_constant", test_storeLoadDelete_constant),
        ("test_storeLoadDelete_fast", test_storeLoadDelete_fast),
        ("test_storeLoadDelete_free", test_storeLoadDelete_free),
        ("test_storeLoadDelete_global", test_storeLoadDelete_global),
        ("test_storeLoadDelete_name", test_storeLoadDelete_name),
        ("test_storeLoadDelete_subscript", test_storeLoadDelete_subscript),
        ("test_string", test_string),
        ("test_try_catch", test_try_catch),
        ("test_unary", test_unary),
        ("test_unpack", test_unpack),
        ("test_with", test_with),
    ]
}

extension InstructionDescriptionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__InstructionDescriptionTests = [
        ("test_binary", test_binary),
        ("test_class", test_class),
        ("test_collections", test_collections),
        ("test_compare", test_compare),
        ("test_coroutines", test_coroutines),
        ("test_extended", test_extended),
        ("test_function", test_function),
        ("test_general", test_general),
        ("test_generators", test_generators),
        ("test_import", test_import),
        ("test_inPlace", test_inPlace),
        ("test_jumps", test_jumps),
        ("test_loops", test_loops),
        ("test_other", test_other),
        ("test_print", test_print),
        ("test_storeLoadDelete_attribute", test_storeLoadDelete_attribute),
        ("test_storeLoadDelete_cell", test_storeLoadDelete_cell),
        ("test_storeLoadDelete_constant", test_storeLoadDelete_constant),
        ("test_storeLoadDelete_fast", test_storeLoadDelete_fast),
        ("test_storeLoadDelete_free", test_storeLoadDelete_free),
        ("test_storeLoadDelete_global", test_storeLoadDelete_global),
        ("test_storeLoadDelete_name", test_storeLoadDelete_name),
        ("test_storeLoadDelete_subscript", test_storeLoadDelete_subscript),
        ("test_string", test_string),
        ("test_try_catch", test_try_catch),
        ("test_unary", test_unary),
        ("test_unpack", test_unpack),
        ("test_with", test_with),
    ]
}

extension InstructionFilledDescriptionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__InstructionFilledDescriptionTests = [
        ("test_binary", test_binary),
        ("test_class", test_class),
        ("test_collections", test_collections),
        ("test_compare", test_compare),
        ("test_coroutines", test_coroutines),
        ("test_function", test_function),
        ("test_general", test_general),
        ("test_generators", test_generators),
        ("test_import", test_import),
        ("test_inPlace", test_inPlace),
        ("test_isOurMangledNameCorrect", test_isOurMangledNameCorrect),
        ("test_jumps", test_jumps),
        ("test_other", test_other),
        ("test_print", test_print),
        ("test_storeLoadDelete_attribute", test_storeLoadDelete_attribute),
        ("test_storeLoadDelete_cell", test_storeLoadDelete_cell),
        ("test_storeLoadDelete_constant", test_storeLoadDelete_constant),
        ("test_storeLoadDelete_fast", test_storeLoadDelete_fast),
        ("test_storeLoadDelete_free", test_storeLoadDelete_free),
        ("test_storeLoadDelete_global", test_storeLoadDelete_global),
        ("test_storeLoadDelete_name", test_storeLoadDelete_name),
        ("test_storeLoadDelete_subscript", test_storeLoadDelete_subscript),
        ("test_string", test_string),
        ("test_try_catch", test_try_catch),
        ("test_unary", test_unary),
        ("test_unpack", test_unpack),
        ("test_with", test_with),
    ]
}

extension InstructionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__InstructionTests = [
        ("test_extend", test_extend),
        ("test_functionFlags_areUnique", test_functionFlags_areUnique),
        ("test_unpackExArg_isReversible", test_unpackExArg_isReversible),
    ]
}

extension MangledNameTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MangledNameTests = [
        ("test_init_withClass_isMangled", test_init_withClass_isMangled),
        ("test_init_withClass_nameWithDotInside_isNotMangled", test_init_withClass_nameWithDotInside_isNotMangled),
        ("test_init_withClass_nameWithDoubleUnderscoreSuffix_isNotMangled", test_init_withClass_nameWithDoubleUnderscoreSuffix_isNotMangled),
        ("test_init_withClass_nameWithoutDoubleUnderscorePrefix_isNotMangled", test_init_withClass_nameWithoutDoubleUnderscorePrefix_isNotMangled),
        ("test_init_withClass_nil", test_init_withClass_nil),
        ("test_init_withClass_withLeadingUnderscores_isStripped_andMangled", test_init_withClass_withLeadingUnderscores_isStripped_andMangled),
        ("test_init_withoutClass", test_init_withoutClass),
    ]
}

extension PeepholeBuildTupleConstantTupleTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PeepholeBuildTupleConstantTupleTests = [
        ("test_count0", test_count0),
        ("test_count1", test_count1),
        ("test_count1_differentConstantTypes", test_count1_differentConstantTypes),
        ("test_count1_lastInstruction", test_count1_lastInstruction),
        ("test_count1_thatRequiresDoubleExtended_whenThereIsNoSpace_fails", test_count1_thatRequiresDoubleExtended_whenThereIsNoSpace_fails),
        ("test_count2", test_count2),
        ("test_count256_createsExtendedLoadConst", test_count256_createsExtendedLoadConst),
        ("test_count257_extendedConstant_createsExtendedLoadConst", test_count257_extendedConstant_createsExtendedLoadConst),
        ("test_ignoresNop", test_ignoresNop),
    ]
}

extension PeepholeBuildTupleTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PeepholeBuildTupleTests = [
        ("test_loadName_buildTuple_return_doesNothing", test_loadName_buildTuple_return_doesNothing),
        ("test_removesNops", test_removesNops),
    ]
}

extension PeepholeBuildTupleUnpackSequenceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PeepholeBuildTupleUnpackSequenceTests = [
        ("test_count0_justLoadsConstants", test_count0_justLoadsConstants),
        ("test_count1_justLoadsConstants", test_count1_justLoadsConstants),
        ("test_count256_doesNothing", test_count256_doesNothing),
        ("test_count2_justLoadsConstants", test_count2_justLoadsConstants),
        ("test_count3_justLoadsConstants", test_count3_justLoadsConstants),
        ("test_count4_doesNothing", test_count4_doesNothing),
        ("test_tupleCount3_sequenceCount4_doesNothing", test_tupleCount3_sequenceCount4_doesNothing),
        ("test_tupleCount4_sequenceCount3_doesNothing", test_tupleCount4_sequenceCount3_doesNothing),
    ]
}

extension PeepholeInstructionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PeepholeInstructionTests = [
        ("test_initStartIndex_1extendedArg_works", test_initStartIndex_1extendedArg_works),
        ("test_initStartIndex_2extendedArg_startIndexAt1_works", test_initStartIndex_2extendedArg_startIndexAt1_works),
        ("test_initStartIndex_2extendedArg_works", test_initStartIndex_2extendedArg_works),
        ("test_initStartIndex_3extendedArg_works", test_initStartIndex_3extendedArg_works),
        ("test_initStartIndex_first_works", test_initStartIndex_first_works),
        ("test_initStartIndex_indexAfterEndIndex_returnsNil", test_initStartIndex_indexAfterEndIndex_returnsNil),
        ("test_initStartIndex_indexBeforeStartIndex_returnsNil", test_initStartIndex_indexBeforeStartIndex_returnsNil),
        ("test_initStartIndex_last_works", test_initStartIndex_last_works),
        ("test_initStartIndex_middle_works", test_initStartIndex_middle_works),
        ("test_initUnalignedIndex_2extendedArg_indexAtExtended1_works", test_initUnalignedIndex_2extendedArg_indexAtExtended1_works),
        ("test_initUnalignedIndex_2extendedArg_indexAtExtended2_works", test_initUnalignedIndex_2extendedArg_indexAtExtended2_works),
        ("test_initUnalignedIndex_2extendedArg_indexAtValue_works", test_initUnalignedIndex_2extendedArg_indexAtValue_works),
        ("test_initUnalignedIndex_first_works", test_initUnalignedIndex_first_works),
        ("test_initUnalignedIndex_last_works", test_initUnalignedIndex_last_works),
    ]
}

extension PeepholeJumpIfOrPopConditionalJumpTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PeepholeJumpIfOrPopConditionalJumpTests = [
        ("test_ifFalse_jumpIfFalseOrPop_isRedirected", test_ifFalse_jumpIfFalseOrPop_isRedirected),
        ("test_ifFalse_jumpIfTrueOrPop_addsNewLabel_justAfterPopJumpIf", test_ifFalse_jumpIfTrueOrPop_addsNewLabel_justAfterPopJumpIf),
        ("test_ifFalse_popJumpIfFalse_isRedirected", test_ifFalse_popJumpIfFalse_isRedirected),
        ("test_ifFalse_popJumpIfTrue_addsNewLabel_justAfterPopJumpIf", test_ifFalse_popJumpIfTrue_addsNewLabel_justAfterPopJumpIf),
        ("test_ifTrue_jumpIfFalseOrPop_addsNewLabel_justAfterPopJumpIf", test_ifTrue_jumpIfFalseOrPop_addsNewLabel_justAfterPopJumpIf),
        ("test_ifTrue_jumpIfFalseOrPop_popJumpIfFalse_isRedirected", test_ifTrue_jumpIfFalseOrPop_popJumpIfFalse_isRedirected),
        ("test_ifTrue_jumpIfFalseOrPop_popJumpIfTrue_isRedirected", test_ifTrue_jumpIfFalseOrPop_popJumpIfTrue_isRedirected),
        ("test_ifTrue_jumpIfTrueOrPop_isRedirected", test_ifTrue_jumpIfTrueOrPop_isRedirected),
        ("test_ifTrue_jumpIfTrueOrPop_jumpIfTrueOrPop_isRedirected", test_ifTrue_jumpIfTrueOrPop_jumpIfTrueOrPop_isRedirected),
        ("test_ifTrue_jumpIfTrueOrPop_notEnoughSpace_doesNothing", test_ifTrue_jumpIfTrueOrPop_notEnoughSpace_doesNothing),
        ("test_ifTrue_jumpIfTrueOrPop_popJumpIfFalse_isRedirected", test_ifTrue_jumpIfTrueOrPop_popJumpIfFalse_isRedirected),
        ("test_ifTrue_jumpIfTrueOrPop_tooMuchSpace_addNops", test_ifTrue_jumpIfTrueOrPop_tooMuchSpace_addNops),
        ("test_ifTrue_popJumpIfFalse_addsNewLabel_justAfterPopJumpIf", test_ifTrue_popJumpIfFalse_addsNewLabel_justAfterPopJumpIf),
        ("test_ifTrue_popJumpIfTrue_isRedirected", test_ifTrue_popJumpIfTrue_isRedirected),
    ]
}

extension PeepholeJumpIfOrPopTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PeepholeJumpIfOrPopTests = [
        ("test_continue_removesNops", test_continue_removesNops),
        ("test_forIter_removesNops", test_forIter_removesNops),
        ("test_jumpAbsolute_removesNops", test_jumpAbsolute_removesNops),
        ("test_jumpIfFalseOrPop_removesNops", test_jumpIfFalseOrPop_removesNops),
        ("test_jumpIfTrueOrPop_removesNops", test_jumpIfTrueOrPop_removesNops),
        ("test_popJumpIfFalse_removesNops", test_popJumpIfFalse_removesNops),
        ("test_popJumpIfTrue_removesNops", test_popJumpIfTrue_removesNops),
        ("test_setupExcept_removesNops", test_setupExcept_removesNops),
        ("test_setupFinally_removesNops", test_setupFinally_removesNops),
        ("test_setupLoop_removesNops", test_setupLoop_removesNops),
        ("test_setupWith_removesNops", test_setupWith_removesNops),
    ]
}

extension PeepholeJumpJumpToAbsoluteJumpTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PeepholeJumpJumpToAbsoluteJumpTests = [
        ("test_continue_toJumpAbsolute_makesSingleJump", test_continue_toJumpAbsolute_makesSingleJump),
        ("test_forIter_toJumpAbsolute_makesSingleJump", test_forIter_toJumpAbsolute_makesSingleJump),
        ("test_jumpAbsolute_toJumpAbsolute_makesSingleJump", test_jumpAbsolute_toJumpAbsolute_makesSingleJump),
        ("test_jumpIfFalseOrPop_toJumpAbsolute_makesSingleJump", test_jumpIfFalseOrPop_toJumpAbsolute_makesSingleJump),
        ("test_jumpIfTrueOrPop_toJumpAbsolute_makesSingleJump", test_jumpIfTrueOrPop_toJumpAbsolute_makesSingleJump),
        ("test_popJumpIfFalse_toJumpAbsolute_makesSingleJump", test_popJumpIfFalse_toJumpAbsolute_makesSingleJump),
        ("test_popJumpIfTrue_toJumpAbsolute_makesSingleJump", test_popJumpIfTrue_toJumpAbsolute_makesSingleJump),
        ("test_setupExcept_toJumpAbsolute_makesSingleJump", test_setupExcept_toJumpAbsolute_makesSingleJump),
        ("test_setupFinally_toJumpAbsolute_makesSingleJump", test_setupFinally_toJumpAbsolute_makesSingleJump),
        ("test_setupLoop_toJumpAbsolute_makesSingleJump", test_setupLoop_toJumpAbsolute_makesSingleJump),
        ("test_setupWith_toJumpAbsolute_makesSingleJump", test_setupWith_toJumpAbsolute_makesSingleJump),
    ]
}

extension PeepholeJumpJumpToReturnTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PeepholeJumpJumpToReturnTests = [
        ("test_continue_toReturn_doesNothing", test_continue_toReturn_doesNothing),
        ("test_forIter_toReturn_doesNothing", test_forIter_toReturn_doesNothing),
        ("test_jumpAbsolute_toReturn_justReturns", test_jumpAbsolute_toReturn_justReturns),
        ("test_jumpIfFalseOrPop_toReturn_doesNothing", test_jumpIfFalseOrPop_toReturn_doesNothing),
        ("test_jumpIfTrueOrPop_toReturn_justReturns", test_jumpIfTrueOrPop_toReturn_justReturns),
        ("test_popJumpIfFalse_toReturn_doesNothing", test_popJumpIfFalse_toReturn_doesNothing),
        ("test_popJumpIfTrue_toReturn_doesNothing", test_popJumpIfTrue_toReturn_doesNothing),
        ("test_setupExcept_toReturn_doesNothing", test_setupExcept_toReturn_doesNothing),
        ("test_setupFinally_toReturn_doesNothing", test_setupFinally_toReturn_doesNothing),
        ("test_setupLoop_toReturn_doesNothing", test_setupLoop_toReturn_doesNothing),
        ("test_setupWith_toReturn_doesNothing", test_setupWith_toReturn_doesNothing),
    ]
}

extension PeepholeJumpTableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PeepholeJumpTableTests = [
        ("test_hasJumpTargetBetween_equalIndices_returnsFalse", test_hasJumpTargetBetween_equalIndices_returnsFalse),
        ("test_hasJumpTargetBetween_insideSinglePartition_returnsFalse", test_hasJumpTargetBetween_insideSinglePartition_returnsFalse),
        ("test_hasJumpTargetBetween_noJumps_returnsFalse", test_hasJumpTargetBetween_noJumps_returnsFalse),
        ("test_hasJumpTargetBetween_withJumps_returnsTrue", test_hasJumpTargetBetween_withJumps_returnsTrue),
    ]
}

extension PeepholeLoadConstPopJumpIfTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PeepholeLoadConstPopJumpIfTests = [
        ("test_ifFalse_extended_onTrueConstant_removesCheck", test_ifFalse_extended_onTrueConstant_removesCheck),
        ("test_ifFalse_onExtendedTrueConstant_removesCheck", test_ifFalse_onExtendedTrueConstant_removesCheck),
        ("test_ifFalse_onFalseConstant_doesNothing", test_ifFalse_onFalseConstant_doesNothing),
        ("test_ifFalse_onTrueConstant_removesCheck", test_ifFalse_onTrueConstant_removesCheck),
        ("test_ifTrue_extended_onFalseConstant_removesCheck", test_ifTrue_extended_onFalseConstant_removesCheck),
        ("test_ifTrue_onExtendedFalseConstant_removesCheck", test_ifTrue_onExtendedFalseConstant_removesCheck),
        ("test_ifTrue_onFalseConstant_removesCheck", test_ifTrue_onFalseConstant_removesCheck),
        ("test_ifTrue_onTrueConstant_doesNothing", test_ifTrue_onTrueConstant_doesNothing),
    ]
}

extension PeepholeLoadConstTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PeepholeLoadConstTests = [
        ("test_loadConst_return_doesNothing", test_loadConst_return_doesNothing),
        ("test_removesNops", test_removesNops),
    ]
}

extension PeepholeReturnTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PeepholeReturnTests = [
        ("test_ifValue0_returnValue1_else_returnValue2_removesInstructionsAfter", test_ifValue0_returnValue1_else_returnValue2_removesInstructionsAfter),
        ("test_removesNops", test_removesNops),
        ("test_return_nothingAfter_doesNothing", test_return_nothingAfter_doesNothing),
        ("test_returnNone_nothingAfter_doesNothing", test_returnNone_nothingAfter_doesNothing),
        ("test_returnNone_removesInstructionsAfter", test_returnNone_removesInstructionsAfter),
    ]
}

extension PeepholeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PeepholeTests = [
        ("test_extendedArg1_withoutInstructions_generatesNoCode", test_extendedArg1_withoutInstructions_generatesNoCode),
        ("test_extendedArg2_withoutInstructions_generatesNoCode", test_extendedArg2_withoutInstructions_generatesNoCode),
        ("test_extendedArg3_withoutInstructions_generatesNoCode", test_extendedArg3_withoutInstructions_generatesNoCode),
        ("test_noInstructions_doNotCrash", test_noInstructions_doNotCrash),
        ("test_onlyNop_producesEmpty", test_onlyNop_producesEmpty),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(BuilderClassTests.__allTests__BuilderClassTests),
        testCase(BuilderCollectionTests.__allTests__BuilderCollectionTests),
        testCase(BuilderConstantsTests.__allTests__BuilderConstantsTests),
        testCase(BuilderConstantsUsesScalarsForStringsTests.__allTests__BuilderConstantsUsesScalarsForStringsTests),
        testCase(BuilderFunctionTests.__allTests__BuilderFunctionTests),
        testCase(BuilderGeneralTests.__allTests__BuilderGeneralTests),
        testCase(BuilderGeneratorTests.__allTests__BuilderGeneratorTests),
        testCase(BuilderImportTests.__allTests__BuilderImportTests),
        testCase(BuilderJumpTests.__allTests__BuilderJumpTests),
        testCase(BuilderLoadStoreDeleteAttributeTests.__allTests__BuilderLoadStoreDeleteAttributeTests),
        testCase(BuilderLoadStoreDeleteCellTests.__allTests__BuilderLoadStoreDeleteCellTests),
        testCase(BuilderLoadStoreDeleteClosureTests.__allTests__BuilderLoadStoreDeleteClosureTests),
        testCase(BuilderLoadStoreDeleteFastTests.__allTests__BuilderLoadStoreDeleteFastTests),
        testCase(BuilderLoadStoreDeleteFreeTests.__allTests__BuilderLoadStoreDeleteFreeTests),
        testCase(BuilderLoadStoreDeleteGlobalTests.__allTests__BuilderLoadStoreDeleteGlobalTests),
        testCase(BuilderLoadStoreDeleteNameTests.__allTests__BuilderLoadStoreDeleteNameTests),
        testCase(BuilderLoadStoreDeleteSubscriptTests.__allTests__BuilderLoadStoreDeleteSubscriptTests),
        testCase(BuilderLoopTests.__allTests__BuilderLoopTests),
        testCase(BuilderOperationsTests.__allTests__BuilderOperationsTests),
        testCase(BuilderStringTests.__allTests__BuilderStringTests),
        testCase(BuilderTests.__allTests__BuilderTests),
        testCase(BuilderTryTests.__allTests__BuilderTryTests),
        testCase(BuilderWithTests.__allTests__BuilderWithTests),
        testCase(CodeObjectDescriptionTests.__allTests__CodeObjectDescriptionTests),
        testCase(CodeObjectFilledInstructionTests.__allTests__CodeObjectFilledInstructionTests),
        testCase(InstructionDescriptionTests.__allTests__InstructionDescriptionTests),
        testCase(InstructionFilledDescriptionTests.__allTests__InstructionFilledDescriptionTests),
        testCase(InstructionTests.__allTests__InstructionTests),
        testCase(MangledNameTests.__allTests__MangledNameTests),
        testCase(PeepholeBuildTupleConstantTupleTests.__allTests__PeepholeBuildTupleConstantTupleTests),
        testCase(PeepholeBuildTupleTests.__allTests__PeepholeBuildTupleTests),
        testCase(PeepholeBuildTupleUnpackSequenceTests.__allTests__PeepholeBuildTupleUnpackSequenceTests),
        testCase(PeepholeInstructionTests.__allTests__PeepholeInstructionTests),
        testCase(PeepholeJumpIfOrPopConditionalJumpTests.__allTests__PeepholeJumpIfOrPopConditionalJumpTests),
        testCase(PeepholeJumpIfOrPopTests.__allTests__PeepholeJumpIfOrPopTests),
        testCase(PeepholeJumpJumpToAbsoluteJumpTests.__allTests__PeepholeJumpJumpToAbsoluteJumpTests),
        testCase(PeepholeJumpJumpToReturnTests.__allTests__PeepholeJumpJumpToReturnTests),
        testCase(PeepholeJumpTableTests.__allTests__PeepholeJumpTableTests),
        testCase(PeepholeLoadConstPopJumpIfTests.__allTests__PeepholeLoadConstPopJumpIfTests),
        testCase(PeepholeLoadConstTests.__allTests__PeepholeLoadConstTests),
        testCase(PeepholeReturnTests.__allTests__PeepholeReturnTests),
        testCase(PeepholeTests.__allTests__PeepholeTests),
    ]
}
#endif
