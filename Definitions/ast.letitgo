{-
Most of the documentation was taken from:
https://greentreesnakes.readthedocs.io/en/latest/nodes.html
-}

{- less typing (also CPython used those and we are lazy) -}
@alias Identifier = String
@alias Loc = SourceLocation
@alias Stmt = Statement
@alias Expr = Expression
@alias NodeId = ASTNodeId

{- --------- -}
{- -- AST -- -}
{- --------- -}

-- Top (root) node in AST.
-- Represents the whole program.
--
-- See:
-- - [Official docs](https://docs.python.org/3/reference/index.html)
-- - [greentreesnakes](https://greentreesnakes.readthedocs.io/en/latest/nodes.html)
@class AST: ASTNode = (
  -- A unique node identifier.
  -- Mostly used for efficient Equatable/Hashable implementation.
  NodeId id,
  -- Location of the first character in the source code.
  Loc start,
  -- Location just after the last character in the source code.
  Loc end
)

-- Used for input in interactive mode (REPL).
--
-- `interactive_input ::= [stmt_list] NEWLINE | compound_stmt NEWLINE`
@class InteractiveAST: AST = (
  Stmt* statements
)

-- Used for all input read from non-interactive files.
--
-- For example:
-- - when parsing a complete Python program (from a file or from a string);
-- - when parsing a module;
-- - when parsing a string passed to the `exec()` function;\n
-- `file_input ::=  (NEWLINE | statement)*`
@class ModuleAST: AST = (
  Stmt* statements
)

-- Used for `eval()`.
-- It ignores leading whitespace.
-- `eval_input ::= expression_list NEWLINE*`
@class ExpressionAST: AST =(
  Expr expression
)

{- --------------- -}
{- -- Statement -- -}
{- --------------- -}

-- Syntactic unit that expresses some action to be carried out.
--
-- See:
-- - [Simple statement](https://docs.python.org/3/reference/simple_stmts.html)
-- - [Compound statement](https://docs.python.org/3/reference/compound_stmts.html)
@class Stmt: ASTNode = (
  -- A unique node identifier.
  -- Mostly used for efficient Equatable/Hashable implementation.
  NodeId id,
  -- Location of the first character in the source code.
  Loc start,
  -- Location just after the last character in the source code.
  Loc end
)

{- -------------- -}
{- -- Function -- -}
{- -------------- -}

-- A function definition.
@class FunctionDefStmt: Stmt = (
  -- `name` is a raw string of the function name.
  Identifier name,
  -- `args` is a arguments node.
  Arguments args,
  -- `body` is the list of nodes inside the function.
  Stmt+ body,
  -- `decorators` is the list of decorators to be applied,
  --  stored outermost first (i.e. the first in the list will be applied last).
  Expr* decorators,
  -- `returns` is the return annotation (the thing after '->').
  Expr? returns
)

-- An async def function definition.
@class AsyncFunctionDefStmt: Stmt = (
  -- `name` is a raw string of the function name.
  Identifier name,
  -- `args` is a arguments node.
  Arguments args,
  -- `body` is the list of nodes inside the function.
  Stmt+ body,
  -- `decorators` is the list of decorators to be applied,
  --  stored outermost first (i.e. the first in the list will be applied last).
  Expr* decorators,
  -- `returns` is the return annotation (the thing after '->').
  Expr? returns
)

{- ----------- -}
{- -- Class -- -}
{- ----------- -}

-- A class definition.
@class ClassDefStmt: Stmt = (
  -- `name` is a raw string for the class name
  Identifier name,
  -- `bases` is a list of nodes for explicitly specified base classes.
  Expr* bases,
  -- `keywords` is a list of keyword nodes, principally for ‘metaclass’.
  --  Other keywords will be passed to the metaclass, as per PEP-3115.
  -- `starargs` and kwargs are each a single node, as in a function call.
  --  starargs will be expanded to join the list of base classes,
  --  and kwargs will be passed to the metaclass.
  KeywordArgument* keywords,
  -- `body` is a list of nodes representing the code within the class definition.
  Stmt+ body,
  -- `decorators` is a list of nodes, as in `FunctionDef`.
  Expr* decorators
)

{- ------------------- -}
{- -- Return/Delete -- -}
{- ------------------- -}

-- A `return` statement.
@class ReturnStmt: Stmt = (Expr? value)
-- Represents a `del` statement.
@class DeleteStmt: Stmt = (
  -- Contains a list of nodes, such as Name, Attribute or Subscript nodes.
  Expr+ values
)

{- ------------ -}
{- -- Assign -- -}
{- ------------ -}

-- An assignment.
--
-- Multiple nodes in `targets` represents assigning the same value to each.
-- Unpacking is represented by putting a Tuple or List within targets.
@class AssignStmt: Stmt = (Expr+ targets, Expr value)
-- Augmented assignment, such as `a += 1`.
--
-- Target can be Name, Subscript or Attribute, but not a Tuple or List
-- (unlike the targets of `Assign`).
@class AugAssignStmt: Stmt = (
  Expr target,
  BinaryOpExpr.Operator op,
  Expr value
)
-- An assignment with a type annotation.
@class AnnAssignStmt: Stmt = (
  Expr target,
  Expr annotation,
  Expr? value,
  -- Indicates that `target` does not appear in between parenthesis
  -- (which excludes single element tuple) and is pure name and not expression
  -- (which excludes `tangled.rapunzel`).
  Bool isSimple
)

{- --------- -}
{- -- For -- -}
{- --------- -}

-- A `for` loop.
@class ForStmt: Stmt = (
  -- `target` holds the variable(s) the loop assigns to,
  -- as a single Name, Tuple or List node.
  Expr target,
  -- `iterable` holds the item to be looped over.
  Expr iterable,
  -- Lists of nodes to execute on each iteration.
  Stmt+ body,
  -- Lists of nodes to execute if the loop finishes normally,
  -- rather than via a break statement.
  Stmt* orElse
)
-- An `async for` definition.
@class AsyncForStmt: Stmt = (
  -- `target` holds the variable(s) the loop assigns to,
  -- as a single Name, Tuple or List node.
  Expr target,
  -- `iterable` holds the item to be looped over.
  Expr iterable,
  -- Lists of nodes to execute on each iteration.
  Stmt+ body,
  -- Lists of nodes to execute if the loop finishes normally,
  -- rather than via a break statement.
  Stmt* orElse
)

{- ----------- -}
{- -- While -- -}
{- ----------- -}

-- A `while` loop.
@class WhileStmt: Stmt = (
  -- Holds the condition, such as a Compare node.
  Expr test,
  -- Lists of nodes to execute on each iteration.
  Stmt+ body,
  -- Lists of nodes to execute if the loop finishes normally,
  -- rather than via a break statement.
  Stmt* orElse
)

{- -------- -}
{- -- If -- -}
{- -------- -}

-- An if statement.
--
-- - `elif` clauses don’t have a special representation in the AST,
-- but rather appear as extra `If` nodes within the `orElse` section
-- of the previous one.
@class IfStmt: Stmt = (
  -- Holds a single node, such as a Compare node.
  Expr test,
  -- Lists of nodes to execute if `self.test` is `True`.
  Stmt+ body,
  -- Lists of nodes to execute if `self.test` is `False`.
  Stmt* orElse
)

{- ---------- -}
{- -- With -- -}
{- ---------- -}

-- A single context manager in a `with` block.
@struct WithItem: ASTNode = (
  -- A unique node identifier.
  -- Mostly used for efficient Equatable/Hashable implementation.
  NodeId id,
  -- Context manager (often a Call node).
  Expr contextExpr,
  -- Name, Tuple or List for the `as foo` part, or `nil` if that isn’t used.
  Expr? optionalVars,
  -- Location of the first character in the source code.
  Loc start,
  -- Location just after the last character in the source code.
  Loc end
)

-- A `with` block.
@class WithStmt: Stmt = (
  -- List of `Withitem` nodes representing the context managers.
  WithItem+ items,
  -- Indented block inside the context.
  Stmt+ body
)

-- An `async with` definition.
@class AsyncWithStmt: Stmt = (
  -- List of `Withitem` nodes representing the context managers.
  WithItem+ items,
  -- Indented block inside the context.
  Stmt+ body
)

{- ---------------- -}
{- -- Exceptions -- -}
{- ---------------- -}

-- A single except clause.
@struct ExceptHandler: ASTNode = (
  -- A unique node identifier.
  -- Mostly used for efficient Equatable/Hashable implementation.
  NodeId id,
  -- Exception type it will match,  (or `.default` for a catch-all).
  ExceptHandler.Kind kind,
  -- List of handler nodes.
  Stmt+ body,
  -- Location of the first character in the source code.
  Loc start,
  -- Location just after the last character in the source code.
  Loc end
)

@enum ExceptHandler.Kind =
  -- Handler with type it will match, typically an `Identifier` node.
  Typed(Expr type, Identifier? asName)
  -- Catch-all handler.
  | Default

-- Raising an exception.
@class RaiseStmt: Stmt = (
  -- Object to be raised, normally a `Call` or `Name` or `None` for a standalone raise.
  Expr? exception,
  -- Optional part for `y in raise x from y`.
  Expr? cause
)
-- `try` block.
--
-- All attributes are list of nodes to execute, except for handlers,
-- which is a list of ExceptHandler nodes.
@class TryStmt: Stmt = (
  Stmt+ body,
  ExceptHandler* handlers,
  Stmt* orElse,
  Stmt* finally
)

{- ------------ -}
{- -- Assert -- -}
{- ------------ -}

-- An assertion.
@class AssertStmt: Stmt = (
  -- Holds the condition, such as a `Compare` node.
  Expr test,
  -- Holds the failure message, normally a `Str` node.
  Expr? msg
)

{- ------------ -}
{- -- Import -- -}
{- ------------ -}

-- Import name with optional 'as' alias.
-- Both parameters are raw strings of the names.
-- `asName` can be `nil` if the regular name is to be used.
@struct Alias: ASTNode = (
  -- A unique node identifier.
  -- Mostly used for efficient Equatable/Hashable implementation.
  NodeId id,
  Identifier name,
  Identifier? asName,
  -- Location of the first character in the source code.
  Loc start,
  -- Location just after the last character in the source code.
  Loc end
)

-- An import statement.
@class ImportStmt: Stmt = (Alias+ names)

-- Represents `from x import y`.
@class ImportFromStmt: Stmt = (
  -- Raw string of the ‘from’ name, without any leading dots
  -- or `None` for statements such as `from . import foo`.
  Identifier? moduleName,
  Alias+ names,
  -- Integer holding the level of the relative import (0 means absolute import).
  UInt8 level
)

-- Represents `from x import *`.
-- - `moduleName` is a raw string of the ‘from’ name, without any leading dots
-- or None for statements such as `from . import foo`.
-- - `level` is an integer holding the level of the relative import
-- (0 means absolute import).
@class ImportFromStarStmt: Stmt = (
  Identifier? moduleName,
  -- Integer holding the level of the relative import (0 means absolute import).
  UInt8 level
)

{- ----------- -}
{- -- Scope -- -}
{- ----------- -}

-- `global` statement.
@class GlobalStmt: Stmt = (Identifier+ identifiers)
-- `nonlocal` statement.
@class NonlocalStmt: Stmt = (Identifier+ identifiers)

{- ----------- -}
{- -- Other -- -}
{- ----------- -}

-- `Expression` statement.
@class ExprStmt: Stmt = (Expr expression)
-- A `pass` statement.
@class PassStmt: Stmt = ()
-- `break` statement.
@class BreakStmt: Stmt = ()
-- `continue` statement.
@class ContinueStmt: Stmt = ()

{- ----------------- -}
{- -- Expressions -- -}
{- ----------------- -}

-- What are we going to do with this expression?
@enum ExpressionContext =
  Store
  | Load
  | Del

-- Combination of one or more constants, variables, operators and functions
-- that the programming language interprets and computes to produce another value.
--
-- See: [docs](https://docs.python.org/3/reference/expressions.html)
@class Expr: ASTNode = (
  -- A unique node identifier.
  -- Mostly used for efficient Equatable/Hashable implementation.
  NodeId id,
  -- Why do we need this expression? Store? Load? Delete?
  ExpressionContext context,
  -- Location of the first character in the source code.
  Loc start,
  -- Location just after the last character in the source code.
  Loc end
)

@class TrueExpr: Expr = ()
@class FalseExpr: Expr = ()
@class NoneExpr: Expr = ()
@class EllipsisExpr: Expr = ()

{- Based on RustPython. -}
{- CPython uses 'JoinedStr(expr* values)', but we know that values are strings. -}
-- For normal strings and f-strings, concatenate them together.
@enum StringExpr.Group =
  -- String - no f-strings.
  Literal(String)
  -- FormattedValue - just an f-string (with no leading or trailing literals).
  | FormattedValue(Expr, StringExpr.Conversion? conversion, String? spec)
  -- JoinedStr - if there are multiple f-strings or any literals involved.
  | Joined(Group*)

-- Transforms a value prior to formatting it.
@enum StringExpr.Conversion =
  -- Converts by calling `str(<value>)`.
  Str
  -- Converts by calling `ascii(<value>)`.
  | Ascii
  -- Converts by calling `repr(<value>)`.
  | Repr

@class IdentifierExpr: Expr = (String value)
@class StringExpr: Expr = (StringExpr.Group value)
@class IntExpr: Expr = (BigInt value)
@class FloatExpr: Expr = (Double value)
@class ComplexExpr: Expr = (Double real, Double imag)
@class BytesExpr: Expr = (Data value)

{- ---------------- -}
{- -- Operations -- -}
{- ---------------- -}

@enum UnaryOpExpr.Operator =
  -- Bitwise inversion of its integer argument.
  -- Only applies to integral numbers.
  Invert
  -- True if its argument is false, False otherwise.
  | Not
  -- Unchanged argument. CPython: UAdd (unary add).
  | Plus
  -- Negation of its numeric argument. CPython: USub (unary sub).
  | Minus

-- Operation with single operand.
@class UnaryOpExpr: Expr = (UnaryOpExpr.Operator op, Expr right)

@enum BinaryOpExpr.Operator =
  -- Sum of its arguments.
  -- - Numbers added together.
  -- - Sequences are concatenated.
  Add
  -- Difference of its arguments.
  | Sub
  -- Product of its arguments.
  -- - Numbers multiplied together.
  -- - For integer and sequence repetition is performed.
  | Mul
  -- Intended to be used for matrix multiplication.
  -- No builtin Python types implement this operator.
  | MatMul
  -- Quotient of their arguments.
  -- Division of integers yields a float.
  | Div
  -- Remainder from the division of the first argument by the second.
  | Modulo
  -- Left argument raised to the power of its right argument.
  | Pow
  -- Shift the first argument to the left by the number of bits
  -- given by the second argument.
  | LeftShift
  -- Shift the first argument to the right by the number of bits
  -- given by the second argument.
  | RightShift
  -- Bitwise (inclusive) OR of its arguments, which must be integers.
  | BitOr
  -- Bitwise XOR (exclusive OR) of its arguments, which must be integers.
  | BitXor
  -- Bitwise AND of its arguments, which must be integers.
  | BitAnd
  -- Quotient of their arguments.
  -- Floor division of integers results in an integer.
  | FloorDiv

-- Operation with 2 operands.
@class BinaryOpExpr: Expr = (BinaryOpExpr.Operator op, Expr left, Expr right)

@enum BoolOpExpr.Operator =
  -- Logical `and` with short-circuit.
  And
  -- Logical `or` with short-circuit.
  | Or

-- Operation with logical values as operands.
-- Returns last evaluated argument (even if it's not strictly `True` or `False`).
-- - Note:
-- Following values are interpreted as false:
-- - False\n- None\n- numeric zero\n- empty strings\n- empty containers
@class BoolOpExpr: Expr = (BoolOpExpr.Operator op, Expr left, Expr right)

{- ------------- -}
{- -- Compare -- -}
{- ------------- -}

@enum CompareExpr.Operator =
  -- True when two operands are equal.
  Equal
  -- True when two operands are not equal.
  | NotEqual
  -- True when left operand is less than the value of right operand.
  | Less
  -- True when left operand is less than or equal to the value of right operand.
  | LessEqual
  -- True when left operand is greater than the value of right operand.
  | Greater
  -- True when left operand is greater than or equal to the value of right operand.
  | GreaterEqual
  -- True when x and y are the same object.
  | Is
  -- Negation of `x is y`.
  | IsNot
  -- True when x is a member of s.
  | In
  -- Negation of `x in s`
  | NotIn

@struct CompareExpr.Element = (
  CompareExpr.Operator op,
  Expr right
)

{- need sequence to distinguish between: x < 4 < 3 and (x < 4) < 3 -}
@class CompareExpr: Expr = (Expr left, CompareExpr.Element+ elements)

{- ----------------- -}
{- -- Collections -- -}
{- ----------------- -}

@enum DictionaryExpr.Element =
  -- `**expr`
    unpacking(Expr)
  -- `key : value`
  | keyValue(Expr key, Expr value)

-- Values separated by commas (sometimes between parentheses): (a,b).
@class TupleExpr: Expr = (Expr* elements)
-- List of comma-separated values between square brackets: [a,b].
@class ListExpr: Expr = (Expr* elements)
-- Set of `key: value` pairs between braces: {a: b}. Keys are unique.
@class DictionaryExpr: Expr = (DictionaryExpr.Element* elements)
-- List of comma-separated values between braces: {a}. Unordered with no duplicates.
@class SetExpr: Expr = (Expr* elements)

{- -------------------- -}
{- -- Comprehensions -- -}
{- -------------------- -}

-- One `for` clause in a comprehension.
@struct Comprehension: ASTNode = (
  -- A unique node identifier.
  -- Mostly used for efficient Equatable/Hashable implementation.
  NodeId id,
  -- Reference to use for each element,
  -- typically a `Identifier` or `Tuple` node.
  Expr target,
  -- Object to iterate over.
  Expr iterable,
  -- List of test expressions. We can have multiple `ifs`.
  Expr* ifs,
  -- Indicates that the comprehension is asynchronous.
  Bool isAsync,
  -- Location of the first character in the source code.
  Loc start,
  -- Location just after the last character in the source code.
  Loc end
)

-- Brackets containing an expression followed by a for clause and then
-- zero or more for or if clauses.
@class ListComprehensionExpr: Expr = (
  -- Expression that will be evaluated for each item
  Expr element,
  Comprehension+ generators
)

-- Brackets containing an expression followed by a for clause and then
-- zero or more for or if clauses.
@class SetComprehensionExpr: Expr = (
  -- Expression that will be evaluated for each item
  Expr element,
  Comprehension+ generators
)

-- Brackets containing an expression followed by a for clause and then
-- zero or more for or if clauses.
@class DictionaryComprehensionExpr: Expr = (
  -- Expression that will be evaluated for each item
  Expr key,
  -- Expression that will be evaluated for each item
  Expr value,
  Comprehension+ generators
)

{- the grammar constrains where yield expressions can occur -}
-- Expression followed by a for clause and then
-- zero or more for or if clauses.
@class GeneratorExpr: Expr = (
  -- Expression that will be evaluated for each item
  Expr element,
  Comprehension+ generators
)

{- --------------------------- -}
{- -- Coroutines/generators -- -}
{- --------------------------- -}

-- An await expression.
-- `value` is what it waits for.\n
-- Only valid in the body of an AsyncFunctionDef.
@class AwaitExpr: Expr = (Expr value)
-- A `yield` or `yield from` expression.
-- Because these are expressions, they must be wrapped in a `Expr` node
-- if the value sent back is not used.
@class YieldExpr: Expr = (Expr? value)
-- A `yield` or `yield from` expression.
-- Because these are expressions, they must be wrapped in a `Expr` node
-- if the value sent back is not used.
@class YieldFromExpr: Expr = (Expr value)

{- --------------- -}
{- -- Functions -- -}
{- --------------- -}

-- Minimal function definition that can be used inside an expression.
-- Unlike `FunctionDef`, body holds a single node.
@class LambdaExpr: Expr = (Arguments args, Expr body)
-- A function call.
-- - `func` - function to call
-- - `args` - arguments passed by position
-- - `keywords` - keyword objects representing arguments passed by keyword
@class CallExpr: Expr = (
  Expr function,
  Expr* args,
  KeywordArgument* keywords
)

{- ------------ -}
{- -- Access -- -}
{- ------------ -}

-- For example `apple.juice = poison`.
@class AttributeExpr: Expr = (Expr object, Identifier name)

@struct Slice: ASTNode = (
  -- A unique node identifier.
  -- Mostly used for efficient Equatable/Hashable implementation.
  NodeId id,
  Slice.Kind kind,
  -- Location of the first character in the source code.
  Loc start,
  -- Location just after the last character in the source code.
  Loc end
)

@enum Slice.Kind =
  -- Regular slicing: `movies[pinocchio:frozen2]`.
  Slice(Expr? lower, Expr? upper, Expr? step)
  -- Advanced slicing: `frozen[kristoff:ana, olaf]`.
  -- `value` holds a list of `Slice` and `Index` nodes.
  | ExtSlice(Slice+)
  -- Subscripting with a single value: `frozen[elsa]`.
  | Index(Expr)

-- For example `apple[juice] = poison`.
@class SubscriptExpr: Expr = (Expr object, Slice slice)

{- ----------- -}
{- -- Other -- -}
{- ----------- -}

-- For example: `1 if True else 2`
@class IfExpr: Expr = (Expr test, Expr body, Expr orElse)
-- For example:
-- `dwarfs = ["Doc", "Grumpy", "Happy", "Sleepy", "Bashful", "Sneezy", "Dopey"]`
-- `singSong(*dwarfs)`
@class StarredExpr: Expr = (Expr expression)

{- --------------- -}
{- -- Arguments -- -}
{- --------------- -}

-- The arguments for a function passed by value
-- (where the value is always an object reference, not the value of the object).
-- https://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions"
@struct Arguments: ASTNode = (
  -- A unique node identifier.
  -- Mostly used for efficient Equatable/Hashable implementation.
  NodeId id,
  -- Function positional arguments.
  -- When a function is called, positional arguments are mapped
  -- to these parameters based solely on their position.
  Argument* args,
  -- Default values for positional arguments.
  -- If there are fewer defaults, they correspond to the last *n* arguments.
  -- - Important: The default value is evaluated only **once**.
  Expr* defaults,
  -- Non-keyworded variable length arguments.
  -- By convention called `*args`.
  Vararg vararg,
  -- Parameters which occur after the '*args'.
  -- Can only be used as keywords rather than positional arguments.
  -- CPython `kwonlyargs`.
  Argument* kwOnlyArgs,
  -- Default values for keyword-only arguments.
  -- If no default value is specified then implicit `None` is assumed.
  -- CPython `kw_defaults`.
  -- - Important: The default value is evaluated only **once**.
  Expr* kwOnlyDefaults,
  -- Keyworded (named) variable length arguments.
  -- By convention called `**kwargs`.
  Argument? kwarg,
  -- Location of the first character in the source code.
  Loc start,
  -- Location just after the last character in the source code.
  Loc end
)

@struct Argument: ASTNode = (
  -- A unique node identifier.
  -- Mostly used for efficient Equatable/Hashable implementation.
  NodeId id,
  -- Argument name.
  Identifier name,
  -- Python expression evaluated at compile time.
  -- Not used during runtime, can be used by third party libraries.
  -- Introduced in PEP 3107.
  Expr? annotation,
  -- Location of the first character in the source code.
  Loc start,
  -- Location just after the last character in the source code.
  Loc end
)

@enum Vararg =
  none
  -- Separator for keyword arguments. Represented by just `*`.
  | unnamed
  | named(Argument)

-- A keyword argument to a function call or class definition.
-- `nil` name is used for `**kwargs`.
@struct KeywordArgument: ASTNode = (
  -- A unique node identifier.
  -- Mostly used for efficient Equatable/Hashable implementation.
  NodeId id,
  -- Type of the keyword argument, either dictionary unpack (`**tangled`)
  -- or named (`princess=rapunzel`).
  KeywordArgument.Kind kind,
  -- Node to pass in.
  Expr value,
  -- Location of the first character in the source code.
  Loc start,
  -- Location just after the last character in the source code.
  Loc end
)

@enum KeywordArgument.Kind = dictionaryUnpack | named(Identifier)
