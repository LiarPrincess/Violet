// swiftlint:disable vertical_whitespace
// swiftlint:disable line_length
// swiftlint:disable function_body_length

// ModuleFactory is based on pre-specialization (partial application)
// of function to module object and then wrapping remaining function.
//
// So, for example:
//   Builtins.add :: (self: Builtins) -> (left: PyObject, right: PyObject) -> Result
// would be specialized to 'Builtins' instance giving us:
//   add :: (left: PyObject, right: PyObject) -> Result
// which would be wrapped and exposed to Python runtime.
//
// So when you are working on Python 'builtins' you are actually working on
// (Scooby-Doo reveal incomming...)
// 'Py.builtins' object (which gives us stateful modules).
// (and we would have gotten away with it without you meddling kids!)
// https://www.youtube.com/watch?v=b4JLLv1lE7A

internal enum ModuleFactory {

  // MARK: - Builtins

  internal static func createBuiltins(from object: Builtins) -> PyModule {
    let result = PyModule(name: "builtins", doc: nil)
    let dict = result.getDict()

    dict["bool"] = PyProperty.wrap(name: "bool", doc: nil, get: object.type_bool)
    dict["builtinFunction"] = PyProperty.wrap(name: "builtinFunction", doc: nil, get: object.type_builtinFunction)
    dict["bytearray"] = PyProperty.wrap(name: "bytearray", doc: nil, get: object.type_bytearray)
    dict["bytearray_iterator"] = PyProperty.wrap(name: "bytearray_iterator", doc: nil, get: object.type_bytearray_iterator)
    dict["bytes"] = PyProperty.wrap(name: "bytes", doc: nil, get: object.type_bytes)
    dict["bytes_iterator"] = PyProperty.wrap(name: "bytes_iterator", doc: nil, get: object.type_bytes_iterator)
    dict["callable_iterator"] = PyProperty.wrap(name: "callable_iterator", doc: nil, get: object.type_callable_iterator)
    dict["code"] = PyProperty.wrap(name: "code", doc: nil, get: object.type_code)
    dict["complex"] = PyProperty.wrap(name: "complex", doc: nil, get: object.type_complex)
    dict["dict"] = PyProperty.wrap(name: "dict", doc: nil, get: object.type_dict)
    dict["dict_itemiterator"] = PyProperty.wrap(name: "dict_itemiterator", doc: nil, get: object.type_dict_itemiterator)
    dict["dict_items"] = PyProperty.wrap(name: "dict_items", doc: nil, get: object.type_dict_items)
    dict["dict_keyiterator"] = PyProperty.wrap(name: "dict_keyiterator", doc: nil, get: object.type_dict_keyiterator)
    dict["dict_keys"] = PyProperty.wrap(name: "dict_keys", doc: nil, get: object.type_dict_keys)
    dict["dict_valueiterator"] = PyProperty.wrap(name: "dict_valueiterator", doc: nil, get: object.type_dict_valueiterator)
    dict["dict_values"] = PyProperty.wrap(name: "dict_values", doc: nil, get: object.type_dict_values)
    dict["ellipsis"] = PyProperty.wrap(name: "ellipsis", doc: nil, get: object.type_ellipsis)
    dict["enumerate"] = PyProperty.wrap(name: "enumerate", doc: nil, get: object.type_enumerate)
    dict["filter"] = PyProperty.wrap(name: "filter", doc: nil, get: object.type_filter)
    dict["float"] = PyProperty.wrap(name: "float", doc: nil, get: object.type_float)
    dict["frozenset"] = PyProperty.wrap(name: "frozenset", doc: nil, get: object.type_frozenset)
    dict["function"] = PyProperty.wrap(name: "function", doc: nil, get: object.type_function)
    dict["int"] = PyProperty.wrap(name: "int", doc: nil, get: object.type_int)
    dict["iterator"] = PyProperty.wrap(name: "iterator", doc: nil, get: object.type_iterator)
    dict["list"] = PyProperty.wrap(name: "list", doc: nil, get: object.type_list)
    dict["list_iterator"] = PyProperty.wrap(name: "list_iterator", doc: nil, get: object.type_list_iterator)
    dict["list_reverseiterator"] = PyProperty.wrap(name: "list_reverseiterator", doc: nil, get: object.type_list_reverseiterator)
    dict["map"] = PyProperty.wrap(name: "map", doc: nil, get: object.type_map)
    dict["method"] = PyProperty.wrap(name: "method", doc: nil, get: object.type_method)
    dict["module"] = PyProperty.wrap(name: "module", doc: nil, get: object.type_module)
    dict["SimpleNamespace"] = PyProperty.wrap(name: "SimpleNamespace", doc: nil, get: object.type_simpleNamespace)
    dict["None"] = PyProperty.wrap(name: "None", doc: nil, get: object.type_none)
    dict["NotImplemented"] = PyProperty.wrap(name: "NotImplemented", doc: nil, get: object.type_notImplemented)
    dict["property"] = PyProperty.wrap(name: "property", doc: nil, get: object.type_property)
    dict["range"] = PyProperty.wrap(name: "range", doc: nil, get: object.type_range)
    dict["range_iterator"] = PyProperty.wrap(name: "range_iterator", doc: nil, get: object.type_range_iterator)
    dict["reversed"] = PyProperty.wrap(name: "reversed", doc: nil, get: object.type_reversed)
    dict["set"] = PyProperty.wrap(name: "set", doc: nil, get: object.type_set)
    dict["set_iterator"] = PyProperty.wrap(name: "set_iterator", doc: nil, get: object.type_set_iterator)
    dict["slice"] = PyProperty.wrap(name: "slice", doc: nil, get: object.type_slice)
    dict["str"] = PyProperty.wrap(name: "str", doc: nil, get: object.type_str)
    dict["str_iterator"] = PyProperty.wrap(name: "str_iterator", doc: nil, get: object.type_str_iterator)
    dict["TextFile"] = PyProperty.wrap(name: "TextFile", doc: nil, get: object.type_textFile)
    dict["tuple"] = PyProperty.wrap(name: "tuple", doc: nil, get: object.type_tuple)
    dict["tuple_iterator"] = PyProperty.wrap(name: "tuple_iterator", doc: nil, get: object.type_tuple_iterator)
    dict["zip"] = PyProperty.wrap(name: "zip", doc: nil, get: object.type_zip)
    dict["ArithmeticError"] = PyProperty.wrap(name: "ArithmeticError", doc: nil, get: object.type_arithmeticError)
    dict["AssertionError"] = PyProperty.wrap(name: "AssertionError", doc: nil, get: object.type_assertionError)
    dict["AttributeError"] = PyProperty.wrap(name: "AttributeError", doc: nil, get: object.type_attributeError)
    dict["BaseException"] = PyProperty.wrap(name: "BaseException", doc: nil, get: object.type_baseException)
    dict["BlockingIOError"] = PyProperty.wrap(name: "BlockingIOError", doc: nil, get: object.type_blockingIOError)
    dict["BrokenPipeError"] = PyProperty.wrap(name: "BrokenPipeError", doc: nil, get: object.type_brokenPipeError)
    dict["BufferError"] = PyProperty.wrap(name: "BufferError", doc: nil, get: object.type_bufferError)
    dict["BytesWarning"] = PyProperty.wrap(name: "BytesWarning", doc: nil, get: object.type_bytesWarning)
    dict["ChildProcessError"] = PyProperty.wrap(name: "ChildProcessError", doc: nil, get: object.type_childProcessError)
    dict["ConnectionAbortedError"] = PyProperty.wrap(name: "ConnectionAbortedError", doc: nil, get: object.type_connectionAbortedError)
    dict["ConnectionError"] = PyProperty.wrap(name: "ConnectionError", doc: nil, get: object.type_connectionError)
    dict["ConnectionRefusedError"] = PyProperty.wrap(name: "ConnectionRefusedError", doc: nil, get: object.type_connectionRefusedError)
    dict["ConnectionResetError"] = PyProperty.wrap(name: "ConnectionResetError", doc: nil, get: object.type_connectionResetError)
    dict["DeprecationWarning"] = PyProperty.wrap(name: "DeprecationWarning", doc: nil, get: object.type_deprecationWarning)
    dict["EOFError"] = PyProperty.wrap(name: "EOFError", doc: nil, get: object.type_eofError)
    dict["Exception"] = PyProperty.wrap(name: "Exception", doc: nil, get: object.type_exception)
    dict["FileExistsError"] = PyProperty.wrap(name: "FileExistsError", doc: nil, get: object.type_fileExistsError)
    dict["FileNotFoundError"] = PyProperty.wrap(name: "FileNotFoundError", doc: nil, get: object.type_fileNotFoundError)
    dict["FloatingPointError"] = PyProperty.wrap(name: "FloatingPointError", doc: nil, get: object.type_floatingPointError)
    dict["FutureWarning"] = PyProperty.wrap(name: "FutureWarning", doc: nil, get: object.type_futureWarning)
    dict["GeneratorExit"] = PyProperty.wrap(name: "GeneratorExit", doc: nil, get: object.type_generatorExit)
    dict["ImportError"] = PyProperty.wrap(name: "ImportError", doc: nil, get: object.type_importError)
    dict["ImportWarning"] = PyProperty.wrap(name: "ImportWarning", doc: nil, get: object.type_importWarning)
    dict["IndentationError"] = PyProperty.wrap(name: "IndentationError", doc: nil, get: object.type_indentationError)
    dict["IndexError"] = PyProperty.wrap(name: "IndexError", doc: nil, get: object.type_indexError)
    dict["InterruptedError"] = PyProperty.wrap(name: "InterruptedError", doc: nil, get: object.type_interruptedError)
    dict["IsADirectoryError"] = PyProperty.wrap(name: "IsADirectoryError", doc: nil, get: object.type_isADirectoryError)
    dict["KeyError"] = PyProperty.wrap(name: "KeyError", doc: nil, get: object.type_keyError)
    dict["KeyboardInterrupt"] = PyProperty.wrap(name: "KeyboardInterrupt", doc: nil, get: object.type_keyboardInterrupt)
    dict["LookupError"] = PyProperty.wrap(name: "LookupError", doc: nil, get: object.type_lookupError)
    dict["MemoryError"] = PyProperty.wrap(name: "MemoryError", doc: nil, get: object.type_memoryError)
    dict["ModuleNotFoundError"] = PyProperty.wrap(name: "ModuleNotFoundError", doc: nil, get: object.type_moduleNotFoundError)
    dict["NameError"] = PyProperty.wrap(name: "NameError", doc: nil, get: object.type_nameError)
    dict["NotADirectoryError"] = PyProperty.wrap(name: "NotADirectoryError", doc: nil, get: object.type_notADirectoryError)
    dict["NotImplementedError"] = PyProperty.wrap(name: "NotImplementedError", doc: nil, get: object.type_notImplementedError)
    dict["OSError"] = PyProperty.wrap(name: "OSError", doc: nil, get: object.type_osError)
    dict["OverflowError"] = PyProperty.wrap(name: "OverflowError", doc: nil, get: object.type_overflowError)
    dict["PendingDeprecationWarning"] = PyProperty.wrap(name: "PendingDeprecationWarning", doc: nil, get: object.type_pendingDeprecationWarning)
    dict["PermissionError"] = PyProperty.wrap(name: "PermissionError", doc: nil, get: object.type_permissionError)
    dict["ProcessLookupError"] = PyProperty.wrap(name: "ProcessLookupError", doc: nil, get: object.type_processLookupError)
    dict["RecursionError"] = PyProperty.wrap(name: "RecursionError", doc: nil, get: object.type_recursionError)
    dict["ReferenceError"] = PyProperty.wrap(name: "ReferenceError", doc: nil, get: object.type_referenceError)
    dict["ResourceWarning"] = PyProperty.wrap(name: "ResourceWarning", doc: nil, get: object.type_resourceWarning)
    dict["RuntimeError"] = PyProperty.wrap(name: "RuntimeError", doc: nil, get: object.type_runtimeError)
    dict["RuntimeWarning"] = PyProperty.wrap(name: "RuntimeWarning", doc: nil, get: object.type_runtimeWarning)
    dict["StopAsyncIteration"] = PyProperty.wrap(name: "StopAsyncIteration", doc: nil, get: object.type_stopAsyncIteration)
    dict["StopIteration"] = PyProperty.wrap(name: "StopIteration", doc: nil, get: object.type_stopIteration)
    dict["SyntaxError"] = PyProperty.wrap(name: "SyntaxError", doc: nil, get: object.type_syntaxError)
    dict["SyntaxWarning"] = PyProperty.wrap(name: "SyntaxWarning", doc: nil, get: object.type_syntaxWarning)
    dict["SystemError"] = PyProperty.wrap(name: "SystemError", doc: nil, get: object.type_systemError)
    dict["SystemExit"] = PyProperty.wrap(name: "SystemExit", doc: nil, get: object.type_systemExit)
    dict["TabError"] = PyProperty.wrap(name: "TabError", doc: nil, get: object.type_tabError)
    dict["TimeoutError"] = PyProperty.wrap(name: "TimeoutError", doc: nil, get: object.type_timeoutError)
    dict["TypeError"] = PyProperty.wrap(name: "TypeError", doc: nil, get: object.type_typeError)
    dict["UnboundLocalError"] = PyProperty.wrap(name: "UnboundLocalError", doc: nil, get: object.type_unboundLocalError)
    dict["UnicodeDecodeError"] = PyProperty.wrap(name: "UnicodeDecodeError", doc: nil, get: object.type_unicodeDecodeError)
    dict["UnicodeEncodeError"] = PyProperty.wrap(name: "UnicodeEncodeError", doc: nil, get: object.type_unicodeEncodeError)
    dict["UnicodeError"] = PyProperty.wrap(name: "UnicodeError", doc: nil, get: object.type_unicodeError)
    dict["UnicodeTranslateError"] = PyProperty.wrap(name: "UnicodeTranslateError", doc: nil, get: object.type_unicodeTranslateError)
    dict["UnicodeWarning"] = PyProperty.wrap(name: "UnicodeWarning", doc: nil, get: object.type_unicodeWarning)
    dict["UserWarning"] = PyProperty.wrap(name: "UserWarning", doc: nil, get: object.type_userWarning)
    dict["ValueError"] = PyProperty.wrap(name: "ValueError", doc: nil, get: object.type_valueError)
    dict["Warning"] = PyProperty.wrap(name: "Warning", doc: nil, get: object.type_warning)
    dict["ZeroDivisionError"] = PyProperty.wrap(name: "ZeroDivisionError", doc: nil, get: object.type_zeroDivisionError)

    dict["abs"] = PyBuiltinFunction.wrap(name: "abs", doc: nil, fn: object.abs(_:), module: result)
    dict["any"] = PyBuiltinFunction.wrap(name: "any", doc: nil, fn: object.any(iterable:), module: result)
    dict["all"] = PyBuiltinFunction.wrap(name: "all", doc: nil, fn: object.all(iterable:), module: result)
    dict["sum"] = PyBuiltinFunction.wrap(name: "sum", doc: nil, fn: object.sum(args:kwargs:), module: result)
    dict["isinstance"] = PyBuiltinFunction.wrap(name: "isinstance", doc: nil, fn: object.isInstance(object:of:), module: result)
    dict["issubclass"] = PyBuiltinFunction.wrap(name: "issubclass", doc: nil, fn: object.isSubclass(object:of:), module: result)
    dict["next"] = PyBuiltinFunction.wrap(name: "next", doc: nil, fn: object.next(iterator:default:), module: result)
    dict["iter"] = PyBuiltinFunction.wrap(name: "iter", doc: nil, fn: object.iter(from:sentinel:), module: result)
    dict["bin"] = PyBuiltinFunction.wrap(name: "bin", doc: nil, fn: object.bin(_:), module: result)
    dict["oct"] = PyBuiltinFunction.wrap(name: "oct", doc: nil, fn: object.oct(_:), module: result)
    dict["hex"] = PyBuiltinFunction.wrap(name: "hex", doc: nil, fn: object.hex(_:), module: result)
    dict["chr"] = PyBuiltinFunction.wrap(name: "chr", doc: nil, fn: object.chr(_:), module: result)
    dict["ord"] = PyBuiltinFunction.wrap(name: "ord", doc: nil, fn: object.ord(_:), module: result)
    dict["hash"] = PyBuiltinFunction.wrap(name: "hash", doc: nil, fn: object.hash(_:), module: result)
    dict["id"] = PyBuiltinFunction.wrap(name: "id", doc: nil, fn: object.id(_:), module: result)
    dict["dir"] = PyBuiltinFunction.wrap(name: "dir", doc: nil, fn: object.dir(_:), module: result)
    dict["repr"] = PyBuiltinFunction.wrap(name: "repr", doc: nil, fn: object.repr(_:), module: result)
    dict["ascii"] = PyBuiltinFunction.wrap(name: "ascii", doc: nil, fn: object.ascii(_:), module: result)
    dict["len"] = PyBuiltinFunction.wrap(name: "len", doc: nil, fn: object.length(iterable:), module: result)
    dict["sorted"] = PyBuiltinFunction.wrap(name: "sorted", doc: nil, fn: object.sorted(iterable:key:reverse:), module: result)
    dict["callable"] = PyBuiltinFunction.wrap(name: "callable", doc: nil, fn: object.isCallable(_:), module: result)
    dict["divmod"] = PyBuiltinFunction.wrap(name: "divmod", doc: nil, fn: object.divmod(left:right:), module: result)
    dict["pow"] = PyBuiltinFunction.wrap(name: "pow", doc: nil, fn: object.pow(base:exp:mod:), module: result)
    dict["open"] = PyBuiltinFunction.wrap(name: "open", doc: nil, fn: object.open(args:kwargs:), module: result)
    dict["getattr"] = PyBuiltinFunction.wrap(name: "getattr", doc: nil, fn: object.getAttribute(_:name:default:), module: result)
    dict["hasattr"] = PyBuiltinFunction.wrap(name: "hasattr", doc: nil, fn: object.hasAttribute(_:name:), module: result)
    dict["setattr"] = PyBuiltinFunction.wrap(name: "setattr", doc: nil, fn: object.setAttribute(_:name:value:), module: result)
    dict["delattr"] = PyBuiltinFunction.wrap(name: "delattr", doc: nil, fn: object.deleteAttribute(_:name:), module: result)
    dict["min"] = PyBuiltinFunction.wrap(name: "min", doc: nil, fn: object.min(args:kwargs:), module: result)
    dict["max"] = PyBuiltinFunction.wrap(name: "max", doc: nil, fn: object.max(args:kwargs:), module: result)

    return result
  }

  // MARK: - Sys

  internal static func createSys(from object: Sys) -> PyModule {
    let result = PyModule(name: "sys", doc: nil)
    let dict = result.getDict()

    dict["stdin"] = PyProperty.wrap(name: "stdin", doc: nil, get: object.getStdin, set: object.setStdin)
    dict["__stdin__"] = PyProperty.wrap(name: "__stdin__", doc: nil, get: object.get__stdin__)
    dict["stdout"] = PyProperty.wrap(name: "stdout", doc: nil, get: object.getStdout, set: object.setStdout)
    dict["__stdout__"] = PyProperty.wrap(name: "__stdout__", doc: nil, get: object.get__stdout__)
    dict["stderr"] = PyProperty.wrap(name: "stderr", doc: nil, get: object.getStderr, set: object.setStderr)
    dict["__stderr__"] = PyProperty.wrap(name: "__stderr__", doc: nil, get: object.get__stderr__)
    dict["ps1"] = PyProperty.wrap(name: "ps1", doc: nil, get: object.getPS1, set: object.setPS1)
    dict["ps2"] = PyProperty.wrap(name: "ps2", doc: nil, get: object.getPS2, set: object.setPS2)
    dict["platform"] = PyProperty.wrap(name: "platform", doc: nil, get: object.getPlatform)
    dict["copyright"] = PyProperty.wrap(name: "copyright", doc: nil, get: object.getCopyright)
    dict["version"] = PyProperty.wrap(name: "version", doc: nil, get: object.getVersion)
    dict["version_info"] = PyProperty.wrap(name: "version_info", doc: nil, get: object.getVersionInfo)
    dict["implementation"] = PyProperty.wrap(name: "implementation", doc: nil, get: object.getImplementation)
    dict["hash_info"] = PyProperty.wrap(name: "hash_info", doc: nil, get: object.getHashInfo)


    return result
  }
}
