// swiftlint:disable:previous vertical_whitespace
// swiftlint:disable function_body_length
// swiftlint:disable line_length

public final class BuiltinTypes {

  /// Root of the type hierarchy
  public let object: PyType
  /// Type which is set as `type` on all of the `PyType` objects
  public let type: PyType

{% for type in types.classes|annotated:"pytype" %}
  {% set name %}{{ type.annotations.pytype|replace:"Type",""|replace:"types",""|replace:".",""|lowerFirstWord }}{% endset %}
  public let {{ name }}: PyType
{% endfor %}

  internal init(context: PyContext) {
    // Requirements (for `self.object` and `self.type`):
    // 1. `type` inherits from `object`
    // 2. both `type` and `object` are instances of `type`
    // And yes, it is a cycle that will never be deallocated

    self.object = TypeFactory.objectWithoutType(context)
    self.type = TypeFactory.typeWithoutType(context, base: self.object)
    self.object.setType(to: self.type)
    self.type.setType(to: self.type)

    // `self.bool` has to be last because it uses `self.int` as base!
    {% for type in types.classes|annotated:"pytype" where type.name != "PyBool" %}
    {% set name %}{{ type.annotations.pytype|replace:"Type",""|replace:"types",""|replace:".",""|lowerFirstWord }}{% endset %}
    self.{{ name }} = TypeFactory.{{ name }}(context, type: self.type, base: self.object)
    {% endfor %}
    self.bool = TypeFactory.bool(context, type: self.type, base: self.int)
  }
}
