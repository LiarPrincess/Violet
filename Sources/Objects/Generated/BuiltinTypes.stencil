// swiftlint:disable:previous vertical_whitespace
// swiftlint:disable function_body_length
// swiftlint:disable line_length
// swiftlint:disable trailing_comma

// VERY IMPORTANT:
//
// Type initialization order:
//
// Stage 1: Create all type objects ('init()' function)
// Just instantiate all of the 'PyType' properties.
// At this point we can't fill '__dict__', because for this we would need other
// types to be already initialized (which would be circular).
// For example we can't fill '__doc__' because for this we would need 'str' type,
// which may not yet exist.
//
// Stage 2: Fill type objects ('fill__dict__()' method)
// When all of the types are initalized we can finally fill dictionaries.

public final class BuiltinTypes {

  /// Root of the type hierarchy
  public let object: PyType
  /// Type which is set as `type` on all of the `PyType` objects
  public let type: PyType

{% for type in types.classes|annotated:"pytype" %}
  {% set name %}{{ type.annotations.pytype|replace:"Type",""|replace:"types",""|replace:".",""|lowerFirstWord }}{% endset %}
  public let {{ name }}: PyType
{% endfor %}

  /// Init that will only initialize properties.
  /// (see comment at the top of this file)
  internal init(context: PyContext) {
    // Requirements (for 'self.object' and 'self.type'):
    // 1. 'type' inherits from 'object'
    // 2. both 'type' and 'object' are instances of 'type'
    self.object = PyType.initObjectType(context)
    self.type = PyType.initTypeType(objectType: self.object)
    self.object.setType(to: self.type)
    self.type.setType(to: self.type)

    // 'self.bool' has to be last because it uses 'self.int' as base!
    {% for type in types.classes|annotated:"pytype" where type.name != "PyBool" %}
    {% set name %}{{ type.annotations.pytype|replace:"Type",""|replace:"types",""|replace:".",""|lowerFirstWord }}{% endset %}
    self.{{ name }} = PyType.initBuiltinType(name: "{{ type.annotations.pytype }}", type: self.type, base: self.object)
    {% endfor %}
    self.bool = PyType.initBuiltinType(name: "bool", type: self.type, base: self.int)
  }

  /// This function finalizes init of all of the stored types.
  /// (see comment at the top of this file)
  ///
  /// For example it will:
  /// - set type flags
  /// - add `__doc__`
  /// - fill `__dict__`
  internal func fill__dict__() {
    BuiltinTypesFill.object(self.object)
    BuiltinTypesFill.type(self.type)
    {% for type in types.classes|annotated:"pytype" %}
    {% set name %}{{ type.annotations.pytype|replace:"Type",""|replace:"types",""|replace:".",""|lowerFirstWord }}{% endset %}
    BuiltinTypesFill.{{ name }}(self.{{ name }})
    {% endfor %}
  }

  internal var all: [PyType] {
    return [
      self.object,
      self.type,
    {% for type in types.classes|annotated:"pytype" %}
    {% set name %}{{ type.annotations.pytype|replace:"Type",""|replace:"types",""|replace:".",""|lowerFirstWord }}{% endset %}
      self.{{ name }},
    {% endfor %}
    ]
  }
}
