// In CPython:
// Objects -> exceptions.c
// Lib->test->exception_hierarchy.txt <-- this is amazing
// https://docs.python.org/3.7/c-api/exceptions.html

internal class PyWarningType: PyExceptionType {
  override internal var name: String { return "Warning" }
  override internal var base: PyType? { return self.exceptionType }
  override internal var doc: String? {
    return "Base class for warning categories."
  }

  fileprivate var warningType: PyType {
    return self.context.warnings.base
  }
}

internal final class PyUserWarningType: PyWarningType {
  override internal var name: String { return "UserWarning" }
  override internal var base: PyType? { return self.warningType }
  override internal var doc: String? {
    return "Base class for warnings generated by user code."
  }
}

internal final class PyDeprecationWarningType: PyWarningType {
  override internal var name: String { return "DeprecationWarning" }
  override internal var base: PyType? { return self.warningType }
  override internal var doc: String? {
    return "Base class for warnings about deprecated features."
  }
}

internal final class PyPendingDeprecationWarningType: PyWarningType {
  override internal var name: String { return "PendingDeprecationWarning" }
  override internal var base: PyType? { return self.warningType }
  override internal var doc: String? {
    return "Base class for warnings about features which will be deprecated " +
    "in the future."
  }
}

internal final class PySyntaxWarningType: PyWarningType {
  override internal var name: String { return "SyntaxWarning" }
  override internal var base: PyType? { return self.warningType }
  override internal var doc: String? {
    return "Base class for warnings about dubious syntax."
  }
}

internal final class PyRuntimeWarningType: PyWarningType {
  override internal var name: String { return "RuntimeWarning" }
  override internal var base: PyType? { return self.warningType }
  override internal var doc: String? {
    return "Base class for warnings about dubious runtime behavior."
  }
}

internal final class PyFutureWarningType: PyWarningType {
  override internal var name: String { return "FutureWarning" }
  override internal var base: PyType? { return self.warningType }
  override internal var doc: String? {
    return "Base class for warnings about constructs that will change " +
    "semantically in the future."
  }
}

internal final class PyImportWarningType: PyWarningType {
  override internal var name: String { return "ImportWarning" }
  override internal var base: PyType? { return self.warningType }
  override internal var doc: String? {
    return "Base class for warnings about probable mistakes in module imports"
  }
}

internal final class PyUnicodeWarningType: PyWarningType {
  override internal var name: String { return "UnicodeWarning" }
  override internal var base: PyType? { return self.warningType }
  override internal var doc: String? {
    return "Base class for warnings about Unicode related problems, " +
    "mostly related to conversion problems."
  }
}

internal final class PyBytesWarningType: PyWarningType {
  override internal var name: String { return "BytesWarning" }
  override internal var base: PyType? { return self.warningType }
  override internal var doc: String? {
    return "Base class for warnings about bytes and buffer related problems, " +
    "mostly related to conversion from str or comparing to str."
  }
}

internal final class PyResourceWarningType: PyWarningType {
  override internal var name: String { return "ResourceWarning" }
  override internal var base: PyType? { return self.warningType }
  override internal var doc: String? {
    return "Base class for warnings about resource usage."
  }
}
