import Foundation
import BigInt
import VioletCore

// In CPython:
// Python -> _warnings.c
// https://docs.python.org/3/library/warnings.html

extension Py {

  // MARK: - Types

  /// Warning types, but as an `enum`.
  ///
  /// Helper for `self.warn` method.
  public enum WarningType {
    /// Base class for warning categories.
    case warning
    /// Base class for warnings about deprecated features.
    case deprecation
    /// Base class for warnings about features which will be deprecated
    /// in the future.
    case pendingDeprecation
    /// Base class for warnings about dubious runtime behavior.
    case runtime
    /// Base class for warnings about dubious syntax.
    case syntax
    /// Base class for warnings generated by user code.
    case user
    /// Base class for warnings about constructs that will change semantically
    /// in the future.
    case future
    /// Base class for warnings about probable mistakes in module imports
    case `import`
    /// Base class for warnings about Unicode related problems, mostly
    /// related to conversion problems.
    case unicode
    /// Base class for warnings about bytes and buffer related problems,
    /// mostly related to conversion from str or comparing to str.
    case bytes
    /// Base class for warnings about resource usage.
    case resource
  }

  internal func getPythonType(type: WarningType) -> PyType {
    switch type {
    case .warning: return self.errorTypes.warning
    case .deprecation: return self.errorTypes.deprecationWarning
    case .pendingDeprecation: return self.errorTypes.pendingDeprecationWarning
    case .runtime: return self.errorTypes.runtimeWarning
    case .syntax: return self.errorTypes.syntaxWarning
    case .user: return self.errorTypes.userWarning
    case .future: return self.errorTypes.futureWarning
    case .import: return self.errorTypes.importWarning
    case .unicode: return self.errorTypes.unicodeWarning
    case .bytes: return self.errorTypes.bytesWarning
    case .resource: return self.errorTypes.resourceWarning
    }
  }

  // MARK: - Syntax

  public func warnSyntax(filename: String,
                         line: SourceLine,
                         column: SourceColumn,
                         text: String) -> PyBaseException? {
    let filenameObject = self.intern(string: filename)
    let lineObject = self.newInt(Int(line))
    let columnObject = self.newInt(Int(column))
    let textObject = self.newString(text)

    return self.warnSyntax(filename: filenameObject,
                           line: lineObject,
                           column: columnObject,
                           text: textObject)
  }

  public func warnSyntax(filename: PyString,
                         line: PyInt,
                         column: PyInt,
                         text: PyString) -> PyBaseException? {
    let message = self.newSyntaxWarning(filename: filename,
                                        line: line,
                                        column: column,
                                        text: text)

    let frame = self.delegate.getCurrentlyExecutedFrame(self)
    let registry: UnderscoreWarnings.WarningRegistry
    switch self._warnings.getWarningRegistry(frame: frame) {
    case let .value(r): registry = r
    case let .error(e): return e
    }

    // We cannot use generic 'warn' as this time we have to point to specific
    // file/line.
    let messageObject = message.asObject
    let category = self.errorTypes.syntaxWarning
    return self._warnings.warnExplicit(message: messageObject,
                                       category: category,
                                       filename: filename,
                                       lineNo: line,
                                       module: nil,
                                       source: nil,
                                       registry: registry)
  }

  public func newSyntaxWarning(filename: String,
                               line: BigInt,
                               column: BigInt,
                               text: String) -> PySyntaxWarning {
    let message = "\(text) (\(filename), line \(line), offset: \(column))"
    let args = self.createErrorArgs(message: message)
    let type = self.errorTypes.syntaxWarning
    return self.memory.newSyntaxWarning(type: type, args: args)
  }

  public func newSyntaxWarning(filename: PyString,
                               line: PyInt,
                               column: PyInt,
                               text: PyString) -> PySyntaxWarning {
    return self.newSyntaxWarning(filename: filename.value,
                                 line: line.value,
                                 column: column.value,
                                 text: text.value)
  }

  // MARK: - Bytes

  public func warnBytesIfEnabled(message: String) -> PyBaseException? {
    // We will call 'getInterned' because messages tend to be repeated.
    switch self.sys.flags.bytesWarning {
    case .ignore:
      return nil

    case .warning:
      let object = self.intern(string: message)
      return self.warn(type: .bytes, message: object)

    case .error:
      let message = self.intern(string: message)
      let args = self.createErrorArgs(message: message)
      let type = self.errorTypes.bytesWarning
      let error = self.memory.newBytesWarning(type: type, args: args)
      return error.asBaseException
    }
  }

  // MARK: - Warn

  public func warn(type: WarningType, message: String) -> PyBaseException? {
    let pythonType = self.getPythonType(type: type)
    return self.warn(type: pythonType, message: message)
  }

  public func warn(type: WarningType, message: PyString) -> PyBaseException? {
    let pythonType = self.getPythonType(type: type)
    return self.warn(type: pythonType, message: message)
  }

  public func warn(type: PyType, message: String) -> PyBaseException? {
    let object = self.newString(message)
    return self.warn(type: type, message: object)
  }

  public func warn(type: PyType, message: PyString) -> PyBaseException? {
    assert(type.isSubtype(of: self.errorTypes.warning))
    let messageObject = message.asObject
    let categoryObject = type.asObject
    return self._warnings.warn(message: messageObject, category: categoryObject)
  }
}
