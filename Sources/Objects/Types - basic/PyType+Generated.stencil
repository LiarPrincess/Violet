// swiftlint:disable:previous vertical_whitespace
// swiftlint:disable vertical_whitespace
// swiftlint:disable line_length
// swiftlint:disable file_length

extension PyType {
{% for type in types.classes|annotated:"pytype" %}

  internal static func {{ type.annotations.pytype }}(_ context: PyContext, type: PyType, base: PyType) -> PyType {
    {# To find 'doc' we iterate all static variables looking for 'doc', if that fails then assign 'nil' #}
    {% set doc %}{% for variable in type.staticVariables where variable.name == "doc" %}{{ type.name }}.doc{% endfor %}{% endset %}
    {% set docOrNil %}{% if doc == "" %}nil{% else %}{{ doc }}{% endif %}{% endset %}
    let result = PyType(context, name: "{{ type.annotations.pytype }}", doc: {{ docOrNil }}, type: type, base: base)

    {% for prop in type.methods|annotated:"pyproperty" %}
    {% if prop.annotations.setter %}
    // result.{{ prop.annotations.pyproperty }} = {{ type.name }}.{{ prop.name }}, setter: {{ type.name }}.{{ prop.annotations.setter }} -> {{ prop.returnTypeName }}
    {% else %}
    // result.{{ prop.annotations.pyproperty }} = {{ type.name }}.{{ prop.name }} -> {{ prop.returnTypeName }}
    {% endif %}
    {% endfor %}
    // result.__class__ = PyObject.getClass -> PyType

    {% for method in type.methods|annotated:"pymethod" %}
    // result.{{ method.annotations.pymethod }} = {{ type.name }}.{{ method.name }} -> {{ method.returnTypeName }}
    {% endfor %}

    return result
    {# All types (except for PyInt) have to be marked final #}
    {# Btw. stencil has problem with: 'not (type.isFinal or type.name == "PyInt")' #}
    {% if not type.isFinal and type.name != "PyInt" and type.name != "PyModule" %}
    #warning("Type {{ type.name }} should be marked final.")
    {% endif %}
  }
{% endfor %}
}
