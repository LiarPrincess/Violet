// swiftlint:disable:previous vertical_whitespace

// MARK: - Types

public final class BuiltinTypes {

  /// Root of the type hierarchy
  public let object: PyType
  /// Type which is set as `type` on all of the `PyType` objects
  public let type: PyType

{% for type in types.classes|annotated:"pytype" %}
  {% set name %}{{ type.annotations.pytype|replace:"Type",""|replace:"types",""|replace:".",""|lowerFirstWord }}{% endset %}
  public let {{ name }}: PyType
{% endfor %}

  internal init(context: PyContext) {
    // Requirements:
    // 1. `type` inherits from `object`
    // 2. both `type` and `object` are instances of `type`
    // And yes, it is a cycle that will never be deallocated

    self.object = PyType.objectWithoutType(context)
    self.type = PyType.typeWithoutType(context, base: self.object)
    self.object.setType(to: self.type)
    self.type.setType(to: self.type)

    // `self.bool` has to be last because it uses `self.int` as base!
    {% for type in types.classes|annotated:"pytype" where type.name != "PyBool" %}
    {% set name %}{{ type.annotations.pytype|replace:"Type",""|replace:"types",""|replace:".",""|lowerFirstWord }}{% endset %}
    self.{{ name }} = PyType.{{ name }}(context, type: self.type, base: self.object)
    {% endfor %}
    self.bool = PyType.bool(context, type: self.type, base: self.int)
  }
}

// MARK: - Errors

public final class BuiltinErrors {

{% for type in types.classes|annotated:"pyerrortype" %}
  {% set name %}{{ type.annotations.pyerrortype|replace:"Type",""|replace:"types",""|replace:".",""|lowerFirstWord }}{% endset %}
  // public let {{ name }}: PyType
{% endfor %}

  internal init(context: PyContext, types: BuiltinTypes) {
    {% for type in types.classes|annotated:"pyerrortype" %}
    {% set name %}{{ type.annotations.pyerrortype|replace:"Type",""|replace:"types",""|replace:".",""|lowerFirstWord }}{% endset %}
    // self.{{ name }} = PyType.{{ name }}(context, type: types.type, base: types.object)
    {% endfor %}
  }
}

// MARK: - Warnings

public final class BuiltinWarnings {

{% for type in types.classes|annotated:"pywarningtype" %}
  {% set name %}{{ type.annotations.pywarningtype|replace:"Type",""|replace:"types",""|replace:".",""|lowerFirstWord }}{% endset %}
  // public let {{ name }}: PyType
{% endfor %}

  internal init(context: PyContext, types: BuiltinTypes) {
    {% for type in types.classes|annotated:"pywarningtype" %}
    {% set name %}{{ type.annotations.pywarningtype|replace:"Type",""|replace:"types",""|replace:".",""|lowerFirstWord }}{% endset %}
    // self.{{ name }} = PyType.{{ name }}(context, type: types.type, base: types.object)
    {% endfor %}
  }
}
