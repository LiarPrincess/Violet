// In CPython:
// Objects -> exceptions.c
// Lib->test->exception_hierarchy.txt <-- this is amazing
// https://docs.python.org/3.7/c-api/exceptions.html
// Most of this file was generatued using 'Scripes/generate_errors.py'.

// sourcery: pywarningtype = Warning
internal class PyWarning: PyException {

  override internal class var doc: String {
    return "Base class for warning categories."
  }

  override internal func initType(from context: PyContext) {
    self.setType(to: context.builtins.warningTypes.warning)
  }

  // sourcery: pyproperty = __class__
  override internal func getClass() -> PyType {
    return self.type
  }

  // sourcery: pyproperty = __dict__
  override internal func dict() -> Attributes {
    return self._attributes
  }
}

// sourcery: pywarningtype = DeprecationWarning
internal final class PyDeprecationWarning: PyWarning {

  override internal class var doc: String {
    return "Base class for warnings about deprecated features."
  }

  override internal func initType(from context: PyContext) {
    self.setType(to: context.builtins.warningTypes.deprecationWarning)
  }

  // sourcery: pyproperty = __class__
  override internal func getClass() -> PyType {
    return self.type
  }

  // sourcery: pyproperty = __dict__
  override internal func dict() -> Attributes {
    return self._attributes
  }
}

// sourcery: pywarningtype = PendingDeprecationWarning
internal final class PyPendingDeprecationWarning: PyWarning {

  override internal class var doc: String {
    return "Base class for warnings about features which will be deprecated " +
    "in the future."
  }

  override internal func initType(from context: PyContext) {
    self.setType(to: context.builtins.warningTypes.pendingDeprecationWarning)
  }

  // sourcery: pyproperty = __class__
  override internal func getClass() -> PyType {
    return self.type
  }

  // sourcery: pyproperty = __dict__
  override internal func dict() -> Attributes {
    return self._attributes
  }
}

// sourcery: pywarningtype = RuntimeWarning
internal final class PyRuntimeWarning: PyWarning {

  override internal class var doc: String {
    return "Base class for warnings about dubious runtime behavior."
  }

  override internal func initType(from context: PyContext) {
    self.setType(to: context.builtins.warningTypes.runtimeWarning)
  }

  // sourcery: pyproperty = __class__
  override internal func getClass() -> PyType {
    return self.type
  }

  // sourcery: pyproperty = __dict__
  override internal func dict() -> Attributes {
    return self._attributes
  }
}

// sourcery: pywarningtype = SyntaxWarning
internal final class PySyntaxWarning: PyWarning {

  override internal class var doc: String {
    return "Base class for warnings about dubious syntax."
  }

  override internal func initType(from context: PyContext) {
    self.setType(to: context.builtins.warningTypes.syntaxWarning)
  }

  // sourcery: pyproperty = __class__
  override internal func getClass() -> PyType {
    return self.type
  }

  // sourcery: pyproperty = __dict__
  override internal func dict() -> Attributes {
    return self._attributes
  }
}

// sourcery: pywarningtype = UserWarning
internal final class PyUserWarning: PyWarning {

  override internal class var doc: String {
    return "Base class for warnings generated by user code."
  }

  override internal func initType(from context: PyContext) {
    self.setType(to: context.builtins.warningTypes.userWarning)
  }

  // sourcery: pyproperty = __class__
  override internal func getClass() -> PyType {
    return self.type
  }

  // sourcery: pyproperty = __dict__
  override internal func dict() -> Attributes {
    return self._attributes
  }
}

// sourcery: pywarningtype = FutureWarning
internal final class PyFutureWarning: PyWarning {

  override internal class var doc: String {
    return "Base class for warnings about constructs that will change semantically " +
    "in the future."
  }

  override internal func initType(from context: PyContext) {
    self.setType(to: context.builtins.warningTypes.futureWarning)
  }

  // sourcery: pyproperty = __class__
  override internal func getClass() -> PyType {
    return self.type
  }

  // sourcery: pyproperty = __dict__
  override internal func dict() -> Attributes {
    return self._attributes
  }
}

// sourcery: pywarningtype = ImportWarning
internal final class PyImportWarning: PyWarning {

  override internal class var doc: String {
    return "Base class for warnings about probable mistakes in module imports"
  }

  override internal func initType(from context: PyContext) {
    self.setType(to: context.builtins.warningTypes.importWarning)
  }

  // sourcery: pyproperty = __class__
  override internal func getClass() -> PyType {
    return self.type
  }

  // sourcery: pyproperty = __dict__
  override internal func dict() -> Attributes {
    return self._attributes
  }
}

// sourcery: pywarningtype = UnicodeWarning
internal final class PyUnicodeWarning: PyWarning {

  override internal class var doc: String {
    return "Base class for warnings about Unicode related problems, mostly " +
    "related to conversion problems."
  }

  override internal func initType(from context: PyContext) {
    self.setType(to: context.builtins.warningTypes.unicodeWarning)
  }

  // sourcery: pyproperty = __class__
  override internal func getClass() -> PyType {
    return self.type
  }

  // sourcery: pyproperty = __dict__
  override internal func dict() -> Attributes {
    return self._attributes
  }
}

// sourcery: pywarningtype = BytesWarning
internal final class PyBytesWarning: PyWarning {

  override internal class var doc: String {
    return "Base class for warnings about bytes and buffer related problems, mostly " +
    "related to conversion from str or comparing to str."
  }

  override internal func initType(from context: PyContext) {
    self.setType(to: context.builtins.warningTypes.bytesWarning)
  }

  // sourcery: pyproperty = __class__
  override internal func getClass() -> PyType {
    return self.type
  }

  // sourcery: pyproperty = __dict__
  override internal func dict() -> Attributes {
    return self._attributes
  }
}

// sourcery: pywarningtype = ResourceWarning
internal final class PyResourceWarning: PyWarning {

  override internal class var doc: String {
    return "Base class for warnings about resource usage."
  }

  override internal func initType(from context: PyContext) {
    self.setType(to: context.builtins.warningTypes.resourceWarning)
  }

  // sourcery: pyproperty = __class__
  override internal func getClass() -> PyType {
    return self.type
  }

  // sourcery: pyproperty = __dict__
  override internal func dict() -> Attributes {
    return self._attributes
  }
}
