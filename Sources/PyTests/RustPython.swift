// swiftlint:disable function_body_length

internal func runRustPythonTests() {
  let dir = testDir.appendingPathComponent("RustPython")

  // Not a test by itself, but we will try it anyway just to see it it runs:
//  runTest(file: dir.appendingPathComponent("testutils.py"))

  // Passing tests:
//  runTest(file: dir.appendingPathComponent("3.1.2.13.py"))
//  runTest(file: dir.appendingPathComponent("3.1.2.16.py"))
//  runTest(file: dir.appendingPathComponent("3.1.2.18.py"))
//  runTest(file: dir.appendingPathComponent("3.1.2.19.py"))
//  runTest(file: dir.appendingPathComponent("3.1.3.2.py"))
//  runTest(file: dir.appendingPathComponent("3.1.3.4.py"))
//  runTest(file: dir.appendingPathComponent("3.1.3.5.py"))
//  runTest(file: dir.appendingPathComponent("assignment.py"))
//  runTest(file: dir.appendingPathComponent("attr.py"))
//  runTest(file: dir.appendingPathComponent("basic_types.py"))
//  runTest(file: dir.appendingPathComponent("bools.py"))
//  runTest(file: dir.appendingPathComponent("builtin_abs.py"))
//  runTest(file: dir.appendingPathComponent("builtin_all.py"))
//  runTest(file: dir.appendingPathComponent("builtin_any.py"))
//  runTest(file: dir.appendingPathComponent("builtin_ascii.py"))
//  runTest(file: dir.appendingPathComponent("builtin_bin.py"))
//  runTest(file: dir.appendingPathComponent("builtin_callable.py"))
//  runTest(file: dir.appendingPathComponent("builtin_chr.py"))
//  runTest(file: dir.appendingPathComponent("builtin_complex.py"))
//  runTest(file: dir.appendingPathComponent("builtin_dict.py"))
//  runTest(file: dir.appendingPathComponent("builtin_dir.py"))
//  runTest(file: dir.appendingPathComponent("builtin_divmod.py"))
//  runTest(file: dir.appendingPathComponent("builtin_enumerate.py"))
//  runTest(file: dir.appendingPathComponent("builtin_exec.py"))
//  runTest(file: dir.appendingPathComponent("builtin_file.py"))
//  runTest(file: dir.appendingPathComponent("builtin_filter.py"))
//  runTest(file: dir.appendingPathComponent("builtin_hex.py"))
//  runTest(file: dir.appendingPathComponent("builtin_len.py"))
//  runTest(file: dir.appendingPathComponent("builtin_locals.py"))
//  runTest(file: dir.appendingPathComponent("builtin_map.py"))
//  runTest(file: dir.appendingPathComponent("builtin_max.py"))
//  runTest(file: dir.appendingPathComponent("builtin_min.py"))
//  runTest(file: dir.appendingPathComponent("builtin_ord.py"))
//  runTest(file: dir.appendingPathComponent("builtin_pow.py"))
//  runTest(file: dir.appendingPathComponent("builtin_range.py"))
//  runTest(file: dir.appendingPathComponent("builtin_reversed.py"))
//  runTest(file: dir.appendingPathComponent("builtin_round.py"))
//  runTest(file: dir.appendingPathComponent("builtin_slice.py"))
//  runTest(file: dir.appendingPathComponent("builtin_zip.py"))
//  runTest(file: dir.appendingPathComponent("builtins_module.py"))
//  runTest(file: dir.appendingPathComponent("builtins.py"))
//  runTest(file: dir.appendingPathComponent("bytearray.py"))
//  runTest(file: dir.appendingPathComponent("bytes.py"))
//  runTest(file: dir.appendingPathComponent("callables.py"))
//  runTest(file: dir.appendingPathComponent("cast.py"))
//  runTest(file: dir.appendingPathComponent("class.py"))
//  runTest(file: dir.appendingPathComponent("commas.py"))
//  runTest(file: dir.appendingPathComponent("comments.py"))
//  runTest(file: dir.appendingPathComponent("comparisons.py"))
//  runTest(file: dir.appendingPathComponent("control_flow.py"))
//  runTest(file: dir.appendingPathComponent("decorators.py"))
//  runTest(file: dir.appendingPathComponent("delete.py"))
//  runTest(file: dir.appendingPathComponent("derived_mc.py"))
//  runTest(file: dir.appendingPathComponent("dict.py"))
//  runTest(file: dir.appendingPathComponent("division_by_zero.py"))
//  runTest(file: dir.appendingPathComponent("ellipsis.py"))
//  runTest(file: dir.appendingPathComponent("exceptions.py"))
//  runTest(file: dir.appendingPathComponent("exit.py"))
//  runTest(file: dir.appendingPathComponent("fizzbuzz.py"))
//  runTest(file: dir.appendingPathComponent("floats.py"))
//  runTest(file: dir.appendingPathComponent("for.py"))
//  runTest(file: dir.appendingPathComponent("fstrings.py"))
//  runTest(file: dir.appendingPathComponent("func_defaults.py"))
//  runTest(file: dir.appendingPathComponent("function_args.py"))
//  runTest(file: dir.appendingPathComponent("function_nested.py"))
//  runTest(file: dir.appendingPathComponent("function.py"))
//  runTest(file: dir.appendingPathComponent("global_nonlocal.py"))
//  runTest(file: dir.appendingPathComponent("hash.py"))
//  runTest(file: dir.appendingPathComponent("if_expressions.py"))
//  runTest(file: dir.appendingPathComponent("if.py"))
//  runTest(file: dir.appendingPathComponent("import_file.py"))
//  runTest(file: dir.appendingPathComponent("import_mutual1.py"))
//  runTest(file: dir.appendingPathComponent("import_mutual2.py"))
//  runTest(file: dir.appendingPathComponent("import_name.py"))
//  runTest(file: dir.appendingPathComponent("import_star.py"))
//  runTest(file: dir.appendingPathComponent("import_target.py"))
//  runTest(file: dir.appendingPathComponent("import.py"))
//  runTest(file: dir.appendingPathComponent("indentation.py"))
//  runTest(file: dir.appendingPathComponent("inplace_ops.py"))
//  runTest(file: dir.appendingPathComponent("int_float_comparisons.py"))
//  runTest(file: dir.appendingPathComponent("ints.py"))
//  runTest(file: dir.appendingPathComponent("invalid_syntax.py"))
//  runTest(file: dir.appendingPathComponent("isinstance.py"))
//  runTest(file: dir.appendingPathComponent("issubclass.py"))
//  runTest(file: dir.appendingPathComponent("iterable.py"))
//  runTest(file: dir.appendingPathComponent("iterations.py"))
//  runTest(file: dir.appendingPathComponent("list.py"))
//  runTest(file: dir.appendingPathComponent("literals.py"))
//  runTest(file: dir.appendingPathComponent("loop.py"))
//  runTest(file: dir.appendingPathComponent("mappingproxy.py"))
//  runTest(file: dir.appendingPathComponent("math_basics.py"))
//  runTest(file: dir.appendingPathComponent("membership.py"))
//  runTest(file: dir.appendingPathComponent("metaclasses.py"))
//  runTest(file: dir.appendingPathComponent("minimum.py"))
//  runTest(file: dir.appendingPathComponent("module.py"))
//  runTest(file: dir.appendingPathComponent("mro.py"))
//  runTest(file: dir.appendingPathComponent("name.py"))
//  runTest(file: dir.appendingPathComponent("none.py"))
//  runTest(file: dir.appendingPathComponent("numbers.py"))
//  runTest(file: dir.appendingPathComponent("object.py"))
//  runTest(file: dir.appendingPathComponent("printing.py"))
//  runTest(file: dir.appendingPathComponent("property.py"))
//  runTest(file: dir.appendingPathComponent("set.py"))
//  runTest(file: dir.appendingPathComponent("short_circuit_evaluations.py"))
//  runTest(file: dir.appendingPathComponent("slice.py"))
//  runTest(file: dir.appendingPathComponent("statements.py"))
//  runTest(file: dir.appendingPathComponent("strings.py"))
//  runTest(file: dir.appendingPathComponent("test_warnings.py"))
//  runTest(file: dir.appendingPathComponent("try_exceptions.py"))
//  runTest(file: dir.appendingPathComponent("tuple.py"))
//  runTest(file: dir.appendingPathComponent("type_hints.py"))
//  runTest(file: dir.appendingPathComponent("types_snippet.py"))
//  runTest(file: dir.appendingPathComponent("unicode_slicing.py"))
//  runTest(file: dir.appendingPathComponent("variables.py"))
//  runTest(file: dir.appendingPathComponent("with.py"))

//  runTest(file: dir.appendingPathComponent("builtin_format.py"))
//  runTest(file: dir.appendingPathComponent("builtin_open.py"))
//  runTest(file: dir.appendingPathComponent("code.py"))
//  runTest(file: dir.appendingPathComponent("extra_bool_eval.py")) // needs peephole
//  runTest(file: dir.appendingPathComponent("funky_syntax.py"))
//  runTest(file: dir.appendingPathComponent("getframe.py"))
//  runTest(file: dir.appendingPathComponent("imp.py"))
//  runTest(file: dir.appendingPathComponent("stdlib_sys.py"))
//  runTest(file: dir.appendingPathComponent("subclass_str.py"))
}
