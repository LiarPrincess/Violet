// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

// This file was auto-generated by Elsa from 'ast.letitgo' using 'ast' command.
// DO NOT EDIT!

import Lexer

// swiftlint:disable trailing_newline

public struct Expression {

  public let kind: ExpressionKind
  public let start: SourceLocation
  public let end: SourceLocation

  public init(kind: ExpressionKind, start: SourceLocation, end: SourceLocation) {
    self.kind = kind
    self.start = start
    self.end = end
  }
}

public indirect enum ExpressionKind {
  case boolOp(op: BooleanOperator, a: Expression, b: Expression)
  case binaryOp(op: BinaryOperator, left: Expression, right: Expression)
  case unaryOp(op: UnaryOperator, a: Expression)
  case ifExpression(test: Expression, body: Expression, orelse: Expression)
  case set(elements: [Expression])
  case attribute(name: String, value: Expression)
  case starred(value: Expression)
  case identifier(id: String)
  case list(elements: [Expression])
  case tuple(elements: [Expression])
}

public enum BooleanOperator {
  /// Logical `and` with short-circuit.
  case and
  /// Logical `or` with short-circuit.
  case or
}

public enum BinaryOperator {
  /// Sum of its arguments.
  /// - Numbers added together.
  /// - Sequences are concatenated.
  case add
  /// Difference of its arguments.
  case sub
  /// Product of its arguments.
  /// - Numbers multiplied together.
  /// - For integer and sequence repetition is performed.
  case mul
  /// Intended to be used for matrix multiplication.
  /// No builtin Python types implement this operator.
  case matMult
  /// Quotient of their arguments.
  /// Division of integers yields a float.
  case div
  /// Remainder from the division of the first argument by the second.
  case modulo
  /// Left argument raised to the power of its right argument.
  case pow
  /// Shift the first argument to the left by the number of bits
  /// given by the second argument.
  case leftShift
  /// Shift the first argument to the right by the number of bits
  /// given by the second argument.
  case rightShift
  /// Bitwise (inclusive) OR of its arguments, which must be integers.
  case bitOr
  /// Bitwise XOR (exclusive OR) of its arguments, which must be integers.
  case bitXor
  /// Bitwise AND of its arguments, which must be integers.
  case bitAnd
  /// Quotient of their arguments.
  /// Floor division of integers results in an integer.
  case floorDiv
}

public enum UnaryOperator {
  /// Bitwise inversion of its integer argument.
  /// Only applies to integral numbers.
  case invert
  /// True if its argument is false, False otherwise.
  case not
  /// Unchanged argument.
  case plus
  /// Negation of its numeric argument.
  case minus
}

public enum ComparisonOperator {
  /// Equality comparison.
  case equal
  /// Non equality comparison.
  case notEqual
  /// Order comparison.
  case less
  /// Order comparison.
  case lessOrEqual
  /// Order comparison.
  case greater
  /// Order comparison.
  case greaterOrEqual
  /// `x is y` is true if and only if x and y are the same object.
  case `is`
  /// `x is not y` returns the negation of `x is y`.
  case isNot
  /// `x in s` evaluates to True if x is a member of s, and False otherwise.
  case `in`
  /// `x not in s` returns the negation of `x in s`
  case notIn
}

