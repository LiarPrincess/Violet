import types as t
import collections as c

iterator = c.Iterator
callable_iterator = type(iter(str, None))
tuple_iterator = type(iter(()))

list_iterator = type(iter([]))
list_reverseiterator = type(reversed([]))

set_iterator = type(iter({ 1 }))

dict_items = type({}.items())
dict_itemiterator = type(iter({}.items()))
dict_keys = type({}.keys())
dict_keyiterator = type(iter({}.keys()))
dict_values = type({}.values())
dict_valueiterator = type(iter({}.values()))

str_iterator = type(iter(''))
bytes_iterator = type(iter(b''))
bytearray_iterator = type(iter(bytearray()))

range_iterator = type(iter(range(1)))

{% macro printProperties properties %}
  {% for prop in properties|annotated:"pyproperty" %}
    '{{ prop.annotations.pyproperty }}',
  {% endfor %}
{% endmacro %}

{% macro printMethods methods %}
  {% for method in methods|annotated:"pymethod" %}
    '{{ method.annotations.pymethod }}',
  {% endfor %}
{% endmacro %}

types = {
{% for type in types.enums where type.name == "PyBaseObject" %}
  object: [
    {% call printProperties type.staticMethods %}
    {% call printMethods type.staticMethods %}
  ],
{% endfor %}
{% for type in types.classes where type.name == "PyType" %}
  type: [
    {% call printProperties type.methods %}
    {% call printMethods type.methods %}
  ],
{% endfor %}
{% for type in types.classes|annotated:"pytype" %}
  {% if type.annotations.pytype == "NoneType" %}type(None): [
  {% elif type.annotations.pytype == "NotImplementedType" %}type(NotImplemented): [
  {% elif type.annotations.pytype == "ellipsis" %}type(...): [
  {% elif type.annotations.pytype == "code" %}t.CodeType: [
  {% elif type.annotations.pytype == "module" %}t.ModuleType: [
  {% elif type.annotations.pytype == "function" %}t.FunctionType: [
  {% elif type.annotations.pytype == "method" %}t.MethodType: [
  {% elif type.annotations.pytype == "builtinFunction" %}t.BuiltinFunctionType: [
  {% elif type.annotations.pytype == "builtinMethod" %}t.BuiltinMethodType: [
  {% elif type.annotations.pytype == "types.SimpleNamespace" %}t.SimpleNamespace: [
  {% else %}{{ type.annotations.pytype }}: [
  {% endif %}
    {% call printProperties type.methods %}
    {% call printMethods type.methods %}
  ],
{% endfor %}
{% for type in types.classes|annotated:"pyerrortype" %}
  {{ type.annotations.pyerrortype }}: [
    {% call printProperties type.methods %}
    {% call printMethods type.methods %}
  ],
{% endfor %}
}
