import _io
import types
import collections

NoneType = type(None)
NotImplementedType = type(NotImplemented)
ellipsis = type(...)
code = types.CodeType
module = types.ModuleType
function = types.FunctionType
method = types.MethodType
builtinFunction = types.BuiltinFunctionType
builtinMethod = types.BuiltinMethodType
SimpleNamespace = types.SimpleNamespace

iterator = collections.Iterator
callable_iterator = type(iter(str, None))
tuple_iterator = type(iter(()))

list_iterator = type(iter([]))
list_reverseiterator = type(reversed([]))

set_iterator = type(iter({ 1 }))

dict_items = type({}.items())
dict_itemiterator = type(iter({}.items()))
dict_keys = type({}.keys())
dict_keyiterator = type(iter({}.keys()))
dict_values = type({}.values())
dict_valueiterator = type(iter({}.values()))

str_iterator = type(iter(''))
bytes_iterator = type(iter(b''))
bytearray_iterator = type(iter(bytearray()))

range_iterator = type(iter(range(1)))

# We dont have '_io' module.
# Instead we use custom 'builtins.TextFile' based on '_io.TextIOWrapper'.
TextFile = _io.TextIOWrapper

{% macro printProperties properties %}
  {% for prop in properties|annotated:"pyproperty" %}
    '{{ prop.annotations.pyproperty }}',
  {% endfor %}
{% endmacro %}

{% macro printMethods methods %}
  {% for method in methods|annotated:"pymethod" %}
    '{{ method.annotations.pymethod }}',
  {% endfor %}
{% endmacro %}

types = {
{% for type in types.enums where type.name == "PyBaseObject" %}
  object: [
    {% call printProperties type.staticMethods %}
    {% call printMethods type.staticMethods %}
  ],
{% endfor %}
{% for type in types.classes where type.name == "PyType" %}
  type: [
    {% call printProperties type.methods %}
    {% call printMethods type.methods %}
  ],
{% endfor %}
{% for type in types.classes|annotated:"pytype" %}
  {{ type.annotations.pytype }}: [
    {% call printProperties type.methods %}
    {% call printMethods type.methods %}
  ],
{% endfor %}
{% for type in types.classes|annotated:"pyerrortype" %}
  {{ type.annotations.pyerrortype }}: [
    {% call printProperties type.methods %}
    {% call printMethods type.methods %}
  ],
{% endfor %}
}
